<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[go语言grpc学习笔记]]></title>
    <url>%2F2021%2F03%2F19%2F44.go%E8%AF%AD%E8%A8%80grpc%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20%E5%89%AF%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚个人博客：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com grpc教程 视频：https://www.bilibili.com/video/BV1GE411A7kp 代码：https://github.com/zhuge20100104/grpc-demo 打开go-module 12set GO111MODULE=on //windowsexport GO111MODULE=on //linux 编辑器settings-GO-Go Modules勾选 安装protoc Linux创建目录 12mkdir protocd proto 打开https://github.com/protocolbuffers/protobuf/releases下载最新版本的protoc-*-linux-x86_64.zip 1wget https://github.com/protocolbuffers/protobuf/releases/download/v3.12.3/protoc-3.12.3-linux-x86_64.zip 解压 1unzip protoc-3.12.3-linux-x86_64.zip 添加到path 1vim /etc/profile 把你的bin路径加到最后保存 1export PATH=$PATH:/root/protoc/bin 刷新配置表 1source /etc/profile 查看版本 1protoc --version Windows打开https://github.com/protocolbuffers/protobuf/releases下载最新版本的protoc-*-win64.zip 新建一个文件夹并加压，然后把bin目录添加到环境变量即可 查看版本 1protoc --version 安装protoc-gen-go 执行命令 1go get -u github.com/golang/protobuf/protoc-gen-go 然后会在$GOPATH/bin目录下发现protoc-gen-go.exe 安装IDE插件 此步骤可选 在goland插件库中安装Protobuf Support grpc流程 创建proto文件创建pbfiles/Prod.proto文件，复制下面的代码保存 12345678910syntax="proto3";option go_package = ".;services";package services;message ProdRequest&#123; int32 prod_id=1;&#125;message ProResponse&#123; int32 pro_stock=1;&#125; 生成.pb.go文件创建services目录然后在pbfiles目录下执行命令 1protoc --go_out=../services Prod.proto 会得到services/Prod.pb.go文件 在pbfiles/Prod.proto文件新增服务代码 123service ProService&#123; rpc GetProStock (ProdRequest) returns (ProResponse);&#125; 执行下面的命令 1protoc --go_out=plugins=grpc:../services Prod.proto services/Prod.pb.go文件会生成更多的代码 创建业务逻辑文件在生成的.pb.go文件中找到GetProdStock的接口，然后复制，创建services/ProdService.go,然后实现GetProdStock方法的具体逻辑 123456789101112package servicesimport ( "context")type ProdService struct &#123;&#125;func (this *ProdService) GetProdStock(ctx context.Context, request *ProdRequest) (*ProdResponse, error) &#123; return &amp;ProdResponse&#123;ProStock:20&#125;, nil&#125; 创建服务端创建server/server.go,并写入以下代码 1234567891011121314151617181920212223package mainimport ( "google.golang.org/grpc" "grpc-test/services" "log" "net")func main() &#123; rpcServer := grpc.NewServer() services.RegisterProdServiceServer(rpcServer, new(services.ProdService)) lis, err := net.Listen("tcp", ":8081") if err != nil &#123; log.Fatal(err) &#125; //tcp服务 err = rpcServer.Serve(lis) if err != nil &#123; log.Fatal(err) &#125;&#125; 创建客户端创建client/client.go,并写入以下代码 1234567891011121314151617181920212223242526package mainimport ( "context" "fmt" "grpc-test/services" "log" "google.golang.org/grpc")func main() &#123; conn, err := grpc.Dial(":8081", grpc.WithInsecure()) //grpc.WithInsecure()：不使用证书 if err != nil &#123; log.Fatalf("连接GRPC服务端失败 %v\n", err) &#125; defer conn.Close() prodClient := services.NewProdServiceClient(conn) prodRes, err := prodClient.GetProdStock(context.Background(), &amp;services.ProdRequest&#123;ProdId: 12&#125;) if err != nil &#123; log.Fatalf("请求GRPC服务端失败 %v\n", err) &#125; fmt.Println(prodRes.ProStock)&#125; 启动服务在命令行执行go run server/server.go,然后在另一个终端执行go run client/client.go即可 同时提供rpc和http服务时提供rpc和http服务的grpc框架 https://github.com/grpc-ecosystem/grpc-gateway 第三方字段验证库除了自行对参数字段进行验证，也可以选用第三方库验证字段 1github.com/envoyproxy/protoc-gen-validate/validate 流模式 服务端流User.proto 123456789101112131415161718syntax = "proto3";package services;import "Model.proto";message UserScoreRequest &#123; repeated UserInfo users = 1;&#125;message UserScoreResponse &#123; repeated UserInfo users = 1;&#125;service UserService &#123; rpc GetUserScore(UserScoreRequest) returns (UserScoreResponse) &#123;&#125; rpc GetUserScoreByServerStream(UserScoreRequest) returns (stream UserScoreResponse) &#123;&#125; //定义rpc服务&#125; 服务端UserService.go 123456789101112131415161718192021222324252627282930313233343536373839404142package servicesimport context "context"type UserService struct&#123;&#125;func (*UserService) GetUserScore(ctx context.Context, req *UserScoreRequest) (*UserScoreResponse, error) &#123; var score int32 = 100 users := make([]*UserInfo, 0) for _, user := range req.Users &#123; user.UserScore = score score++ users = append(users, user) &#125; return &amp;UserScoreResponse&#123;Users: users&#125;, nil&#125;func (*UserService) GetUserScoreByServerStream(req *UserScoreRequest, stream UserService_GetUserScoreByServerStreamServer) error &#123; var score int32 = 100 users := make([]*UserInfo, 0) for index, user := range req.Users &#123; //分批发送给客户端 user.UserScore = score score++ users = append(users, user) if (index+1)%2 == 0 &amp;&amp; index &gt; 0 &#123; err := stream.Send(&amp;UserScoreResponse&#123;Users: users&#125;) if err != nil &#123; return err &#125; users = users[0:0] &#125; &#125; // 发送最后一批 if len(users) &gt; 0 &#123; err := stream.Send(&amp;UserScoreResponse&#123;Users: users&#125;) if err != nil &#123; return err &#125; &#125; return nil&#125; 客户端 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152package mainimport ( "context" "fmt" "io" "log" "github.com/zhuge20100104/grpc-demo/grpc-13/client/helper" "github.com/zhuge20100104/grpc-demo/grpc-13/client/services" "google.golang.org/grpc")func main() &#123; conn, err := grpc.Dial(":8081", grpc.WithTransportCredentials(helper.GetClientCredentials())) if err != nil &#123; log.Fatalf("连接GRPC服务端失败 %v\n", err) &#125; defer conn.Close() userClient := services.NewUserServiceClient(conn) users := make([]*services.UserInfo, 0) var i int32 = 0 for i = 0; i &lt; 6; i++ &#123; user := &amp;services.UserInfo&#123;UserId: i + 1&#125; users = append(users, user) &#125; stream, err := userClient.GetUserScoreByServerStream(context.Background(), &amp;services.UserScoreRequest&#123;Users: users&#125;, ) if err != nil &#123; log.Fatalf("请求GRPC服务端失败 %v\n", err) &#125; for &#123; userRes, err := stream.Recv() //读取流数据 if err == io.EOF &#123; break &#125; if err != nil &#123; fmt.Printf("读取服务端流失败 err: %v\n", err.Error()) &#125; fmt.Println(userRes.Users) &#125;&#125; 客户端流服务端 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970package servicesimport ( context "context" "io")type UserService struct&#123;&#125;func (*UserService) GetUserScore(ctx context.Context, req *UserScoreRequest) (*UserScoreResponse, error) &#123; var score int32 = 100 users := make([]*UserInfo, 0) for _, user := range req.Users &#123; user.UserScore = score score++ users = append(users, user) &#125; return &amp;UserScoreResponse&#123;Users: users&#125;, nil&#125;func (*UserService) GetUserScoreByServerStream(req *UserScoreRequest, stream UserService_GetUserScoreByServerStreamServer) error &#123; var score int32 = 100 users := make([]*UserInfo, 0) for index, user := range req.Users &#123; user.UserScore = score score++ users = append(users, user) if (index+1)%2 == 0 &amp;&amp; index &gt; 0 &#123; err := stream.Send(&amp;UserScoreResponse&#123;Users: users&#125;) if err != nil &#123; return err &#125; users = users[0:0] &#125; &#125; // 发送最后一批 if len(users) &gt; 0 &#123; err := stream.Send(&amp;UserScoreResponse&#123;Users: users&#125;) if err != nil &#123; return err &#125; &#125; return nil&#125;func (*UserService) GetUserScoreByClientStream(stream UserService_GetUserScoreByClientStreamServer) error &#123; users := make([]*UserInfo, 0) var score int32 = 100 for &#123; req, err := stream.Recv() if err == io.EOF &#123; err = stream.SendAndClose(&amp;UserScoreResponse&#123;Users: users&#125;) return err &#125; if err != nil &#123; return err &#125; for _, user := range req.Users &#123; user.UserScore = score users = append(users, user) score++ &#125; &#125;&#125; 客户端 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758package mainimport ( "context" "fmt" "log" "github.com/zhuge20100104/grpc-demo/grpc-14/client/helper" "github.com/zhuge20100104/grpc-demo/grpc-14/client/services" "google.golang.org/grpc")func main() &#123; conn, err := grpc.Dial(":8081", grpc.WithTransportCredentials(helper.GetClientCredentials())) if err != nil &#123; log.Fatalf("连接GRPC服务端失败 %v\n", err) &#125; defer conn.Close() userClient := services.NewUserServiceClient(conn) users := make([]*services.UserInfo, 0) var i int32 = 0 for i = 0; i &lt; 6; i++ &#123; user := &amp;services.UserInfo&#123;UserId: i + 1&#125; users = append(users, user) &#125; stream, err := userClient.GetUserScoreByClientStream(context.Background()) if err != nil &#123; log.Fatalf("请求GRPC服务端失败 %v\n", err) &#125; for i := 0; i &lt; 3; i++ &#123; req := new(services.UserScoreRequest) req.Users = make([]*services.UserInfo, 0) var j int32 for j = 1; j &lt;= 5; j++ &#123; req.Users = append(req.Users, &amp;services.UserInfo&#123;UserId: j&#125;) &#125; stream.Send(req) &#125; res, err := stream.CloseAndRecv() if err != nil &#123; log.Fatalf("接收服务端请求失败 %v\n", err) &#125; for _, user := range res.Users &#123; fmt.Println(user) &#125;&#125; 双向流服务端UserService.go 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091package servicesimport ( context "context" "io")type UserService struct&#123;&#125;func (*UserService) GetUserScore(ctx context.Context, req *UserScoreRequest) (*UserScoreResponse, error) &#123; var score int32 = 100 users := make([]*UserInfo, 0) for _, user := range req.Users &#123; user.UserScore = score score++ users = append(users, user) &#125; return &amp;UserScoreResponse&#123;Users: users&#125;, nil&#125;func (*UserService) GetUserScoreByServerStream(req *UserScoreRequest, stream UserService_GetUserScoreByServerStreamServer) error &#123; var score int32 = 100 users := make([]*UserInfo, 0) for index, user := range req.Users &#123; user.UserScore = score score++ users = append(users, user) if (index+1)%2 == 0 &amp;&amp; index &gt; 0 &#123; err := stream.Send(&amp;UserScoreResponse&#123;Users: users&#125;) if err != nil &#123; return err &#125; users = users[0:0] &#125; &#125; // 发送最后一批 if len(users) &gt; 0 &#123; err := stream.Send(&amp;UserScoreResponse&#123;Users: users&#125;) if err != nil &#123; return err &#125; &#125; return nil&#125;func (*UserService) GetUserScoreByClientStream(stream UserService_GetUserScoreByClientStreamServer) error &#123; users := make([]*UserInfo, 0) var score int32 = 100 for &#123; req, err := stream.Recv() if err == io.EOF &#123; err = stream.SendAndClose(&amp;UserScoreResponse&#123;Users: users&#125;) return err &#125; if err != nil &#123; return err &#125; for _, user := range req.Users &#123; user.UserScore = score users = append(users, user) score++ &#125; &#125;&#125;func (*UserService) GetUserScoreByTWS(stream UserService_GetUserScoreByTWSServer) error &#123; users := make([]*UserInfo, 0) var score int32 = 100 for &#123; req, err := stream.Recv() if err == io.EOF &#123; return nil &#125; if err != nil &#123; return err &#125; for _, user := range req.Users &#123; user.UserScore = score users = append(users, user) score++ &#125; stream.Send(&amp;UserScoreResponse&#123;Users: users&#125;) users = users[0:0] &#125;&#125; 客户端 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package mainimport ( "context" "fmt" "io" "log" "github.com/zhuge20100104/grpc-demo/grpc-15/client/helper" "github.com/zhuge20100104/grpc-demo/grpc-15/client/services" "google.golang.org/grpc")func main() &#123; conn, err := grpc.Dial(":8081", grpc.WithTransportCredentials(helper.GetClientCredentials())) if err != nil &#123; log.Fatalf("连接GRPC服务端失败 %v\n", err) &#125; defer conn.Close() userClient := services.NewUserServiceClient(conn) users := make([]*services.UserInfo, 0) var i int32 = 0 for i = 0; i &lt; 6; i++ &#123; user := &amp;services.UserInfo&#123;UserId: i + 1&#125; users = append(users, user) &#125; stream, err := userClient.GetUserScoreByTWS(context.Background()) if err != nil &#123; log.Fatalf("请求GRPC服务端失败 %v\n", err) &#125; for i := 0; i &lt; 3; i++ &#123; req := new(services.UserScoreRequest) req.Users = make([]*services.UserInfo, 0) var j int32 for j = 1; j &lt;= 5; j++ &#123; req.Users = append(req.Users, &amp;services.UserInfo&#123;UserId: j&#125;) &#125; stream.Send(req) res, err := stream.Recv() if err == io.EOF &#123; break &#125; if err != nil &#123; log.Fatalf("接收服务端请求失败 %v\n", err) &#125; fmt.Println(res.Users) &#125;&#125;]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>grpc</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决go语言concurrent map writes问题]]></title>
    <url>%2F2021%2F03%2F17%2F45.%E8%A7%A3%E5%86%B3go%E8%AF%AD%E8%A8%80concurrent%20map%20writes%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚个人博客：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 运行下面的程序会报错fatal error: concurrent map writes 12345678910111213package mainimport "time"var m = make(map[int]int)func main() &#123; for i := 0; i &lt; 10; i++ &#123; go func(n int) &#123; m[n]=n &#125;(i) &#125; time.Sleep(time.Duration(2)*time.Second)&#125; 原因是map为引用类型，高并发时对map并发写会产生竞争，不管是否同一个key都会报错，并发对map读是不会有问题的。 解决方法一将map换成sync.Map 1234567891011121314151617181920212223package mainimport ( "fmt" "sync" "time")var m sync.Mapfunc main() &#123; for i := 0; i &lt; 10; i++ &#123; go func(n int) &#123; m.Store("a",n) //写入 &#125;(i) &#125; time.Sleep(time.Duration(2)*time.Second) fmt.Println(m.Load("a")) //读取 //遍历 m.Range(func(k, v interface&#123;&#125;) bool &#123; fmt.Println( k, v) return true &#125;)&#125; 解决方法二加锁 1234567891011121314151617181920212223package mainimport ( "fmt" "sync" "time")var m = make(map[int]int)var lock sync.Mutexfunc main() &#123; for i := 0; i &lt; 10; i++ &#123; go func(n int) &#123; lock.Lock() //加锁,加锁期间其他协程会进入阻塞状态直到解锁 time.Sleep(time.Duration(2)*time.Second) fmt.Println(n,"在执行") m[n]=n lock.Unlock() //解锁 &#125;(i) &#125; time.Sleep(time.Duration(20)*time.Second)&#125;]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>map</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Golang生成bip39助记词、eth地址和密钥对]]></title>
    <url>%2F2020%2F12%2F23%2F43.golang%E7%94%9F%E6%88%90bip39%E5%8A%A9%E8%AE%B0%E8%AF%8D%E3%80%81eth%E5%9C%B0%E5%9D%80%E5%92%8C%E5%AF%86%E9%92%A5%E5%AF%B9%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚个人博客：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 本文主要用到两个包 生成助记词：github.com/tyler-smith/go-bip39 生成eth地址和公私密钥对：github.com/miguelmota/go-ethereum-hdwallet 通过本文代码生成的助记词、地址和密钥对完全能导入其他平台并正常使用，比如通过助记词或私钥导入imTokenAPP，或者导入在线钱包网站MyEtherWallet | MEW等 完整代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647package mainimport ( "fmt" "github.com/miguelmota/go-ethereum-hdwallet" "github.com/tyler-smith/go-bip39" "log")func main() &#123; entropy, err := bip39.NewEntropy(128) if err != nil &#123; log.Fatal(err) &#125; mnemonic, _ := bip39.NewMnemonic(entropy) //var mnemonic = "pepper hair process town say voyage exhibit over carry property follow define" fmt.Println("mnemonic:", mnemonic) seed := bip39.NewSeed(mnemonic, "") //这里可以选择传入指定密码或者空字符串，不同密码生成的助记词不同 wallet, err := hdwallet.NewFromSeed(seed) if err != nil &#123; log.Fatal(err) &#125; path := hdwallet.MustParseDerivationPath("m/44'/60'/0'/0/0") //最后一位是同一个助记词的地址id，从0开始，相同助记词可以生产无限个地址 account, err := wallet.Derive(path, false) if err != nil &#123; log.Fatal(err) &#125; address := account.Address.Hex() privateKey, _ := wallet.PrivateKeyHex(account) publicKey, _ := wallet.PublicKeyHex(account) fmt.Println("address0:", address) // id为0的钱包地址 fmt.Println("privateKey:", privateKey) // 私钥 fmt.Println("publicKey:", publicKey) // 公钥 path = hdwallet.MustParseDerivationPath("m/44'/60'/0'/0/1") //生成id为1的钱包地址 account, err = wallet.Derive(path, false) if err != nil &#123; log.Fatal(err) &#125; fmt.Println("address1:", account.Address.Hex())&#125;]]></content>
      <categories>
        <category>eth</category>
      </categories>
      <tags>
        <tag>助记词</tag>
        <tag>bip39</tag>
        <tag>eth地址</tag>
        <tag>eth私钥</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[golang高性能日志库zap的使用]]></title>
    <url>%2F2020%2F12%2F16%2F42.golang%E9%AB%98%E6%80%A7%E8%83%BD%E6%97%A5%E5%BF%97%E5%BA%93zap%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚个人博客：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 摘要zap是Uber开发的非常快的、结构化的，分日志级别的Go日志库。根据Uber-go Zap的文档，它的性能比类似的结构化日志包更好，也比标准库更快。具体的性能测试可以去github上看到。 github地址：https://github.com/uber-go/zap 创建实例通过调用zap.NewProduction()/zap.NewDevelopment()或者zap.Example()创建一个Logger。这三个方法的区别在于它将记录的信息不同，参数只能是string类型 12345678910111213141516171819//代码var log *zap.Loggerlog = zap.NewExample()log, _ := zap.NewDevelopment()log, _ := zap.NewProduction()log.Debug("This is a DEBUG message")log.Info("This is an INFO message")//Example 输出&#123;"level":"debug","msg":"This is a DEBUG message"&#125;&#123;"level":"info","msg":"This is an INFO message"&#125;//Development 输出2018-10-30T17:14:22.459+0800 DEBUG development/main.go:7 This is a DEBUG message2018-10-30T17:14:22.459+0800 INFO development/main.go:8 This is an INFO message//Production 输出&#123;"level":"info","ts":1540891173.3190675,"caller":"production/main.go:8","msg":"This is an INFO message"&#125;&#123;"level":"info","ts":1540891173.3191047,"caller":"production/main.go:9","msg":"This is an INFO message with fields","region":["us-west"],"id":2&#125; 三种创建方式对比： Example和Production使用的是json格式输出，Development使用行的形式输出 Development 从警告级别向上打印到堆栈中来跟踪 始终打印包/文件/行（方法） 在行尾添加任何额外字段作为json字符串 以大写形式打印级别名称 以毫秒为单位打印ISO8601格式的时间戳 Production 调试级别消息不记录 Error,Dpanic级别的记录，会在堆栈中跟踪文件，Warn不会 始终将调用者添加到文件中 以时间戳格式打印日期 以小写形式打印级别名称 格式化输出zap有两种类型，分别是*zap.Logger和*zap.SugaredLogger,它们惟一的区别是，我们通过调用主logger的. Sugar()方法来获取一个SugaredLogger，然后使用SugaredLogger以printf格式记录语句，例如 123456789101112var sugarLogger *zap.SugaredLoggerfunc InitLogger() &#123; logger, _ := zap.NewProduction() sugarLogger = logger.Sugar()&#125;func main() &#123; InitLogger() defer sugarLogger.Sync() sugarLogger.Errorf("Error fetching URL %s : Error = %s", url, err)&#125; 写入文件默认情况下日志都会打印到应用程序的console界面，但是为了方便查询，可以将日志写入文件，但是我们不能再使用前面创建实例的3个方法，而是使用zap.New() 1234567891011121314151617181920package mainimport ( "go.uber.org/zap" "go.uber.org/zap/zapcore" "os")var log *zap.Loggerfunc main() &#123; writeSyncer, _ := os.Create("./info.log") //日志文件存放目录 encoderConfig := zap.NewProductionEncoderConfig() //指定时间格式 encoderConfig.EncodeTime = zapcore.ISO8601TimeEncoder encoderConfig.EncodeLevel = zapcore.CapitalLevelEncoder encoder := zapcore.NewConsoleEncoder(encoderConfig) //获取编码器,NewJSONEncoder()输出json格式，NewConsoleEncoder()输出普通文本格式 core := zapcore.NewCore(encoder, writeSyncer, zapcore.DebugLevel) //第三个及之后的参数为写入文件的日志级别,ErrorLevel模式只记录error级别的日志 log = zap.New(core,zap.AddCaller()) //AddCaller()为显示文件名和行号 log.Info("hello world") log.Error("hello world")&#125; 日志文件输出结果： 122020-12-16T17:53:30.466+0800 INFO geth/main.go:18 hello world2020-12-16T17:53:30.486+0800 ERROR geth/main.go:19 hello world 同时输出控制台和文件如果需要同时输出控制台和文件，只需要改造一下zapcore.NewCore即可，示例： 12345678910111213141516171819202122232425262728293031323334package mainimport ( "github.com/natefinch/lumberjack" "go.uber.org/zap" "go.uber.org/zap/zapcore" "os")var log *zap.Loggerfunc main() &#123; //获取编码器,NewJSONEncoder()输出json格式，NewConsoleEncoder()输出普通文本格式 encoderConfig := zap.NewProductionEncoderConfig() encoderConfig.EncodeTime = zapcore.ISO8601TimeEncoder //指定时间格式 encoderConfig.EncodeLevel = zapcore.CapitalLevelEncoder encoder := zapcore.NewConsoleEncoder(encoderConfig) //文件writeSyncer fileWriteSyncer := zapcore.AddSync(&amp;lumberjack.Logger&#123; Filename: "./info.log", //日志文件存放目录 MaxSize: 1, //文件大小限制,单位MB MaxBackups: 5, //最大保留日志文件数量 MaxAge: 30, //日志文件保留天数 Compress: false, //是否压缩处理 &#125;) fileCore := zapcore.NewCore(encoder, zapcore.NewMultiWriteSyncer(fileWriteSyncer,zapcore.AddSync(os.Stdout)), zapcore.DebugLevel) //第三个及之后的参数为写入文件的日志级别,ErrorLevel模式只记录error级别的日志 log = zap.New(fileCore, zap.AddCaller()) //AddCaller()为显示文件名和行号 log.Info("hello world") log.Error("hello world")&#125; 文件切割日志文件会随时间越来越大，为了避免日志文件把硬盘空间占满，需要按条件对日志文件进行切割，zap包本身不提供文件切割的功能，但是可以用zap官方推荐的lumberjack包处理 12345678//文件writeSyncerfileWriteSyncer := zapcore.AddSync(&amp;lumberjack.Logger&#123; Filename: "./info.log", //日志文件存放目录，如果文件夹不存在会自动创建 MaxSize: 1, //文件大小限制,单位MB MaxBackups: 5, //最大保留日志文件数量 MaxAge: 30, //日志文件保留天数 Compress: false, //是否压缩处理&#125;) 按级别写入文件为了管理人员的查询方便，一般我们需要将低于error级别的放到info.log，error及以上严重级别日志存放到error.log文件中，我们只需要改造一下zapcore.NewCore方法的第3个参数，然后将文件WriteSyncer拆成info和error两个即可，示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556package mainimport ( "github.com/natefinch/lumberjack" "go.uber.org/zap" "go.uber.org/zap/zapcore" "os")var log *zap.Loggerfunc main() &#123; var coreArr []zapcore.Core //获取编码器 encoderConfig := zap.NewProductionEncoderConfig() //NewJSONEncoder()输出json格式，NewConsoleEncoder()输出普通文本格式 encoderConfig.EncodeTime = zapcore.ISO8601TimeEncoder //指定时间格式 encoderConfig.EncodeLevel = zapcore.CapitalColorLevelEncoder //按级别显示不同颜色，不需要的话取值zapcore.CapitalLevelEncoder就可以了 //encoderConfig.EncodeCaller = zapcore.FullCallerEncoder //显示完整文件路径 encoder := zapcore.NewConsoleEncoder(encoderConfig) //日志级别 highPriority := zap.LevelEnablerFunc(func(lev zapcore.Level) bool&#123; //error级别 return lev &gt;= zap.ErrorLevel &#125;) lowPriority := zap.LevelEnablerFunc(func(lev zapcore.Level) bool &#123; //info和debug级别,debug级别是最低的 return lev &lt; zap.ErrorLevel &amp;&amp; lev &gt;= zap.DebugLevel &#125;) //info文件writeSyncer infoFileWriteSyncer := zapcore.AddSync(&amp;lumberjack.Logger&#123; Filename: "./log/info.log", //日志文件存放目录，如果文件夹不存在会自动创建 MaxSize: 1, //文件大小限制,单位MB MaxBackups: 5, //最大保留日志文件数量 MaxAge: 30, //日志文件保留天数 Compress: false, //是否压缩处理 &#125;) infoFileCore := zapcore.NewCore(encoder, zapcore.NewMultiWriteSyncer(infoFileWriteSyncer,zapcore.AddSync(os.Stdout)), lowPriority) //第三个及之后的参数为写入文件的日志级别,ErrorLevel模式只记录error级别的日志 //error文件writeSyncer errorFileWriteSyncer := zapcore.AddSync(&amp;lumberjack.Logger&#123; Filename: "./log/error.log", //日志文件存放目录 MaxSize: 1, //文件大小限制,单位MB MaxBackups: 5, //最大保留日志文件数量 MaxAge: 30, //日志文件保留天数 Compress: false, //是否压缩处理 &#125;) errorFileCore := zapcore.NewCore(encoder, zapcore.NewMultiWriteSyncer(errorFileWriteSyncer,zapcore.AddSync(os.Stdout)), highPriority) //第三个及之后的参数为写入文件的日志级别,ErrorLevel模式只记录error级别的日志 coreArr = append(coreArr, infoFileCore) coreArr = append(coreArr, errorFileCore) log = zap.New(zapcore.NewTee(coreArr...), zap.AddCaller()) //zap.AddCaller()为显示文件名和行号，可省略 log.Info("hello info") log.Debug("hello debug") log.Error("hello error")&#125; 这样修改之后，info和debug级别的日志就存放到info.log，error级别的日志单独放到error.log文件中了 控制台按级别显示颜色指定编码器的EncodeLevel即可， 12345//获取编码器encoderConfig := zap.NewProductionEncoderConfig() //NewJSONEncoder()输出json格式，NewConsoleEncoder()输出普通文本格式encoderConfig.EncodeTime = zapcore.ISO8601TimeEncoder //指定时间格式encoderConfig.EncodeLevel = zapcore.CapitalColorLevelEncoder //按级别显示不同颜色，不需要的话取值zapcore.CapitalLevelEncoder就可以了encoder := zapcore.NewConsoleEncoder(encoderConfig) 显示文件路径和行号前面说到要显示文件路径和行号，只需要zap.New方法添加参数zap.AddCaller()即可，如果要显示完整的路径，需要在编码器配置中指定 123456//获取编码器encoderConfig := zap.NewProductionEncoderConfig() //NewJSONEncoder()输出json格式，NewConsoleEncoder()输出普通文本格式encoderConfig.EncodeTime = zapcore.ISO8601TimeEncoder //指定时间格式encoderConfig.EncodeLevel = zapcore.CapitalColorLevelEncoder //按级别显示不同颜色，不需要的话取值zapcore.CapitalLevelEncoder就可以了encoderConfig.EncodeCaller = zapcore.FullCallerEncoder //显示完整文件路径encoder := zapcore.NewConsoleEncoder(encoderConfig) 完整代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657package mainimport ( "github.com/natefinch/lumberjack" "go.uber.org/zap" "go.uber.org/zap/zapcore" "os")var log *zap.Loggerfunc main() &#123; var coreArr []zapcore.Core //获取编码器 encoderConfig := zap.NewProductionEncoderConfig() //NewJSONEncoder()输出json格式，NewConsoleEncoder()输出普通文本格式 encoderConfig.EncodeTime = zapcore.ISO8601TimeEncoder //指定时间格式 encoderConfig.EncodeLevel = zapcore.CapitalColorLevelEncoder //按级别显示不同颜色，不需要的话取值zapcore.CapitalLevelEncoder就可以了 //encoderConfig.EncodeCaller = zapcore.FullCallerEncoder //显示完整文件路径 encoder := zapcore.NewConsoleEncoder(encoderConfig) //日志级别 highPriority := zap.LevelEnablerFunc(func(lev zapcore.Level) bool&#123; //error级别 return lev &gt;= zap.ErrorLevel &#125;) lowPriority := zap.LevelEnablerFunc(func(lev zapcore.Level) bool &#123; //info和debug级别,debug级别是最低的 return lev &lt; zap.ErrorLevel &amp;&amp; lev &gt;= zap.DebugLevel &#125;) //info文件writeSyncer infoFileWriteSyncer := zapcore.AddSync(&amp;lumberjack.Logger&#123; Filename: "./log/info.log", //日志文件存放目录，如果文件夹不存在会自动创建 MaxSize: 2, //文件大小限制,单位MB MaxBackups: 100, //最大保留日志文件数量 MaxAge: 30, //日志文件保留天数 Compress: false, //是否压缩处理 &#125;) infoFileCore := zapcore.NewCore(encoder, zapcore.NewMultiWriteSyncer(infoFileWriteSyncer,zapcore.AddSync(os.Stdout)), lowPriority) //第三个及之后的参数为写入文件的日志级别,ErrorLevel模式只记录error级别的日志 //error文件writeSyncer errorFileWriteSyncer := zapcore.AddSync(&amp;lumberjack.Logger&#123; Filename: "./log/error.log", //日志文件存放目录 MaxSize: 1, //文件大小限制,单位MB MaxBackups: 5, //最大保留日志文件数量 MaxAge: 30, //日志文件保留天数 Compress: false, //是否压缩处理 &#125;) errorFileCore := zapcore.NewCore(encoder, zapcore.NewMultiWriteSyncer(errorFileWriteSyncer,zapcore.AddSync(os.Stdout)), highPriority) //第三个及之后的参数为写入文件的日志级别,ErrorLevel模式只记录error级别的日志 coreArr = append(coreArr, infoFileCore) coreArr = append(coreArr, errorFileCore) log = zap.New(zapcore.NewTee(coreArr...), zap.AddCaller()) //zap.AddCaller()为显示文件名和行号，可省略 log.Info("hello info") log.Debug("hello debug") log.Error("hello error")&#125; 参考文章在Go语言项目中使用Zap日志库 - 知乎 (zhihu.com) golang高性能日志库zap配置示例 - ExplorerMan - 博客园 (cnblogs.com)]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>zap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[以太坊代币开发]]></title>
    <url>%2F2020%2F12%2F14%2F8.%E4%BB%A5%E5%A4%AA%E5%9D%8A%E4%BB%A3%E5%B8%81%E5%BC%80%E5%8F%91%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚博客地址：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 环境要求 以太坊公链或私有链 一个有以太币的钱包：用于支付手续费和接收代币 EthereumWallet客户端 部署合约在Ethereum Wallet客户端中点击 CONTRACTS =&gt; DEPLOY NEW CONTRACT ,然后FROM填你的以太坊地址，一般会自动填上。在下方SOLIDITY CONTRACT SOURCE CODE的编辑框中填入官方的创建代币的合约代码 官方代码的地址：https://ethereum.org/token ，这个代码复制到Ethereum Wallet会报”Defining constructors as functions with the same name as the contract is deprecated.”的错误，把第5行代码中的合约名字 TokenERC20 改为 其他名称即可，例如 Token。 另外如果代币的小数位数不是18位，需要修改代码第9行中的 public decimals 为你需要的小数位数 完整代码如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158pragma solidity ^0.4.16;interface tokenRecipient &#123; function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; &#125;contract Token &#123; // Public variables of the token string public name; string public symbol; uint8 public decimals = 18; // 18 decimals is the strongly suggested default, avoid changing it uint256 public totalSupply; // This creates an array with all balances mapping (address =&gt; uint256) public balanceOf; mapping (address =&gt; mapping (address =&gt; uint256)) public allowance; // This generates a public event on the blockchain that will notify clients event Transfer(address indexed from, address indexed to, uint256 value); // This generates a public event on the blockchain that will notify clients event Approval(address indexed _owner, address indexed _spender, uint256 _value); // This notifies clients about the amount burnt event Burn(address indexed from, uint256 value); /** * Constructor function * * Initializes contract with initial supply tokens to the creator of the contract */ function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public &#123; totalSupply = initialSupply * 10 ** uint256(decimals); // Update total supply with the decimal amount balanceOf[msg.sender] = totalSupply; // Give the creator all initial tokens name = tokenName; // Set the name for display purposes symbol = tokenSymbol; // Set the symbol for display purposes &#125; /** * Internal transfer, only can be called by this contract */ function _transfer(address _from, address _to, uint _value) internal &#123; // Prevent transfer to 0x0 address. Use burn() instead require(_to != 0x0); // Check if the sender has enough require(balanceOf[_from] &gt;= _value); // Check for overflows require(balanceOf[_to] + _value &gt;= balanceOf[_to]); // Save this for an assertion in the future uint previousBalances = balanceOf[_from] + balanceOf[_to]; // Subtract from the sender balanceOf[_from] -= _value; // Add the same to the recipient balanceOf[_to] += _value; emit Transfer(_from, _to, _value); // Asserts are used to use static analysis to find bugs in your code. They should never fail assert(balanceOf[_from] + balanceOf[_to] == previousBalances); &#125; /** * Transfer tokens * * Send `_value` tokens to `_to` from your account * * @param _to The address of the recipient * @param _value the amount to send */ function transfer(address _to, uint256 _value) public returns (bool success) &#123; _transfer(msg.sender, _to, _value); return true; &#125; /** * Transfer tokens from other address * * Send `_value` tokens to `_to` on behalf of `_from` * * @param _from The address of the sender * @param _to The address of the recipient * @param _value the amount to send */ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) &#123; require(_value &lt;= allowance[_from][msg.sender]); // Check allowance allowance[_from][msg.sender] -= _value; _transfer(_from, _to, _value); return true; &#125; /** * Set allowance for other address * * Allows `_spender` to spend no more than `_value` tokens on your behalf * * @param _spender The address authorized to spend * @param _value the max amount they can spend */ function approve(address _spender, uint256 _value) public returns (bool success) &#123; allowance[msg.sender][_spender] = _value; emit Approval(msg.sender, _spender, _value); return true; &#125; /** * Set allowance for other address and notify * * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it * * @param _spender The address authorized to spend * @param _value the max amount they can spend * @param _extraData some extra information to send to the approved contract */ function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) &#123; tokenRecipient spender = tokenRecipient(_spender); if (approve(_spender, _value)) &#123; spender.receiveApproval(msg.sender, _value, this, _extraData); return true; &#125; &#125; /** * Destroy tokens * * Remove `_value` tokens from the system irreversibly * * @param _value the amount of money to burn */ function burn(uint256 _value) public returns (bool success) &#123; require(balanceOf[msg.sender] &gt;= _value); // Check if the sender has enough balanceOf[msg.sender] -= _value; // Subtract from the sender totalSupply -= _value; // Updates totalSupply emit Burn(msg.sender, _value); return true; &#125; /** * Destroy tokens from other account * * Remove `_value` tokens from the system irreversibly on behalf of `_from`. * * @param _from the address of the sender * @param _value the amount of money to burn */ function burnFrom(address _from, uint256 _value) public returns (bool success) &#123; require(balanceOf[_from] &gt;= _value); // Check if the targeted balance is enough require(_value &lt;= allowance[_from][msg.sender]); // Check allowance balanceOf[_from] -= _value; // Subtract from the targeted balance allowance[_from][msg.sender] -= _value; // Subtract from the sender&apos;s allowance totalSupply -= _value; // Update totalSupply emit Burn(_from, _value); return true; &#125;&#125; 将代码复制过去之后，发现后边会出现下拉框，选择“Token”(就是你合约的名字)，然后点击最下面的“DEPLOY”，在弹出框中输入账号密码等待交易完成。 创建代币 点击“CONTRACT”会发现在灰色背景的栏目“Custom Contracts”中多了刚刚创建的合约，点击它进入这个合约。 在界面的右下角下拉框选择“Token ERC 20”,下面的输入框分别填写代币的发行量、具体名称 (比如Ethereum)，代币符号(就是代币的单位，比如ETH)，然后点击“EXECUTE”按钮，输入账号密码等待交易完成。 交易完成后点击“CONTRACT”拉到最下面点击刚刚创建的代币，填写代币的名称、符号和位数，点击OK保存好代币的信息。 首页点击你创建代币的钱包地址，会发现以太币余额下面多出一行代币的余额。鼠标移上去点击Send即可发送代币交易。]]></content>
      <categories>
        <category>以太坊</category>
      </categories>
      <tags>
        <tag>以太坊</tag>
        <tag>代币</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[geth常用操作]]></title>
    <url>%2F2020%2F12%2F14%2F9.geth%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚博客地址：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 修改钱包密码其中–datadir参数是你的geth目录，这个目录里面包含geth和keystore目录 1$ geth account update &quot;aad71aaaef7ce2ca356b9b80d0c385eecd8ed1ae&quot; --datadir &quot;./data0&quot; 先输入旧的密码解锁 12Unlocking account 0xaad71aaaef7ce2ca356b9b80d0c385eecd8ed1ae | Attempt 1/3Passphrase:旧的密码 再输入两次新的密码，按回车完成 1234Unlocked account address=0xAAd71aAAEF7ce2CA356B9B80d0c385eeCD8eD1AePlease give a new password. Do not forget this password.Passphrase:新的密码Repeat passphrase:再次输入新的密码 进入geth console解锁钱包检验新的密码 1234567$ geth --port 3000 --networkid 15 --datadir=&quot;./data0&quot; --maxpeers=3 --rpc --rpcport 8545 --rpccorsdomain &quot;*&quot; console&gt; personal.unlockAccount(&quot;0xaad71aaaef7ce2ca356b9b80d0c385eecd8ed1ae&quot;)Unlock account 0xaad71aaaef7ce2ca356b9b80d0c385eecd8ed1aePassphrase:true 修改默认账号coinbasegeth console中执行 1&gt; miner.setEtherbase(&quot;0xa91Ae941e92eb6Fa78FE0d8215F01cbE6b7C014c&quot;) 覆盖交易当发送的交易还没有交易完成时，以太坊是可以用新的交易将那笔未完成的交易覆盖的，当交易的数量为0时表示将交易覆盖取消。当然，第二笔交易的gasPrice需要比被覆盖掉的高。 nonce的作用：每个钱包地址发送都会产生一个nonce值，默认从0开始，这个地址每发送一笔交易nonce+1,类似数据库的自增id,覆盖交易就是发送相同nonce的一笔交易，将该笔交易覆盖。当nonce比之前交易成功的nonce小，交易会被直接拒绝；当nonce比之前交易成功的nonce大2或以上，就是两笔nonce不连续，那么交易会一直等待。比如说上一笔交易成功的交易nonce为4，这次交易的nonce为6，那么在nonce为5的交易完成之后，nonce为6以及大于6的交易都会暂停，不会交易成功。 1.查询该钱包当前的nonce 12&gt; eth.getTransactionCount(&apos;0xa94183a1d6982a9703791Ec1DfF0093746030A78&apos;)1827 说明从nonce为0到1826的交易都成功了 2.发送指定nonce的交易 假设nonce为1827的交易已经发送，但是未交易完成，我们可以将这笔交易覆盖 1&gt;eth.sendTransaction(&#123;from:eth.coinbase,to:&quot;0x8E9e5Db2Dd8B468CC9edC1f72Dd2948828d5285a&quot;,value:web3.toWei(0.01,&apos;ether&apos;),gasPrice:web3.toWei(0.000000004,&apos;ether&apos;),nonce:1827&#125;) 如果1826和1828之间缺了一笔1827，造成交易无法继续，可以用同样的方法发送交易补全nonce为连续的数，当然发送的币量可以为0 Unable to attach to remote geth问题如果使用geth attach命令打开控制台出现：Unable to attach to remote geth: dial unix \/home\/www\/.ethereum\/geth.ipc: connect: permission denied”]，一般为权限问题， 输入下面的命令修改权限为www即可(LNMP环境)，geth.ipc的路径根据实际路径修改： 12cd /ethdb/ethereum/chown -R www:www geth.ipc]]></content>
      <categories>
        <category>以太坊</category>
      </categories>
      <tags>
        <tag>以太坊</tag>
        <tag>geth</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LNMP下配置免费SSL安全证书(https)]]></title>
    <url>%2F2020%2F12%2F14%2F6.LNMP%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%85%8D%E8%B4%B9SSL%E5%AE%89%E5%85%A8%E8%AF%81%E4%B9%A6(https)%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚博客地址：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 环境要求 LNMP 域名 安装依赖1234$ cd /root/$ wget https://dl.eff.org/certbot-auto --no-check-certificate$ chmod +x ./certbot-auto$ ./certbot-auto -n 生成证书注意将 www.vpser.net 替换成你的域名 单域名生成证书： 1$ ./certbot-auto certonly --email youemail@vpser.net --agree-tos --no-eff-email --webroot -w /home/wwwroot/www.vpser.net -d www.vpser.net 多域名单目录生成单证书：(即一个网站多个域名使用同一个证书) 1$ ./certbot-auto certonly --email youemail@vpser.net --agree-tos --no-eff-email --webroot -w /home/wwwroot/www.vpser.net -d www.vpser.net -d bbs.vpser.net 多域名多目录生成一个证书：(即一次生成多个域名的一个证书) 1$ ./certbot-auto certonly --email youemail@vpser.net --agree-tos --no-eff-email --webroot -w /home/wwwroot/www.vpser.net -d www.vpser.net -d bbs.vpser.net -w /home/wwwroot/lnmp.org -d www.lnmp.org -d lnmp.org 提示以下信息表示生成成功 12345678910IMPORTANT NOTES:- Congratulations! Your certificate and chain have been saved at/etc/letsencrypt/live/www.vpser.net/fullchain.pem. Your cert willexpire on 2016-10-01. To obtain a new or tweaked version of thiscertificate in the future, simply run certbot-auto again. Tonon-interactively renew *all* of your certificates, run&quot;certbot-auto renew&quot;- If you like Certbot, please consider supporting our work by:Donating to ISRG / Let&apos;s Encrypt: https://letsencrypt.org/donateDonating to EFF: https://eff.org/donate-le 生成的证书会存在：/etc/letsencrypt/live/www.vpser.net/ 目录下，检查是否有两个.pom的证书文件 修改配置 下载配置文件并替换掉所有的www.example.net为你的域名 链接：https://pan.baidu.com/s/1HC1ErFjtoDe8akzzWys29A 密码：i2fi 上传至/usr/local/nginx/conf/vhost 并替换原来的文件 执行：/etc/init.d/nginx reload 重新载入配置使其生效 到这里你的域名应该就已经变成https了 证书续期因为证书只有90天，所以建议使用crontab进行自动续期，间隔5天就可以了，不能太频繁 12$ crontab -e0 3 */5 * * /root/certbot-auto renew --disable-hook-validation --renew-hook &quot;/etc/init.d/nginx reload&quot; 本文参考：https://www.vpser.net/build/letsencrypt-free-ssl.html]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>LNMP</tag>
        <tag>SSL证书</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu以太坊私有链搭建]]></title>
    <url>%2F2020%2F12%2F14%2F7.Ubuntu%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E6%9C%89%E9%93%BE%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚博客地址：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 安装geth123jian@ubuntu:~$ sudo add-apt-repository -y ppa:ethereum/ethereumjian@ubuntu:~$ sudo apt-get updatejian@ubuntu:~$ sudo apt-get install ethereum 查看geth版本 123456789101112jian@ubuntu:~$ geth versionWARN [12-20|00:00:20.173] Sanitizing cache to Go&apos;s GC limits provided=1024 updated=661GethVersion: 1.8.20-stableGit Commit: 24d727b6d6e2c0cde222fa12155c4a6db5caaf2eArchitecture: amd64Protocol Versions: [63 62]Network Id: 1Go Version: go1.10.4Operating System: linuxGOPATH=GOROOT=/usr/lib/go-1.10 创世区块新建ethereum文件夹,然后在ethereum文件夹中创建data文件夹（存储区块数据）和genesis.json文件，打开genesis.json文件将创世区块代码复制到文件中并保存 1234jian@ubuntu:~$ mkdir ethereumjian@ubuntu:~$ cd ethereum/jian@ubuntu:~/ethereum$ mkdir datajian@ubuntu:~/ethereum$ vi genesis.json 创世区块数据 123456789101112&#123; &quot;nonce&quot;: &quot;0x0000000000000042&quot;, &quot;mixhash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;, &quot;difficulty&quot;: &quot;0x400&quot;, &quot;alloc&quot;: &#123;&#125;, &quot;coinbase&quot;: &quot;0x3333333333333333333333333333333333333333&quot;, &quot;timestamp&quot;: &quot;0x0&quot;, &quot;parentHash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;, &quot;extraData&quot;: &quot;0x&quot;, &quot;gasLimit&quot;: &quot;0x8000000&quot;, &quot;config&quot;: &#123;&#125;&#125; 参数说明 参数名 说明 nonce nonce就是一个64位随机数，用于挖矿，注意他和mixhash的设置需要满足以太坊的Yellow paper, 4.3.4. Block Header Validity, (44)章节所描述的条件。 difficulty 设置当前区块的难度，如果难度过大，cpu挖矿就很难，这里设置较小难度 alloc 用来预置账号以及账号的以太币数量，因为私有链挖矿比较容易，所以我们不需要预置有币的账号，需要的时候自己创建即可以。 coinbase 矿工的账号,任意填写一个账号即可。 imestamp 设置创世块的时间戳 parentHash 上一个区块的hash值，因为是创世块，所以这个值是0 extraData 附加信息，随便填，可以填你的个性信息 gasLimit 该值设置对GAS的消耗总量限制，用来限制区块能包含的交易信息总和，因为我们是私有链，所以填最大。 mixhash 与nonce配合用于挖矿，由上一个区块的一部分生成的hash。注意他和nonce的设置需要满足以太坊的Yellow paper, 4.3.4. Block Header Validity, (44)章节所描述的条件。. 创建创世区块 123456789101112jian@ubuntu:~/ethereum$ geth --datadir data init genesis.jsonWARN [12-20|00:01:37.255] Sanitizing cache to Go&apos;s GC limits provided=1024 updated=661INFO [12-20|00:01:37.257] Maximum peer count ETH=25 LES=0 total=25INFO [12-20|00:01:37.276] Allocated cache and file handles database=/home/jian/ethereum/data/geth/chaindata cache=16 handles=16INFO [12-20|00:01:37.285] Writing custom genesis block INFO [12-20|00:01:37.286] Persisted trie from memory database nodes=0 size=0.00B time=2.214µs gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00BINFO [12-20|00:01:37.287] Successfully wrote genesis state database=chaindata hash=6231b0…a0300bINFO [12-20|00:01:37.287] Allocated cache and file handles database=/home/jian/ethereum/data/geth/lightchaindata cache=16 handles=16INFO [12-20|00:01:37.292] Writing custom genesis block INFO [12-20|00:01:37.293] Persisted trie from memory database nodes=0 size=0.00B time=2.226µs gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00BINFO [12-20|00:01:37.294] Successfully wrote genesis state database=lightchaindata hash=6231b0…a0300b 启动私有链1jian@ubuntu:~/ethereum$ geth --port 3000 --networkid 15 --datadir=&quot;data&quot; --maxpeers=3 --rpc --rpcport 8545 --rpcaddr 127.0.0.1 --rpccorsdomain &quot;*&quot; --rpcapi=&quot;db,eth,web3,personal,admin,txpool,net&quot; console 启动成功会进入js控制台 123456Welcome to the Geth JavaScript console!instance: Geth/v1.8.20-stable-24d727b6/linux-amd64/go1.10.4 modules: admin:1.0 debug:1.0 eth:1.0 ethash:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0&gt; 退出私有链只需要输入exit即可，如果要让另外一台电脑访问私有链，需要将--rpcaddr设置为本机ip；如果是云服务器，要提供rpc服务给其他电脑使用的话，rpcaddr要填写云服务器的内网地址。 创建钱包在js控制台输入命令 12&gt; personal.newAccount(&apos;123456&apos;)&quot;0xee340225c3b9348847c828881a34ae3237e91456&quot; 得到解锁密码为123456，钱包地址为”0xee340225c3b9348847c828881a34ae3237e91456”的以太坊钱包，第一个创建的钱包地址会自动作为默认钱包，挖矿得到的ETH会存入默认钱包中，查看默认钱包： 12&gt; eth.coinbase&quot;0xee340225c3b9348847c828881a34ae3237e91456&quot; 钱包列表列出所有钱包 12&gt; eth.accounts[&quot;0xee340225c3b9348847c828881a34ae3237e91456&quot;] 查询余额12&gt; eth.getBalance(&apos;0xee340225c3b9348847c828881a34ae3237e91456&apos;)0 或者根据钱包列表的序号 12&gt; eth.getBalance(eth.accounts[0])0 如果是默认钱包还可以这样 12&gt; eth.getBalance(eth.coinbase)0 开启挖矿挖矿会生成区块和执行交易，挖矿得到的ETH会存入默认钱包中，如果想修改默认钱包可以用以下命令 1&gt; miner.setEtherbase(&quot;0xa91Ae941e92eb6Fa78FE0d8215F01cbE6b7C014c&quot;) 开启挖矿，1表示1个线程 123456789&gt; miner.start(1)INFO [12-20|00:16:58.760] Generating DAG in progress epoch=0 percentage=0 elapsed=4.311sINFO [12-20|00:17:03.084] Generating DAG in progress epoch=0 percentage=1 elapsed=8.635sINFO [12-20|00:17:07.498] Generating DAG in progress epoch=0 percentage=2 elapsed=13.049sINFO [12-20|00:17:11.975] Generating DAG in progress epoch=0 percentage=3 elapsed=17.526sINFO [12-20|00:17:16.302] Generating DAG in progress epoch=0 percentage=4 elapsed=21.853sINFO [12-20|00:17:20.855] Generating DAG in progress epoch=0 percentage=5 ...... 第一次启动挖矿会先生成挖矿所需的DAG文件，这个过程有点慢，大概需要10分钟，等到 percentage = 100后，就会开始挖矿，此时屏幕会被挖矿信息刷屏。看到类似下面的信息表示挖矿成功 123456789INFO [12-20|00:42:41.957] 🔗 block reached canonical chain number=2 hash=9a053e…3b1a92INFO [12-20|00:42:41.957] 🔨 mined potential block number=9 hash=3067bd…6eb8e3INFO [12-20|00:42:41.978] Commit new mining work number=10 sealhash=3958ea…fc97b1 uncles=0 txs=0 gas=0 fees=0 elapsed=103.483µsINFO [12-20|00:42:47.737] Generating DAG in progress epoch=1 percentage=31 elapsed=17m30.277sINFO [12-20|00:42:53.206] Successfully sealed new block number=10 sealhash=3958ea…fc97b1 hash=ae06e1…929511 elapsed=11.228sINFO [12-20|00:42:53.207] 🔗 block reached canonical chain number=3 hash=c5335d…b00c0cINFO [12-20|00:42:53.207] 🔨 mined potential block number=10 hash=ae06e1…929511INFO [12-20|00:42:53.223] Commit new mining work number=11 sealhash=512ca2…b5efb9 uncles=0 txs=0 gas=0 fees=0 elapsed=92.66µs...... 此时新打开终端，用 geth attach 命令连接到js控制台再查询默认钱包余额,发现已经有币了 1234jian@ubuntu:~$ cd ~/ethereum/datajian@ubuntu:~/ethereum/data$ geth attach ipc:geth.ipc&gt; eth.getBalance(eth.coinbase)175000000000000000000 余额的单位是GWEI,要转为ETH只要除以10的18次方即可，这里的余额为175ETH 停止挖矿1&gt; miner.stop() 区块高度区块高度也叫区块数量、最新区块 12&gt; eth.blockNumber186 解锁钱包以太坊钱包大概每5分钟就会被锁住，交易和创建合约都需要先解锁,输入下面的命令和钱包密码即可解锁 1234&gt; personal.unlockAccount(&quot;0xee340225c3b9348847c828881a34ae3237e91456&quot;) Unlock account 0xee340225c3b9348847c828881a34ae3237e91456Passphrase: true 新版本的geth可能会报错 1Error: account unlock with HTTP access is forbidden 在启动私有链的时候添加参数--allow-insecure-unlock即可解决 发送交易发送交易前请先解锁转出地钱包并启动挖矿，然后使用eth.sendTransaction命令发送交易，下面的命令将从eth.accounts[0]转5个ETH到eth.accounts[1]，也可以替换成具体的钱包地址： 123456&gt; amount = web3.toWei(5,&apos;ether&apos;) &quot;5000000000000000000&quot; &gt; eth.sendTransaction(&#123;from:eth.accounts[0],to:eth.accounts[1],value:amount&#125;) I0322 19:39:36.300675 internal/ethapi/api.go:1047] Tx(0x0c59f431068937cbe9e230483bc79f59bd7146edc8ff5ec37fea6710adcab825) to: 0x814d39aa21f3eed069f2b21da7b5f857f7343afa &quot;0x0c59f431068937cbe9e230483bc79f59bd7146edc8ff5ec37fea6710adcab825&quot; 发送成功将返回交易哈希，等待挖矿执行交易，再查看余额可以看到已经到账 12&gt; web3.fromWei(eth.getBalance(eth.accounts[1]),&apos;ether&apos;) 5 查询交易可以根据交易哈希查询该交易的详细信息 1234567891011121314151617&gt; eth.getTransaction(&quot;0x0c59f431068937cbe9e230483bc79f59bd7146edc8ff5ec37fea6710adcab825&quot;) &#123; blockHash: &quot;0xf5d3da50065ce5793c9571a031ad6fe5f1af326a3c4fb7ce16458f4d909c1613&quot;, blockNumber: 33, from: &quot;0xc232e2add308136571bb8f9197ba4ae4e5ba9836&quot;, gas: 90000, gasPrice: 20000000000, hash: &quot;0x0c59f431068937cbe9e230483bc79f59bd7146edc8ff5ec37fea6710adcab825&quot;, input: &quot;0x&quot;, nonce: 0, r: &quot;0x433fe5845391b6da3d8aa0d2b53674e09fb6126f0070a600686809b57e4ef77d&quot;, s: &quot;0x6b0086fb76c46024f849141074a5bc79c49d5f9a658fd0fedbbe354889c34d8d&quot;, to: &quot;0x814d39aa21f3eed069f2b21da7b5f857f7343afa&quot;, transactionIndex: 0, v: &quot;0x1b&quot;, value: 5000000000000000000 &#125; 连接节点如果局域网内有多个私有链节点，可以将这些节点连接起来组成链，这些节点会同步相同的区块和交易，相当于小型的公链。但是要将这些节点连接起来需要满足3个条件： 节点所在的机器，相互之间可以互联互通网络 有相同的创世区块 在启动私有链的geth命令中设置相同的networkid 假设有两个节点：节点一（ubuntu端）和节点二（windows端），它们的geth启动命令中的networkid都是1108，首先要知道节点二的enode信息，启动节点二的私有链，在js console中执行下面的命令查看enode信息： 12&gt; admin.nodeInfo.enode &quot;enode://9e86289ea859ca041f235aed87a091d0cd594b377cbe13e1c5f5a08a8a280e62d4019ac54063ed6a1d0e3c3eaedad0b73c40b99a16a176993f0373ffe92be672@[::]:30304&quot; 复制上面给出的信息添加到admin.Peer的参数中，注意要把enode中的[::]替换成节点二的IP地址。然后在节点一的js console中执行admin.addPeer()，就可以连接到节点二了 1&gt; admin.addPeer(&quot;enode://9e86289ea859ca041f235aed87a091d0cd594b377cbe13e1c5f5a08a8a280e62d4019ac54063ed6a1d0e3c3eaedad0b73c40b99a16a176993f0373ffe92be672@192.168.1.111:30304&quot;) 连接成功后，节点一和节点二就会开始同步的区块，保证区块数据一致。使用admin.peers命令可以查看当前网络连接在一起的所有节点 1234567891011121314151617181920212223242526272829303132333435363738&gt; admin.peers[&#123; caps: [&quot;eth/62&quot;, &quot;eth/63&quot;], id: &quot;070b16d058df62a934bb1b9f6e216f6763d63c51011c559d0ad155ae428294c69aed1e35a46c36a6613989941b67b530ab92c7667bd63e7e8a7a5717a266751f&quot;, name: &quot;Geth/v1.8.12-stable/linux-amd64/go1.9.2&quot;, network: &#123; inbound: true, localAddress: &quot;172.31.238.175:30303&quot;, remoteAddress: &quot;145.239.0.91:51238&quot;, static: false, trusted: false &#125;, protocols: &#123; eth: &#123; difficulty: 8.379127609415399e+21, head: &quot;0x7ce58e50b8bc9af80c6900729801832ec9a5f86e549930e085f1a208dacf5608&quot;, version: 63 &#125; &#125;&#125;, &#123; caps: [&quot;eth/62&quot;, &quot;eth/63&quot;], id: &quot;19211a5d0fbcabf5184e49639839bda772080cba500a4a0e9ced1f89c3a43fea1c00d4d8de5a463d6002bfa594e46e2c03611a6514117f1bd8c7e889bfb4ec7a&quot;, name: &quot;Geth/v1.8.18-unstable-126dfde6/linux-amd64/go1.9.4&quot;, network: &#123; inbound: true, localAddress: &quot;172.31.238.175:30303&quot;, remoteAddress: &quot;120.78.87.202:53548&quot;, static: false, trusted: false &#125;, protocols: &#123; eth: &#123; difficulty: 5.481064970682881e+21, head: &quot;0xdb982b1ff69083b090549c3809dd6b58f87ca50db97e0b4144aac9269ad198be&quot;, version: 63 &#125; &#125;&#125;] 参考文章[1] https://my.oschina.net/u/2349981/blog/856956 [2] http://blog.csdn.net/u013096666/article/details/72639906 [3] http://qiita.com/oggata/items/eea4d5e37f38785f6079]]></content>
      <categories>
        <category>以太坊</category>
      </categories>
      <tags>
        <tag>以太坊</tag>
        <tag>ethereum</tag>
        <tag>私有链</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP开发规范]]></title>
    <url>%2F2020%2F12%2F14%2F5.PHP%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚博客地址：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 一、摘要&emsp;&emsp;这是一份旨在增强团队的开发协作，提高代码质量和打造开发基石的编码风格规范。当一个团队开始指定并实行编码规范的话，错误就会变得更加显而易见。如果一段特定的代码不符合规范的话，它有可能只是代码风格错误，而也有可能会是 bug，更可能出现安全问题。早期指定规范就使得代码审核得以更好的开展，并且可以更精确的地定位到错误。只要开发者们能够保证源代码源文件都严格遵循规范，那接下来的维护工作就可以变得轻松简单。总之，我们的目标就是遵循同一套编码规范，不管有多少人共同参与同一项目，都可以确保每一行代码都像是同一个人编写的，每一个功能都是安全的。 二、PHP相关命名规范2.1 方法命名&emsp;&emsp;方法，指的是在类中定义的函数，方法的命名使用驼峰法，并且首字母小写或者使用下划线“_”，例如 getUserName( )，_parseType( )，通常下划线开头的方法属于私有方法； 2.2 函数命名&emsp;&emsp;函数是指不在类中定义的函数，例如在公共文件中的函数。函数的命名使用小写字母和下划线的方式，例如 get_client_ip( )； 2.3 变量（属性）命名&emsp;&emsp;变量，也叫属性。属性的命名使用驼峰法，并且首字母小写或者使用下划线“_”，例如 tableName、_instance，通常下划线开头的属性属于私有属性； 2.4 常量命名&emsp;&emsp;常量以大写字母和下划线命名，例如 HAS_ONE和 MANY_TO_MANY； 2.5 配置参数命名&emsp;&emsp;配置参数以大写字母和下划线命名，例如 HTML_CACHE_ON = 1； 三、数据库相关命名规范3.1 数据库命名&emsp;&emsp;数据库的命名一般采用小写字母命名，如 testdb; 3.2 数据表命名&emsp;&emsp;数据表命名格式为 表前缀+下划线（_）+表名 组合方式命名。同一数据库表前缀相同，且使用小写字母命名，表名使用小写字母和下划线命名。例如 wll_setting_record，其中wll为前缀，setting_record为表名。 3.3 字段命名&emsp;&emsp;字段的命名采用小写字母和下划线命名，如 coin_type。 四、禁止使用的命名方式4.1 无意义的命名&emsp;&emsp;例如：$abcd、qqqqqqq()、test1111111等，命名应该使用对应的英文翻译； 4.2 拼音命名&emsp;&emsp;例如添加用户（tjyh）或中英混合的（tjUser），如果使用这种方式，其他开发人员会很难看得懂，加大维护难度。 4.3 单字母命名&emsp;&emsp;ThinkPHP中封装了很多名称为单字母的快捷方法，例如A( )、C( )、M( )。如果再定义可能会发生冲突。 五、注释规范5.1 方法和函数&emsp;&emsp;在方法和函数的上一行必须用双斜线注释注明该方法或函数的功能，在难以理解的代码语句后面适当添加注释说明，例如：123456789101112131415161718192021// 短信宝短信 http://www.smsbao.com/public function smsbao($username, $password, $moble, $content)&#123; $url = &apos;http://api.smsbao.com/sms?u=&apos; . $username . &apos;&amp;p=&apos; . $password . &apos;&amp;m=&apos; . $moble . &apos;&amp;c=&apos; . $content; if (function_exists(&apos;file_get_contents&apos;)) &#123; $file_contents = file_get_contents($url); &#125; else &#123; $ch = curl_init(); $timeout = 5; curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout); $file_contents = curl_exec($ch); curl_close($ch); &#125; if ($file_contents &gt; 0) &#123; return [$file_contents]; // 失败 &#125; else &#123; return [$file_contents, 1]; //成功 &#125;&#125; 5.2 配置参数&emsp;&emsp;在配置文件中的参数设置必须注明变量含义，例如：12345&apos;DB_TYPE&apos; =&gt; &apos;mysql&apos;, // 数据库类型&apos;DB_HOST&apos; =&gt; &apos;localhost&apos;, // 服务器地址&apos;DB_NAME&apos; =&gt; &apos;wlldb&apos;, // 数据库名&apos;DB_USER&apos; =&gt; &apos;root&apos;, // 用户名&apos;DB_PWD&apos; =&gt; &apos;root&apos;, // 密码 六、编码风格规范6.1 禁止出现多行空格&emsp;&emsp;如果不是特殊需要，在代码文件中禁止出现多行空格，例如下面这种是不允许的：12345678910//公共方法public function common()&#123; $name=&apos;tom&apos;; //定义姓名 $this-&gt;assign(&apos;name&apos;,$name); $this-&gt;display();&#125; 6.2 缩进&emsp;&emsp;代码中需要适当的缩进，否则会加大维护难度。 6.3 目录结构&emsp;&emsp;一般框架都是有默认的目录结构，非特殊情况不允许修改目录结构，例如thinkphp默认的是MVC架构的目录结构，避免由于更改目录结构带来的维护困难。Controller文件放在Controller目录 中，Model文件放在Model目录中，View文件放在View目录中，不要随意更改目录的位置和目录名称。 七、安全7.1.1 输入框&emsp;&emsp;所有的输入框请设置最大长度，必填项请做必填的限制。例如帐号CHN00000001,只能输入11位，那么最大输入长度只能为11，并且添加required=”required”属性。 7.1.2 文本编辑器&emsp;&emsp;前台页面尽量不要使用富文本编辑器，因为富文本编辑器可以输入代码，有很大的安全隐患。如果要使用，必须对提交内容进行过滤，例如使用htmlspecialchars()进行过滤。 7.2 后台接收参数&emsp;&emsp;PHP从表单获取url中获取参数必须进行字段类型判断。例如接收数字的参数不能含有其他字符，只能是数字，建议编写公共的检查接收post和get参数的函数，对每一个参数值进行验证，防止注入恶意代码。&emsp;&emsp;接收长篇内容的变量，例如留言内容等变量时，必须进行特殊字符的过滤操作。比如strip_tags()、htmlspecialchars()、htmlentities()等函数可以起作用，防止用户注入恶意代码进行跨站脚本攻击。 7.3 数据库查询&emsp;&emsp;数据库查询语句禁止直接使用sql语句和传递的参数直接执行，例如下面这种的写法是禁止使用的：1234$id = 1;$User = M(&quot;User&quot;); // 实例化User对象$User-&gt;where(&apos;id=&apos;.$id)-&gt;select(); //错误写法1$User-&gt;where(&quot;id=$id&quot;)-&gt;select(); //错误写法2 &emsp;&emsp;如果传递过来的参数含有SQL注入代码，这两种写法都是非常危险的。正确的写法有以下两种：（1）数组条件，例如：123$where[&apos;id&apos;] = 1;$User = M(&quot;User&quot;); // 实例化User对象$User-&gt;where($where)-&gt;select(); 或者12$User = M(&quot;User&quot;); // 实例化User对象$User-&gt;where([&apos;id&apos;=&gt;1])-&gt;select(); （2）预处理机制，例如：12$User = M(&quot;User&quot;); // 实例化User对象$User-&gt;where(&quot;id=%d&quot;,$id)-&gt;select(); 7.4 权限控制&emsp;&emsp;凡是需要登录之后才可以访问的页面加载页面之前必须做好登录检测，登录超时的必须重新登录。需要权限访问的页面和功能必须做好权限控制和检测。 7.5 越权访问&emsp;&emsp;比如邮件列表的页面 http://119.28.56.83/user/xq/id/5 ，只需要修改最后面的邮件id就可以直接访问的，必须加入当前用户判断，只能查看自己的邮件，禁止越权访问。 7.6 数据导出&emsp;&emsp;数据的导出和下载必须做好登录状态验证和权限的控制，没有权限或没有登录的禁止下载导出。 7.7 防暴力破解&emsp;&emsp;暴力破解是指使用数据字典等枚举方式逐个帐号进行密码的尝试破解，为了防止这种破解，在登录、注册、找回密码等页面必须设置好图形验证码或者其他验证，最好是做好错误次数的限制，例如密码输错5次，一个小时内禁止登录等。 7.8 短信邮件安全&emsp;&emsp;用到发送短信和发送邮件的页面，必须设置图形验证码，点击发送之前，验证图形验证码正确后再发送。最好限制每个手机号每天的发送数量。 7.9 密码明文传输&emsp;&emsp;一般在前端页面表单提交的时候，用户输入密码是明文的。在服务器没有配置SLL证书(https)的情况下，必须先进行加密操作再提交，参数传递到后台接收后再进行解密操作。服务器配置SLL证书(https)可以自动进行加密传输，安全性更高。 7.10 使用外部文件&emsp;&emsp;在前端页面中，禁止引入其他网站的静态文件（javascript、css、网络图片等），如果需要用到，必须下载到本地，使用相对地址引入文件。使用本地静态文件的优点：加载更快，安全，确保不失效。 7.11 密码安全&emsp;&emsp;禁止将明文密码存储在数据库中，所有密码必须加密处理，防止用户数据被导出造成密码泄露。禁止在日志、调试信息文件、cookies中记录密码口令、银行账号、通信内容等敏感数据。为了保障帐号的安全，所有密码的长度强制限制在6位以上。 八、并发和大流量处理8.1 重复提交&emsp;&emsp;为了防止用户在提交表单时重复提交，表单必须设置提交验证。例如商城提交订单时，必须防止用户重复提交。Thinkphp框架中提供表单令牌的功能可以防止重复提交，原生php也可以在打开页面前生成token，并保存在session，然后将token传递到页面表单字段，在表单提交时将token一起提交，在后台接收时验证token，验证后销毁session的保存的token。 8.2 session&emsp;&emsp;一次性验证的session使用后必须销毁，例如短信验证，表单验证等，防止一次性session被重复利用，例如在用户在注册时如果不销毁短信验证码session，用户可以用同一个短信验证码注册多个账号。 8.3 并发&emsp;&emsp;并发处理会经常碰到，例如商城秒杀功能，如果不做好并发处理，那么同一件商品江湖被多个用户购买。并发的处理方案可以考虑以下方案：（1）锁表操作，缺点是并发数比较大的时候回造成系统卡顿。（2）队列（3）负载均衡（4）数据库读写分离 (5) 使用Nginx作为http服务器 8.4 缓存&emsp;&emsp;对于经常需要访问的数据库数据，可以使用缓存来提高访问速度，读取缓存文件数据币数据库查询要快得多，主要缓存技术有：（1）Thinkphp自带的S()方法（2）文件读写，这个方法主意数据的加密确保安全性（3）Memcached]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>开发规范</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ElasticSearch学习笔记]]></title>
    <url>%2F2020%2F12%2F14%2F40.ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚个人博客：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 简介 Elasticsearch是一个基于Lucene的搜索服务器，它提供了一个分布式多用户能力的全文搜索引擎。全文搜索属于最常见的需求，开源的 Elasticsearch 是目前全文搜索引擎的首选。它可以快速地储存、搜索和分析海量数据。维基百科、Stack Overflow、Github 都采用它。由于Elasticsearch基于RESTful web接口，所以所有支持http请求访问的编程语言都可以直接对接Elasticsearch。 安装 根据自己的系统类型按官方文档安装即可 https://www.elastic.co/guide/en/elasticsearch/reference/current/install-elasticsearch.html 启动与停止 Elastic 需要 Java 8 环境。如果你的机器还没安装 Java请先安装。 以zip包方式安装为例，进入elasticsearch-7.10.0/目录，执行启动命令 12.\bin\elasticsearch.bat # Windows系统./bin/elasticsearch # Linux系统 启动成功后在另一个终端中访问9200端口会返回信息 12345678910111213141516171819$ curl localhost:9200&#123; "name" : "DESKTOP-R3EDI39", "cluster_name" : "elasticsearch", "cluster_uuid" : "Ek4sDY1ZTzig_sNpzJnFaA", "version" : &#123; "number" : "7.10.0", "build_flavor" : "default", "build_type" : "zip", "build_hash" : "51e9d6f22758d0374a0f3f5c6e8f3a7997850f96", "build_date" : "2020-11-09T21:30:33.964949Z", "build_snapshot" : false, "lucene_version" : "8.7.0", "minimum_wire_compatibility_version" : "6.8.0", "minimum_index_compatibility_version" : "6.0.0-beta1" &#125;, "tagline" : "You Know, for Search"&#125; 按Ctrl + C，Elastic 就会停止运行。 注意:默认情况下，Elastic 只允许本机访问，如果需要远程访问，可以修改 Elastic 安装目录的config/elasticsearch.yml文件，去掉network.host的注释，将它的值改成0.0.0.0，然后重新启动 Elastic。 基本概念 节点和集群Elastic 本质上是一个分布式数据库，允许多台服务器协同工作，每台服务器可以运行多个 Elastic 实例。单个 Elastic 实例称为一个节点（node）。一组节点构成一个集群（cluster）。 索引Elastic 会索引所有字段，经过处理后写入一个反向索引（Inverted Index）。查找数据的时候，直接查找该索引。 所以，Elastic 数据管理的顶层单位就叫做 Index（索引）。它是单个数据库的同义词。每个 Index （即数据库）的名字必须是小写。 文档Index 里面单条的记录称为 Document（文档）。许多条 Document 构成了一个 Index。 Document 使用 JSON 格式表示，下面是一个例子。 12345&#123; "user": "张三", "title": "工程师", "desc": "数据库管理"&#125; 同一个 Index 里面的 Document，不要求有相同的结构（scheme），但是最好保持相同，这样有利于提高搜索效率。 分组Document 可以分组，比如weather这个 Index 里面，可以按城市分组（北京和上海），也可以按气候分组（晴天和雨天）。这种分组就叫做 Type，它是虚拟的逻辑分组，用来过滤 Document。 不同的 Type 应该有相似的结构（schema），举例来说，id字段不能在这个组是字符串，在另一个组是数值。这是与关系型数据库的表的一个区别。性质完全不同的数据（比如products和logs）应该存成两个 Index，而不是一个 Index 里面的两个 Type（虽然可以做到）。 下面的命令可以列出每个 Index 所包含的 Type。 1$ curl 'localhost:9200/_mapping?pretty=true' 索引操作 新增索引向服务器发送PUT请求即可新增索引，例：新增索引dog 1curl -X PUT "localhost:9200/dog" 服务器返回一个 JSON 对象，里面的acknowledged字段表示操作成功 1&#123;"acknowledged":true,"shards_acknowledged":true,"index":"dog"&#125; 删除索引向服务器发送DELETE请求即可新增索引，例：删除索引dog 1curl -X DELETE "localhost:9200/dog" 返回结果 1&#123;"acknowledged":true&#125; 数据操作 新增记录向服务器发送PUT请求的json数据即可新增记录，需要向指定的 /Index/Type 发送 PUT 请求 1curl -H "Content-Type: application/json" -X PUT "localhost:9200/person/student/1" -d "&#123;"""user""": """tom""","""sex""": """m""","""age""":12&#125;" 这里本人是在windos系统下运行，所以对json中的&quot;做了处理，其中/person/student/1中的person是index，服务器中没有这个索引也不会报错，新增记录的时候会自动生成；student是type；1是改天记录的id，id不一定是数字，也可以是字符串，服务器会返回下面的结果： 1234567891011121314&#123; "_index":"person", "_type":"student", "_id":"1", "_version":1, "result":"created", "_shards":&#123; "total":2, "successful":1, "failed":0 &#125;, "_seq_no":0, "_primary_term":1&#125; 会给出 Index、Type、Id、Version 等信息。 新增记录时也可以不指定id，但是要将PUT请求改为POST请求，服务器返回的 JSON 对象里面，_id字段就是一个类似AV3qGfrC6jMbsbXb6k1p这样的随机字符串。 查询记录带上索引和id，用GET请求服务器即可，后面的?pretty=true可以使返回的json格式化以增加可读性 1curl "localhost:9200/person/student/1?pretty=true" 返回结果： 1234567891011121314&#123; "_index" : "person", "_type" : "student", "_id" : "1", "_version" : 1, "_seq_no" : 0, "_primary_term" : 1, "found" : true, "_source" : &#123; "user" : "tom", "sex" : "m", "age" : 12 &#125;&#125; 如果索引不存在会报错，如果id不存在返回的json数据中found为false 123456&#123; "_index" : "person", "_type" : "student", "_id" : "2", "found" : false&#125; 删除记录删除记录就是发出 DELETE 请求 1curl -X DELETE "localhost:9200/person/student/1" 返回结果： 1234567891011121314&#123; "_index":"person", "_type":"student", "_id":"1", "_version":2, "result":"deleted", "_shards":&#123; "total":2, "successful":1, "failed":0 &#125;, "_seq_no":1, "_primary_term":1&#125; 更新记录按照新增记录的方法，用同一个index/type/id带上数据以PUT请求即可覆盖原来的记录，但是返回的数据中记录的 Id 没变，但是版本（version）从1变成2，操作类型（result）从created变成updated，created字段变成false 1234567891011121314&#123; "_index":"person", "_type":"student", "_id":"1", "_version":2, "result":"updated", "_shards":&#123; "total":2, "successful":1, "failed":0 &#125;, "_seq_no":3, "_primary_term":1&#125; 查询所有记录 使用 GET 方法，直接请求/Index/Type/_search，就会返回所有记录。 1curl "localhost:9200/person/student/_search?pretty=true" 返回结果： 1234567891011121314151617181920212223242526272829303132333435363738394041&#123; "took" : 240, "timed_out" : false, "_shards" : &#123; "total" : 1, "successful" : 1, "skipped" : 0, "failed" : 0 &#125;, "hits" : &#123; "total" : &#123; "value" : 2, "relation" : "eq" &#125;, "max_score" : 1.0, "hits" : [ &#123; "_index" : "person", "_type" : "student", "_id" : "1", "_score" : 1.0, "_source" : &#123; "user" : "john", "sex" : "f", "age" : 15 &#125; &#125;, &#123; "_index" : "person", "_type" : "student", "_id" : "2", "_score" : 1.0, "_source" : &#123; "user" : "tom", "sex" : "m", "age" : 12 &#125; &#125; ] &#125;&#125; 全文搜索 带指定格式的json参数用GET请求Index/Type/_search即可 1curl -H "Content-Type: application/json" "localhost:9200/person/student/_search" -d "&#123;"""query""" : &#123; """match""" : &#123; """user""" : """tom""" &#125;&#125;,"""size""": 1,"""from""":0&#125;" 其中user为搜索字段名，tom为搜索关键字，size为记录数量，默认10条，from为位移，默认是从位置0开始，可用于分页处理 逻辑搜索 OR如果有多个搜索关键字，并且关键字用空格分开，系统默认为OR条件查询 AND如果多个搜索关键字是and关系，需要在请求参数中指定must,例如 1234567891011curl 'localhost:9200/person/student/_search' -d '&#123; "query": &#123; "bool": &#123; "must": [ &#123; "match": &#123; "user": "tom" &#125; &#125;, &#123; "match": &#123; "user": "john" &#125; &#125; ] &#125; &#125;&#125;' 大于小于12345678910&#123; "query":&#123; "range":&#123; "age":&#123; "gte":18, "lte":60 &#125; &#125; &#125;&#125; 参考文档 http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html https://www.elastic.co/guide/en/elasticsearch/reference/6.0/getting-started.html]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RabbitMQ学习笔记]]></title>
    <url>%2F2020%2F12%2F14%2F41.RabbitMQ%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚个人博客：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 安装 windows下载安装ErLang到https://www.erlang.org/downloads下载安装程序，一直按提示安装即可 配置环境变量1.在用变量新建变量名为ERLANG_HOME,变量值为C:\Program Files\erl-23.1的变量，变量值根据自己的安装路径填 2.在PATH中添加%ERLANG_HOME%\bin，保存 3.在cmd命令行中输入erl并回车，看到版本号说明erlang安装成功 12$ erlEshell V11.1 (abort with ^G) 下载安装RabbitMQ到https://www.rabbitmq.com/download.html下载安装程序，一直按提示安装即可 安装RabbitMQ-Plugins进入RabbitMQ安装目录/sbin目录下，打开cmd命令行输入下面命令并回车 1rabbitmq-plugins enable rabbitmq_management 然后再输入下面点命令并回车，会看到一堆信息 1rabbitmqctl status 启动RabbitMQ进入RabbitMQ安装目录/sbin目录下，双击rabbitmq-server.bat启动，然后在浏览器打开http://localhost:15672即可打开web管理界面，默认用户名和密码都是guest。在开始菜单也有RabbitMQ Service - start启动和RabbitMQ Service - stop结束快捷方式，RabbitMQ默认运行在本机的 5672端口。 Linux略 消息队列 创建队列先创建连接，然后设置队列属性创建队列，golang代码如下： 1234567891011121314151617conn, err := amqp.Dial("amqp://guest:guest@localhost:5672/")failOnError(err, "Failed to connect to RabbitMQ")defer conn.Close()ch, err := conn.Channel()failOnError(err, "Failed to open a channel")defer ch.Close()q, err := ch.QueueDeclare( "hello", // name false, // durable ,RabbitMQ重启后数据会消失，要持久化必须开启这个参数 false, // delete when unused false, // exclusive false, // no-wait nil, // arguments)failOnError(err, "Failed to declare a queue") 生产消息定义字符数组，然后调用Publish()方法发布消息，需要设置消息的具体参数，其中Body为消息内容，golang代码如下： 1234567891011body := "Hello World!"err = ch.Publish( "", // exchange 交换机名称 q.Name, // routing key false, // mandatory false, // immediate amqp.Publishing &#123; ContentType: "text/plain", Body: []byte(body), &#125;)failOnError(err, "Failed to publish a message") 消费消息队列中的消息由消费者进行消费，同样需要设置消费参数然后调用Consume(）方法，golang代码如下： 12345678910msgs, err := ch.Consume( q.Name, // queue "", // consumer true, // auto-ack 自动确认消息，如果改为false，在下面逻辑业务结束后需要调用d.Ack(false) false, // exclusive false, // no-local false, // no-wait nil, // args)failOnError2(err, "Failed to register a consumer") 消息的遍历 123456go func() &#123; for d := range msgs &#123; log.Printf("Received a message: %s", d.Body) //d.Ack(false) //手动消息确认时需要调用 &#125;&#125;() 消息确认 当处理一个比较耗时得任务的时候，你也许想知道消费者（consumers）是否运行到一半就挂掉。当前的代码中，当消息被RabbitMQ发送给消费者（consumers）之后，马上就会在内存中移除。这种情况，你只要把一个工作者（worker）停止，正在处理的消息就会丢失。同时，所有发送到这个工作者的还没有处理的消息都会丢失。我们不想丢失任何任务消息。如果一个工作者（worker）挂掉了，我们希望任务会重新发送给其他的工作者（worker）。 为了防止消息丢失，RabbitMQ提供了消息响应（acknowledgments）。消费者会通过一个ack（响应），告诉RabbitMQ已经收到并处理了某条消息，然后RabbitMQ就会释放并删除这条消息。 如果消费者（consumer）挂掉了，没有发送响应，RabbitMQ就会认为消息没有被完全处理，然后重新发送给其他消费者（consumer）。这样，即使工作者（workers）偶尔的挂掉，也不会丢失消息。 在golang代码中实现 1234567891011121314151617181920212223msgs, err := ch.Consume( q.Name, // queue "", // consumer false, // auto-ack 修改这个值 false, // exclusive false, // no-local false, // no-wait nil, // args)failOnError(err, "Failed to register a consumer")forever := make(chan bool)go func() &#123; for d := range msgs &#123; log.Printf("Received a message: %s", d.Body) dot_count := bytes.Count(d.Body, []byte(".")) t := time.Duration(dot_count) time.Sleep(t * time.Second) log.Printf("Done") d.Ack(false) //手动确认 &#125;&#125;() 这里代码里将auto-ack设置为false，并且在业务结束后调用d.Ack(false)手动确认即可，工作者（worker）挂掉之后，重启RabbitMQ所有没有响应的消息都会重新发送。如果忘记确认RabbitMQ将会占用越来越多的内存，因为它无法释放任何未经消息的消息 为了排除这种错误，你可以使用rabbitmqctl命令，输出messages_unacknowledged字段： 1sudo rabbitmqctl list_queues name messages_ready messages_unacknowledged Windows上执行： 1rabbitmqctl.bat list_queues name messages_ready messages_unacknowledged 数据持久化 如果你没有特意告诉RabbitMQ，那么在它退出或者崩溃的时候，将会丢失所有队列和消息。为了确保信息不会丢失，有两个事情是需要注意的：我们必须把“队列”和“消息”设为持久化。 队列持久化在golang代码中实现 123456789q, err := ch.QueueDeclare( "hello", // name true, // durable 持久化设置 false, // delete when unused false, // exclusive false, // no-wait nil, // arguments)failOnError(err, "Failed to declare a queue") 这里设置durable参数为true，此时，已经确保即使RabbitMQ重新启动，task_queue队列也不会丢失。如果已经存在一个名为”hello”的非持久化队列，重新改为持久化的话会报错，必须修改name或者清空队列。 消息持久化在golang代码中实现 12345678910err = ch.Publish( "", // exchange q.Name, // routing key false, // mandatory false, amqp.Publishing &#123; DeliveryMode: amqp.Persistent, ContentType: "text/plain", Body: []byte(body),&#125;) 通过设置amqp.Publishing的amqp.Persistent属性即可。 注意：将消息设为持久化并不能完全保证不会丢失。以上代码只是告诉了RabbitMq要把消息存到硬盘，但从RabbitMq收到消息到保存之间还是有一个很小的间隔时间。因为RabbitMq并不是所有的消息都使用fsync(2)——它有可能只是保存到缓存中，并不一定会写到硬盘中。并不能保证真正的持久化，但已经足够应付我们的简单工作队列。如果您需要更强的保证，那么您可以使用使用后面的发布订阅功能。 公平调度 如果有多个消费者，并且有的消费者处理消息比较繁忙，有的处理消息比较轻松，可以设置计数器，让RabbitMQ一次只向一个worker发送一条消息。换句话说，在处理并确认前一个消息之前，不要向正在工作人员发送新消息。 在golang代码中实现 123456err = ch.Qos( 1, // prefetch count 0, // prefetch size false, // global)failOnError(err, "Failed to set QoS") 这里置预取计数值为1即可。 订阅发布 创建交换机发布者（producer）不会直接发送任何消息给队列，只需要把消息发送给一个交换机（exchange）。交换机非常简单，它一边从发布者方接收消息，一边把消息推送到队列。交换机必须知道如何处理它接收到的消息，是应该推送到指定的队列还是是多个队列，或者是直接忽略消息。这些规则是通过交换机类型（exchange type）来定义的。有几个可供选择的交换机类型：direct, topic, headers和fanout。 显示交换机列表 1sudo rabbitmqctl list_exchanges 在golang代码中创建交换机 123456789err = ch.ExchangeDeclare( "logs", // name "fanout", // type true, // durable false, // auto-deleted false, // internal false, // no-wait nil, // arguments) name为交换机名称，type为交换机类型。前面的教程中我们对交换机一无所知，但仍然能够发送消息到队列中。因为我们使用了命名为空字符串(“”)的匿名交换机。如果要发送消息到指定队列中，在调用Publish()生产消息时指定exchange字段即可，不过该指定的交换机必须是创建好的。 绑定交换机我们已经创建了一个fanout交换机和一个队列。现在我们需要告诉交换机如何发送消息给我们的队列。交换机和队列之间的联系我们称之为绑定（binding）。golang代码实现： 1234567err = ch.QueueBind( q.Name, // queue name 队列名 "", // routing key "logs", // exchange 交换机名 false, nil,) 绑定好交易机之后生产者将消息存放在指定队列，在调用Consume()方法消费时只要指定queue队列名就能获取指定队列消息。 路由 在上面绑定交换机的设置中可以看到有一个参数routing key是空的，这个参数就是路由 绑定路由绑定（binding）是指交换机（exchange）和队列（queue）的关系。可以简单理解为：这个队列（queue）对这个交换机（exchange）的消息感兴趣。绑定的时候可以带上一个额外的routing_key参数。为了避免与Channel.Publish的参数混淆，我们把它叫做绑定键binding key。绑定键的意义取决于交换机（exchange）的类型。我们之前使用过fanout 交换机会忽略这个值，使用direct 交换机来代替这个值会生效。 每个队列可以有多个绑定键，每个交换机可以设置相同的或多个绑定键到各个队列中。原理如下图 其中P为生产者，X为交换机，amqp为队列，C为消费者 订阅路由绑定好路由之后就可以订阅指定路由的队列，在消费队列的队列绑定QueueBind(）方法中指定routing key的名称即可，golang代码实现： 12345678910111213141516171819202122for _, s := range os.Args[1:] &#123; log.Printf("Binding queue %s to exchange %s with routing key %s", q.Name, "logs_direct", s) err = ch.QueueBind( q.Name, // queue name s, // routing key 指定路由名称 "logs_direct", // exchange false, nil) failOnError(err, "Failed to bind a queue") &#125; msgs, err := ch.Consume( q.Name, // queue "", // consumer true, // auto ack false, // exclusive false, // no local false, // no wait nil, // args ) failOnError(err, "Failed to register a consumer") 主题交换机发送到topic交换机的消息不可以携带随意routing_key，它的routing_key必须是一个由.分隔开的词语列表。这些单词随便是什么都可以，但是最好是跟携带它们的消息有关系的词汇。 topic交换机背后的逻辑跟direct交换机很相似 —— 一个携带着特定routing_key的消息会被topic交换机投递给绑定键与之想匹配的队列。但是它的binding key和routing_key有两个特殊应用方式： * (星号) 用来表示一个单词. # (井号) 用来表示任意数量（零个或多个）单词。 下边用图说明： 这个例子里，我们发送的所有消息都是用来描述小动物的。发送的消息所携带的路由键是由三个单词所组成的，这三个单词被两个.分割开。路由键里的第一个单词描述的是动物的手脚的利索程度，第二个单词是动物的颜色，第三个是动物的种类。所以它看起来是这样的： &lt;celerity&gt;.&lt;colour&gt;.&lt;species&gt;。 我们创建了三个绑定：Q1的绑定键为 *.orange.*，Q2的绑定键为 *.*.rabbit 和 lazy.# 。 这三个绑定键被可以总结为： Q1 对所有的桔黄色动物都感兴趣。 Q2 则是对所有的兔子和所有懒惰的动物感兴趣。 一个携带有 quick.orange.rabbit 的消息将会被分别投递给这两个队列。携带着 lazy.orange.elephant 的消息同样也会给两个队列都投递过去。另一方面携带有 quick.orange.fox 的消息会投递给第一个队列，携带有 lazy.brown.fox 的消息会投递给第二个队列。携带有 lazy.pink.rabbit 的消息只会被投递给第二个队列一次，即使它同时匹配第二个队列的两个绑定。携带着 quick.brown.fox 的消息不会投递给任何一个队列。 如果我们违反约定，发送了一个携带有一个单词或者四个单词（&quot;orange&quot; or &quot;quick.orange.male.rabbit&quot;）的消息时，发送的消息不会投递给任何一个队列，而且会丢失掉。 但是另一方面，即使 &quot;lazy.orange.male.rabbit&quot; 有四个单词，他还是会匹配最后一个绑定，并且被投递到第二个队列中。 参考文档http://rabbitmq.mr-ping.com/tutorials_with_golang]]></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
        <tag>消息队列中间件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Golang时间与时间戳的获取和转换]]></title>
    <url>%2F2020%2F12%2F14%2F4.Golang%E6%97%B6%E9%97%B4%E4%B8%8E%E6%97%B6%E9%97%B4%E6%88%B3%E7%9A%84%E8%8E%B7%E5%8F%96%E5%92%8C%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚博客地址：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 获取时间戳需要 import “time” 包 12345678910//获取当前时间戳，单位s,打印结果:1491888244timeUnix:=time.Now().Unix() //获取当前时间戳，单位纳秒,打印结果：1491888244752784461timeUnixNano:=time.Now().UnixNano() //获取指定时间的时间戳loc, _ := time.LoadLocation(&quot;Asia/Shanghai&quot;) //设置时区timeStr, _ := time.ParseInLocation(&quot;2006-01-02 15:04:05&quot;, &quot;2018-07-11 15:07:58&quot;, loc) //2006-01-02 15:04:05是转换的格式，如php的&quot;Y-m-d H:i:s&quot;，&quot;2018-07-11 15:07:58&quot;才是真正要转换的时间fmt.Println(timeStr.Unix()) //打印结果：1531292878 获取时间需要 import “time” 包 123456789t := time.Now() //2018-10-22 06:59:39.399239964 +0000 UTCy := t.Year() //年m := t.Month() //月d := t.Day() //日h := t.Hour() //小时i := t.Minute() //分钟s := t.Second() //秒fmt.Println(y, m, d, h, i, s) //2018 July 11 15 24 59]]></content>
      <categories>
        <category>Go语言</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hyperledger-fabric测试环境搭建]]></title>
    <url>%2F2020%2F12%2F14%2F39.hyperledger-fabric%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚个人博客：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 环境安装 安装docker必须是CE(社区)版，如果装企业版的只能卸载重装，否则会出错；如果已安装可跳过，下面是CentOS安装步骤 设置仓库 12yum install -y yum-utils device-mapper-persistent-data lvm2yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo 安装docker-ce 1yum install docker-ce 查看版本 1docker -v Ubuntu安装docker 1curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun 安装docker-compose如果已安装可跳过 下载 去https://github.com/docker/compose/releases查看最新版本，替换下面的链接，后面不要带-rc的 1curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-Linux-x86_64" -o /usr/local/bin/docker-compose 添加权限 1chmod +x /usr/local/bin/docker-compose 查看版本 1docker-compose --version 安装go语言环境需要 go1.11以上版本，如果已安装可跳过 安装程序 到官网https://golang.google.cn/dl/复制最新的下载地址，然后下载压缩包 1wget https://dl.google.com/go/go1.13.1.linux-amd64.tar.gz 解压 1tar zxvf go1.13.1.linux-amd64.tar.gz -C /opt/ 配置环境 12mkdir go #创建项目目录vi /etc/profile 将下面的GOPATH路径修改为你的项目路径，然后将3条命令添加到文件的最后，保存；第一个是工作目录，第二个是go程序目录 123export GOROOT=/opt/goexport GOPATH=/home/jian/goexport PATH=$PATH:$GOROOT/bin:$GOPATH/bin 执行下面的命令使环境变量生效 1source /etc/profile 查看配置好的go环境变量 1go env 查看版本 1go version 安装python需要python 2.7.x版本，一般系统已自带有，如果没有，可以按下面的步骤安装 到https://www.python.org/ftp/python/选择合适的版本，以下例子基于python 2.7.9，其他版本同理 下载 1wget https://www.python.org/ftp/python/2.7.9/Python-2.7.9.tgz 安装 依次执行下面5行命令即可 12345tar -zxvf Python-2.7.9.tgzcd Python-2.7.9./configure --prefix=/usr/local/python-2.7.9makemake install 查看版本 1python --version 安装node.js及npm如果你将用Node.js的Hyperledger Fabric SDK开发Hyperledger Fabric的应用程序，则需安装Node.js的8.9.x版本 依次执行下面的命令即可，要装其他版本可以修改10.x为你要的版本 1234curl -sL https://rpm.nodesource.com/setup_10.x | bash -sudo yum clean all &amp;&amp; sudo yum makecache fastsudo yum install -y gcc-c++ makesudo yum install -y nodejs 查看版本 1node -v 如果你想要其他版本的Node.js的话，那么执行命令可以用下面的命令将已安装的Node.js移除，然后重新安装即可 1yum remove nodejs 搭建fabric环境 参照官方文档https://hyperledger-fabric.readthedocs.io/en/latest/install.html，2.2及以后版本参考https://hyperledger-fabric.readthedocs.io/en/release-2.2/test_network.html，步骤如下 安装示例、二进制文件和 Docker 镜像下面的命令下载并执行一个 bash 脚本，该脚本将下载并提取设置网络所需的所有特定于平台的二进制文件，并将它们放入fabric-samples文件夹中；然后，该脚本会将从 Docker Hub 上下载 Hyperledger Fabric docker 镜像到本地 Docker 注册表中，并将其标记为 ‘latest’。 1curl -sSL http://bit.ly/2ysbOFE | bash -s # 服务器需要科学上网 如果要指定版本需要加一个 Fabric、Fabric-ca 和第三方 Docker 镜像的版本号 1curl -sSL http://bit.ly/2ysbOFE | bash -s -- 1.4.2 1.4.2 0.4.15 如果你的服务器无法科学上网，可以到http://note.youdao.com/noteshare?id=4fb074480d296adf1e931c734e18d3bd&amp;sub=2C7210BDD6D04349B332CD66131C58ED获取脚本，然后保存到bootstrap.sh文件中，然后添加权限chmod +xbootstrap.sh `执行脚本即可 12chmod +x bootstrap.shbash ./bootstrap.sh 执行完后会得到fabric-samples目录 生成网络构件2.2以前的版本进入/fabric-samples/first-network目录，2.2以后的版本的目录在fabric-samples/test-network，执行下面的命令，然后输入Y继续，注意2.2版本及之后的版本不需要执行 1./byfn.sh generate 上面的命令为我们的各种网络实体生成证书和秘钥。创世区块 genesis block 用于引导排序服务，也包含了一组配置 Channel 所需要的配置交易集合 关闭网络执行下面的命令，然后输入Y继续 2.2以后的版本的目录在fabric-samples/test-network，2.2以前的版本进入fabric-samples/first-network 12./byfn.sh down //2.2以前的版本./network.sh down //2.2及以后的版本 上面的命令会结束掉你所有的容器，移除加密的材料和四个构件，并且从 Docker 仓库删除链码镜像 启动网络执行下面的命令，然后输入Y继续 12./byfn.sh up # 默认golang启动./byfn.sh up -l javascript #启动node.js版本，旧版本的命令是./byfn.sh up -l node 2.2及以后的版本将./byfn.sh换成./network.sh即可 上面的命令会编译 Golang 智能合约的镜像并且启动相应的容器。Go 语言是默认的链码语言，但是它也支持 Node.js 和 Java 的链码，详情可以看官方文档https://hyperledger-fabric.readthedocs.io/zh_CN/release-1.4/build_network.html; 这一步会启动所有的容器，然后启动一个完整的 end-to-end 应用场景，并且会打印下面的日志 12345678910111213141516171819Continue? [Y/n]proceeding ...Creating network "net_byfn" with the default driverCreating peer0.org1.example.comCreating peer1.org1.example.comCreating peer0.org2.example.comCreating orderer.example.comCreating peer1.org2.example.comCreating cli ____ _____ _ ____ _____/ ___| |_ _| / \ | _ \ |_ _|\___ \ | | / _ \ | |_) | | | ___) | | | / ___ \ | _ &lt; | ||____/ |_| /_/ \_\ |_| \_\ |_|Channel name : mychannelCreating channel... 等两分钟后命令会自动结束然后打印下面的日志 123456789101112131415161718Querying chaincode on peer1.org2...===================== Querying on peer1.org2 on channel 'mychannel'... ===================== + peer chaincode query -C mychannel -n mycc -c '&#123;"Args":["query","a"]&#125;'Attempting to Query peer1.org2 ...3 secs+ res=0+ set +x90===================== Query successful on peer1.org2 on channel 'mychannel' ===================== ========= All GOOD, BYFN execution completed =========== _____ _ _ ____ | ____| | \ | | | _ \ | _| | \| | | | | | | |___ | |\ | | |_| | |_____| |_| \_| |____/ 如果启动报错，建议先执行一次关闭网络操作清空数据 至此，fabric的环境搭建完成 名词解释 fabric ca数字签名授权，任何一个操作都需要数字签名证书 fabric peer节点，区块存储好的位置 ordering服务创建区块，验证和排序服务 channel每个channel都是独立的fabric实例，数据不互通 一个peer可以有多个channel，一个channel可能有多个peer chaincode智能合约，也称链码，chaincode属于某个channel 生命周期 安装install 实例化init 调用invoke MSPmembership service provider,会员服务提供者，管理peer的身份和访问许可，每个peer都有自己的MSP证书 工作流程 提案通过sdk向各个peer发起更新数据提案 背书endorsing,足够多的peer发回响应给sdk 更新申请sdk将更新申请发送给orderer 调用更新orderer节点验证更新操作（消息队列）和数字证书没问题后各个peer执行更新数据 Chaincode链码 开发者必须同时实现chaincode的Init和Invoke方法，chaincode编写完需要通过peer的chaincode install命令安装 fabric 的数据以键值对的形式存放在peer的levelDB中,可以切换为couchDB 链码的生命周期 install：将已编写完成的链码安装在网络节点中。 instantiate：对已安装的链码进行实例化。 upgrade：对已有链码进行升级。链代码可以在安装后根据具体需求的变化进行升级。 package：对指定的链码进行打包的操作。 singnpackage：签名。 链码结构node.js 123456789101112131415161718192021222324const shim = require('fabric-shim'); const Chaincode = class &#123; async Init(stub) &#123; //初始化参数 await stub.putState(key, Buffer.from(aStringValue)); return shim.success(Buffer.from('Initialized Successfully!')); &#125; async Invoke(stub) &#123; //调用方法，主要写逻辑业务 // 读取数据 let oldValue = await stub.getState(key); // 写入数据，如果key存在则为更新 let newValue = oldValue + delta; //定义数据，只能是键值对，存数组可以转json await stub.putState(key, Buffer.from(newValue)); //删除数据 await stub.deleteState(key); return shim.success(Buffer.from(newValue.toString())); &#125;&#125;;shim.start(new Chaincode()); 用NodeJs编写链码创建目录 1mkdir /root/fish/chaincode/fishcc 安装依赖 12cd /root/fish/chaincode/fishccnpm install --save fabric-shim 编写合约代码 1vi index.js 示例：江苏省农牧厅渔业管理系统 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141'use strict'const shim = require('fabric-shim');const util = require('util');let Chaincode = class &#123; //初始化方法，不用写什么东西 async Init(stub) &#123; console.info('初始化成功'); return shim.success(); &#125; //调用方法，主要写逻辑业务 async Invoke(stub) &#123; let ret = stub.getFunctionAndParameters(); //获取函数和参数 let method = this[ret.fcn]; if (!method) &#123; console.error('找不到要调用的函数，函数名：' + ret.fcn); throw new Error('找不到要调用的函数，函数名：' + ret.fcn); &#125; try &#123; let payload = await method(stub,ret.params); //直接调用函数，获取返回值 return shim.success(payload); &#125; catch (err) &#123; console.log(err); return shim.error(err); &#125; &#125; //查询fish信息 async queryFish(stub,args) &#123; if(args.length != !)&#123; throw new Error('错误的调用函数，实例：FISH01'); &#125; let fishNumber = args[0]; let fishAsBytes = await stub.getState(fishNumber); //从账本中获取fish的信息，账本是二进制存储的 if (!fishAsBytes || fishAsBytes.toString().length &lt;= 0) &#123; throw new Error(fishAsBytes + '不存在'); &#125; console.log(fishAsBytes.toString()); return fishAsBytes; &#125; //初始化账本方法，官方建议单独写，不用最上面点Init方法 async initLedger(stub,args)&#123; console.info('开始：初始化账本'); let fishes = []; fishes.push(&#123; vessel:"奋进号38A", location:"12,34", timestamp:"1598509989", holder:"wang" &#125;); fishes.push(&#123; vessel:"奋进号39A", location:"123,346", timestamp:"1598509989", holder:"gao" &#125;); fishes.push(&#123; vessel:"奋进号40A", location:"1234,3467", timestamp:"1598509989", holder:"liu" &#125;); for (let i = 0; i &lt; fishes.length; i++) &#123; await stub.putState('FISH' + i,Buffer.from(JSON.stringify(fishes[i]))); console.info('Add &lt;--&gt; ',fishes[i]); &#125; console.info('结束：初始化账本'); &#125; //记录fish信息 async recoredFish(stub,args)&#123; console.info('开始：记录fish信息'); if (args.length != 5) &#123; throw new Error('需要5个参数'); &#125; var fish = &#123; vessel:args[1], location:args[2], timestamp:args[3], holder:args[4] &#125; await stub.putState(args[0],Buffer.from(JSON.stringify(fishes))); console.info('结束：记录fish信息'); &#125; //查询所有fish async queryAllFish(stub,args)&#123; let startKey = 'FISH0'; let endKey = 'FISH999'; let iterator = await stub.getStateByRange(startKey,endKey); let allResults = []; while (true) &#123; let res = await iterator.next(); if (res.value &amp;&amp; res.value.value.toString()) &#123; let jsonRes = &#123;&#125;; console.log(res.value.value.toString('utf8')); jsonRes.Key = res.value.key; try &#123; jsonRes.Record = JSON.parse(res.value.value.toString('utf8')); &#125; catch (err) &#123; console.log(err); jsonRes.Record = res.value.value.toString('utf8'); &#125; allResults.push(jsonRes); &#125; if (res.done) &#123; console.log('end of data'); await iterator.close(); console.info(allResults); return Buffer.from(JSON.stringify(allResults)); &#125; &#125; &#125; //更改归属人 async changeFishHolder(stub,args)&#123; console.info('开始：更改归属人'); if (args.length != 2) &#123; throw new Error('需要2个参数'); &#125; let fishAsBytes = await stub.getState(args[0]); let fish = JSON.parse(fishAsBytes); fishAsBytes.holder = args[1]; await stub.putState(args[0],Buffer.from(JSON.stringify(fish))); console.info('结束：更改归属人'); &#125;&#125;shim.start(new Chaincode()); 用Golang编写链码示例：两个账户转账与查询package mainimport ( "fmt" "github.com/hyperledger/fabric-chaincode-go/shim" "github.com/hyperledger/fabric-protos-go/peer" "strconv")type ChainCode struct&#123;&#125;func main() &#123; err := shim.Start(new(ChainCode)) if( err!= nil)&#123; fmt.Printf("Error starting Simple Chaincode is %s \n",err) &#125;&#125;//链码初始化func (cc *ChainCode) Init(stub shim.ChaincodeStubInterface) peer.Response &#123; fmt.Println("链码实例例化") _, args := stub.GetFunctionAndParameters() var accountA, accountB string // 定义账号 var balanceA, balanceB int // 定义余额 var err error if len(args) != 4 &#123; return shim.Error("参数数量错误") &#125; // 初始化余额 accountA = args[0] balanceA, err = strconv.Atoi(args[1]) if err != nil &#123; return shim.Error("请输入整数余额") &#125; accountB = args[2] balanceB, err = strconv.Atoi(args[3]) if err != nil &#123; return shim.Error("请输入整数余额") &#125; fmt.Printf("A余额 = %d, B余额 = %d\n", balanceA, balanceB) // 数据上链 err = stub.PutState(accountA, []byte(strconv.Itoa(balanceA))) if err != nil &#123; return shim.Error(err.Error()) &#125; err = stub.PutState(accountB, []byte(strconv.Itoa(balanceB))) if err != nil &#123; return shim.Error(err.Error()) &#125; return shim.Success(nil)&#125;//调用链码func (cc *ChainCode) Invoke(stub shim.ChaincodeStubInterface) peer.Response &#123; fmt.Println("链码调用") function, args := stub.GetFunctionAndParameters() if function == "transfer" &#123; // 转账 return cc.transfer(stub, args) &#125; else if function == "delete" &#123; // 删除账户 return cc.delete(stub, args) &#125; else if function == "query" &#123; //查询余额 return cc.query(stub, args) &#125; else if function == "create" &#123; //创建账户 return cc.create(stub, args) &#125; return shim.Error("请输入正确的方法名. 方法名只能是 \"invoke\" \"delete\" \"query\" \"create\"")&#125;// 从A账户转移资产给B账户func (cc *ChainCode) transfer(stub shim.ChaincodeStubInterface, args []string) peer.Response &#123; var accountA, accountB string // 定义账号 var balanceA, balanceB int // 定义余额 var X int // 交易数量 var err error if len(args) != 3 &#123; return shim.Error("参数数量错误") &#125; accountA = args[0] accountB = args[1] // 读取余额 balanceAbytes, err := stub.GetState(accountA) if err != nil &#123; return shim.Error("获取数据失败") &#125; if balanceAbytes == nil &#123; return shim.Error("找不到账号信息") &#125; balanceA, _ = strconv.Atoi(string(balanceAbytes)) balanceBbytes, err := stub.GetState(accountB) if err != nil &#123; return shim.Error("获取数据失败") &#125; if balanceBbytes == nil &#123; return shim.Error("找不到账号信息") &#125; balanceB, _ = strconv.Atoi(string(balanceBbytes)) // 执行转账 X, err = strconv.Atoi(args[2]) if err != nil &#123; return shim.Error("转账数量必须是整数") &#125; if balanceA &lt; X &#123; return shim.Error("余额不足") &#125; balanceA = balanceA - X balanceB = balanceB + X fmt.Printf("转账后A余额 = %d, B余额 = %d\n", balanceA, balanceB) // 数据写入账本 err = stub.PutState(accountA, []byte(strconv.Itoa(balanceA))) if err != nil &#123; return shim.Error(err.Error()) &#125; err = stub.PutState(accountB, []byte(strconv.Itoa(balanceB))) if err != nil &#123; return shim.Error(err.Error()) &#125; return shim.Success(nil)&#125;// 删除某个账户实体func (cc *ChainCode) delete(stub shim.ChaincodeStubInterface, args []string) peer.Response &#123; if len(args) != 1 &#123; return shim.Error("参数数量错误") &#125; A := args[0] // 删除数据 err := stub.DelState(A) if err != nil &#123; return shim.Error("删除数据失败") &#125; return shim.Success(nil)&#125;// 查询账户的资产，对应peer chaincode queryfunc (cc *ChainCode) query(stub shim.ChaincodeStubInterface, args []string) peer.Response &#123; var account string var err error if len(args) != 1 &#123; return shim.Error("参数数量错误") &#125; account = args[0] // 从账本中获取状态 balanceAbytes, err := stub.GetState(account) if err != nil &#123; jsonResp := "获取" + account + "数据失败" return shim.Error(jsonResp) &#125; if balanceAbytes == nil &#123; jsonResp := "找不到账号信息" return shim.Error(jsonResp) &#125; jsonResp := "&#123;\"Name\":\"" + account + "\",\"Amount\":\"" + string(balanceAbytes) + "\"&#125;" fmt.Printf("查询结果:%s\n", jsonResp) return shim.Success(balanceAbytes)&#125;//创建账户func (cc *ChainCode) create(stub shim.ChaincodeStubInterface, args []string) peer.Response &#123; var account string var balanceA int var err error if len(args) != 2 &#123; return shim.Error("参数数量错误") &#125; // 初始化账号信息 account = args[0] balanceA, err = strconv.Atoi(args[1]) if err != nil &#123; return shim.Error("余额输入错误") &#125; fmt.Printf("balanceA余额 = %d\n", balanceA) // 写入状态到账本 err = stub.PutState(account, []byte(strconv.Itoa(balanceA))) if err != nil &#123; return shim.Error(err.Error()) &#125; return shim.Success(nil)&#125; 参考文档视频： https://www.bilibili.com/video/BV1554y1q7iE https://www.bilibili.com/video/[BV1zt411H7qX](https://www.bilibili.com/video/BV1zt411H7qX)/ 文档 https://github.com/itheima1/hyperledger]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>fabric</tag>
        <tag>hyperledger</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[protobuf3基础语法]]></title>
    <url>%2F2020%2F12%2F14%2F37.protobuf3%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚个人博客：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 简介 ProtoBuf （Google Protocol Buffer）是由google公司用于数据交换的序列结构化数据格式，具有跨平台、跨语言、可扩展特性，同类型有常用的XML及JSON，但具有更小的传输体积、更高的编码、解码能力，特别适合于数据存储、网络数据传输等对存储体积、实时性要求高的领域，目前已经发展到protoc3 版本。 优点：空间效率高，时间效率要高，对于数据大小敏感，传输效率高的 缺点：消息结构可读性不高，序列化后的字节序列为二进制序列不能简单的分析有效性 基本结构 123456789101112131415syntax="proto3"; //文件第一行指定使用的protobuf版本，如果不指定，默认使用proto2package services; //定义proto包名,可以为.proto文件新增一个可选的package声明符，可选option go_package = ".;services"; //声明编译成go代码后的package名称，可选的，默认是proto包名message ProdRequest&#123; //messaage可以理解为golang中的结构体,可以嵌套 int32 prod_id=1; //变量的定义格式为：[修饰符][数据类型][变量名] = [唯一编号] ,同一个message中变量的编号不能相同&#125;message ProdResponse&#123; int32 pro_stock=1;&#125;service ProdService&#123; //定义服务 rpc GetProdStock (ProdRequest) returns (ProdResponse); //rpc方法&#125; 变量类型 ProtoBuf Golang int32/sint32/sfixed32 int32 int64/sint64/sfixed64 int64 uint32/fixed32 uint32 uint64/fixed64 uint64 float float32 double float64 bool bool string string bytes []byte enum 数组或slice google.protobuf.Timestamp timestamp.Timestamp 备注：最后的时间类型golang需要引入包github.com/golang/protobuf/ptypes/timestamp,定义如下 1t:=timestamp.Timestamp(time.Now().Unix()) 然后.protp文件需要导入google/protobuf/timestamp.proto 修饰符 repeated如果一个字段被repeated修饰，则表示它是一个列表类型的字段，相当于golang里的切片 123message SearchRequest &#123; repeated string args = 1 // 列表类型&#125; reserved如果你希望可以预留一些数字标签或者字段可以使用reserved修饰符 12345message Foo &#123; reserved 2, 15, 9 to 11; reserved "foo", "bar"; string foo = 3 // 编译报错，因为‘foo’已经被标为保留字段&#125; 默认值 类型 默认值 string “” bytes 空字节 bool false 数字 0 enum 第一个值 message 跟编程语言有关 repeated 空列表 枚举类型 第一个枚举值的数值必须是0且至少有一个枚举值，一个数值可以对应多个枚举值，必须标明option allow_alias = true;不推荐使用负数值 1234567891011121314151617181920212223message SearchRequest &#123; string query = 1; int32 page_number = 2; int32 result_per_page = 3; enum Corpus &#123; UNIVERSAL = 0; WEB = 1; IMAGES = 2; LOCAL = 3; NEWS = 4; PRODUCTS = 5; VIDEO = 6; &#125; Corpus corpus = 4;&#125;enum EnumAllowingAlias &#123; option allow_alias = true; UNKNOWN = 0; STARTED = 1; RUNNING = 1;&#125; 导入文件 1import "myproject/other_protos.proto"; // 这样就可以引用在other_protos.proto文件中定义的message,不能导入不使用的.proto文件 定义服务 在你的 .proto 文件中指定 service,然后在service里定义rpc方法即可，要注意指定参数和返回值 123service RouteGuide &#123; rpc GetFeature(Point) returns (Feature) &#123;&#125;&#125; rpc方法 gRPC 允许你定义4种类型的 service 方法 简单rpc客户端使用存根发送请求到服务器并等待响应返回，就像平常的函数调用一样 123service RouteGuide &#123; rpc GetFeature(Point) returns (Feature) &#123;&#125;&#125; 服务端流式rpc通过在 响应返回参数 类型前插入 stream 关键字，可以指定一个服务器端的流方法。客户端发送请求到服务器，拿到一个流去读取返回的消息序列。 客户端读取返回的流，直到里面没有任何消息。 123service RouteGuide &#123; rpc ListFeatures(Rectangle) returns (stream Feature) &#123;&#125;&#125; 客户端流式rpc通过在 请求参数 类型前指定 stream 关键字来指定一个客户端的流方法。客户端写入一个消息序列并将其发送到服务器，同样也是使用流。一旦客户端完成写入消息，它等待服务器完成读取返回它的响应。 123service RouteGuide &#123; rpc RecordRoute(stream Point) returns (RouteSummary) &#123;&#125;&#125; 双向流式rpc通过在请求和响应前加 stream 关键字去制定方法的类型。两个流独立操作，因此客户端和服务器可以以任意喜欢的顺序读写：比如， 服务器可以在写入响应前等待接收所有的客户端消息，或者可以交替的读取和写入消息，或者其他读写的组合。 123service RouteGuide &#123; rpc RouteChat(stream RouteNote) returns (stream RouteNote) &#123;&#125;&#125;]]></content>
      <categories>
        <category>protobuf</category>
      </categories>
      <tags>
        <tag>protobuf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[etcd学习笔记]]></title>
    <url>%2F2020%2F12%2F14%2F38.etcd%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚个人博客：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 关于etcd简介 etcd是使用Go语言开发的一个开源的、高可用的分布式key-value存储系统，可以用于配置共享和服务的注册和发现。 特点 完全复制：集群中的每个节点都可以使用完整的存档 高可用性：Etcd可用于避免硬件的单点故障或网络问题 一致性：每次读取都会返回跨多主机的最新写入 简单：包括一个定义良好、面向用户的API（gRPC） 安全：实现了带有可选的客户端证书身份验证的自动化TLS 快速：每秒10000次写入的基准速度 可靠：使用Raft算法实现了强一致、高可用的服务存储目录 集群 etcd 作为一个高可用键值存储系统，天生就是为集群化而设计的。由于 Raft 算法在做决策时需要多数节点的投票，所以 etcd 一般部署集群推荐奇数个节点，推荐的数量为 3、5 或者 7 个节点构成一个集群。 服务发现 服务发现要解决的是分布式系统中最常见的问题之一，即在同一个分布式集群中的进程或服务，要如何才能找到对方并建立连接。本质上来说，服务发现就是想要了解集群中是否有进程在监听 udp 或 tcp 端口，并且通过名字就可以查找和连接。要解决服务发现的问题，需要有下面三大支柱，缺一不可 强一致性、高可用的服务存储目录。基于 Raft 算法的 etcd 就是一个强一致性高可用的服务存储目录。 一种注册服务和监控服务健康状态的机制。用户可以在 etcd 中注册服务，并且对注册的服务设置 key TTL，定时保持服务的心跳以达到监控健康状态的效果。 一种查找和连接服务的机制。通过在 etcd 指定的主题（由服务名称构成的服务目录）下注册的服务也能在对应的主题下查找到。 核心组件 HTTP Server：用于处理用户发送的 API 请求以及其它 etcd 节点的同步与心跳信息请求。 Store：用于处理 etcd 支持的各类功能的事务，包括数据索引、节点状态变更、监控与反馈、事件处理与执行等等，是 etcd 对用户提供的大多数 API 功能的具体实现。 Raft：Raft 强一致性算法的具体实现，是 etcd 的核心。 WAL：Write Ahead Log（预写式日志），是 etcd 的数据存储方式。除了在内存中存有所有数据的状态以及节点的索引以外，etcd 就通过 WAL 进行持久化存储。WAL 中，所有的数据提交前都会事先记录日志。Snapshot 是为了防止数据过多而进行的状态快照；Entry 表示存储的具体日志内容。 安装etcd从https://github.com/etcd-io/etcd/releases获取最新版本，下载解压得到etcd以及etcdctl两个程序（linux和windows相同）。其中etcd就是运行etcd服务的二进制文件，etcdctl是官方提供的命令行etcd客户端，使用etcdctl可以在命令行中访问etcd服务。 为了方便操作可以将两个文件添加软连接到系统环境变量中 12ln -fs /root/eosio/2.0/bin/etcd /usr/local/bin/etcdln -fs /root/eosio/2.0/bin/etcdctl /usr/local/bin/etcdctl 查看版本 1etcd --version 启动etcd 1etcd 可选参数： -name 节点名称，默认是UUID -data-dir 保存日志和快照的目录，默认为当前工作目录 -addr 公布的ip地址和端口。 默认为127.0.0.1:2379 -bind-addr 用于客户端连接的监听地址，默认为-addr配置 -peers 集群成员逗号分隔的列表，例如 127.0.0.1:2380,127.0.0.1:2381 -peer-addr 集群服务通讯的公布的IP地址，默认为 127.0.0.1:2380. -peer-bind-addr 集群服务通讯的监听地址，默认为-peer-addr配置 上述配置也可以设置配置文件，默认为etcd目录/etcd.conf 键值库操作 写（put）1etcdctl put name "hello world" //新增和更新都是put 读（get）1etcdctl get name 根据前缀查询 1etcdctl get name --prefix //查找前缀为name的 删除（del）1etcdctl del name 事务（txn）etcd中事务是原子执行的，只支持类似if … then … else …这种表达 12345678910111213141516171819202122//先赋值etcdctl put user1 bad//开启事务etcdctl txn --interactivecompares:// 输入以下内容,注意=号两边要有空格，输入结束按两次回车value("user1") = "bad" //如果 user1 = bad，则执行 get user1 success requests (get, put, del):get user1//如果 user1 != bad，则执行 put user1 goodfailure requests (get, put, del):put user1 good// 运行结果，执行 successSUCCESSuser1bad 监听（watch）123456789101112131415// 当 stock1 的数值改变（ put 方法）的时候，watch 会收到通知，在这之前进程会阻塞$ etcdctl watch stock1// 新打开终端etcd 多台服务器集群$ export ETCDCTL_API=3$ etcdctl put stock1 1000//在watch 终端显示PUTstock11000$ etcdctl watch stock --prefix$ etcdctl put stock1 10$ etcdctl put stock2 20 租约（lease）lease 可以设置访问的失效时间 1234567891011121314$ etcdctl lease grant 300 //创建一个300秒的租约# lease 326963a02758b527 granted with TTL(300s)$ etcdctl put sample value -- lease=326963a02758b527 //写入操作时将租约id为326963a02758b527的租约分配给sampleOK$ etcdctl get sample$ etcdctl lease keep-alive 326963a02758b520 //续约$ etcdctl lease revoke 326963a02758b527 //手动释放租约lease 326963a02758b527 revoked# or after 300 seconds //自动释放租约$ etcdctl get sample Lease提供了几个功能： Grant：分配一个租约。 Revoke：释放一个租约。 TimeToLive：获取剩余TTL时间。 Leases：列举所有etcd中的租约。 KeepAlive：自动定时的续约某个租约。 KeepAliveOnce：为某个租约续约一次。 Close：貌似是关闭当前客户端建立的所有租约。 分布式锁(lock)分布式锁，一个人操作的时候，另外一个人只能看，不能操作 123456789# 第一终端$ etcdctl lock mutex1mutex1/326963a02758b52d# 第二终端$ etcdctl lock mutex1# 当第一个终端结束了，第二个终端会显示mutex1/326963a02758b53 选举(elect)选举节点为leader，只有leader节点才有写入的权限，普通节点只有读权限，保证数据一致性；leader节点会定时向普通节点发送心跳，当普通节点收不到心跳时会自动选举新的leader 1234567891011$ etcdctl elect one p1one/326963a02758b539p1# another client with the same name blocks$ etcdctl elect one p2//结束第一终端，第二终端显示one/326963a02758b53ep2 集群状态监控(endpoint)集群健康状态检查 123$ etcdctl --write-out=table endpoint status$ etcdctl endpoint health 快照(snapshot)用于保存etcd数据库的快照 12345etcdctl snapshot save my.dbSnapshot saved at my.dbetcdctl --write-out=table snapshot status my.db 集群成员管理(Member)用于查看、添加，删除，更新成员 1234export ENDPOINTS=127.0.0.1:2379,127.0.0.1:2479,127.0.0.1:2579 //windows下export换成setetcdctl member list -w table //成员列表-w可省略etcdctl --endpoints=$ENDPOINTS member remove b9057cfdc8ff17ce //删除成员etcdctl --endpoints=$ENDPOINTS member add cd3 --peer-urls=http://127.0.0.1:2180 //添加成员cd3为成员名 启动新节点 1etcd --name cd3 --listen-client-urls http://127.0.0.1:2179 --advertise-client-urls http://127.0.0.1:2179 --listen-peer-urls http://127.0.0.1:2180 --initial-advertise-peer-urls http://127.0.0.1:2180 --initial-cluster-state existing --initial-cluster cd2=http://127.0.0.1:2580,cd0=http://127.0.0.1:2380,cd3=http://127.0.0.1:2180,cd1=http://127.0.0.1:2480 --initial-cluster-token etcd-cluster-1 go语言操作etcd连接下载驱动包 1go get github.com/coreos/etcd/clientv3 连接服务 12345cli, err := clientv3.New(clientv3.Config&#123; Endpoints: []string&#123;"localhost:2379"&#125;, // Endpoints: []string&#123;"localhost:2379", "localhost:22379", "localhost:32379"&#125; DialTimeout: 5 * time.Second,&#125;) 读写写 第一个参数是goroutine的上下文Context，后面两个参数分别是key和value。 123kv := clientv3.NewKV(cli)putResp, err := kv.Put(context.TODO(),"/test/key1", "Hello etcd!") // PutResp: &amp;&#123;cluster_id:14841639068965178418 member_id:10276657743932975437 revision:3 raft_term:7 &lt;nil&gt;&#125; 普通查询 1getResp, err := kv.Get(context.TODO(), "/test/key1") 返回结构体 12345678910type RangeResponse struct &#123; Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"` // kvs is the list of key-value pairs matched by the range request. // kvs is empty when count is requested. Kvs []*mvccpb.KeyValue `protobuf:"bytes,2,rep,name=kvs" json:"kvs,omitempty"` // more indicates if there are more keys to return in the requested range. More bool `protobuf:"varint,3,opt,name=more,proto3" json:"more,omitempty"` // count is set to the number of keys within the range when requested. Count int64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`&#125; Kvs字段，保存了本次Get查询到的所有k-v对，因为上述例子只Get了一个单key，所以只需要判断一下len(Kvs)是否等于1即可知道key是否存在。 按前缀查询 1rangeResp, err := kv.Get(context.TODO(), "/test/", clientv3.WithPrefix()) 分页查询 RangeResponse.More和Count，当我们使用withLimit()等选项进行Get时会发挥作用，相当于翻页查询。 op操作Op字面意思就是”操作”，Get和Put都属于Op，只是为了简化用户开发而开放的特殊API。 其参数Op是一个抽象的操作，可以是Put/Get/Delete…；而OpResponse是一个抽象的结果，可以是PutResponse/GetResponse… 可以通过Client中定义的一些方法来创建Op： func OpDelete(key string, opts …OpOption) Op func OpGet(key string, opts …OpOption) Op func OpPut(key, val string, opts …OpOption) Op func OpTxn(cmps []Cmp, thenOps []Op, elseOps []Op) Op 其实和直接调用KV.Put，KV.GET没什么区别。 12345678910111213141516171819cli, err := clientv3.New(clientv3.Config&#123; Endpoints: endpoints, DialTimeout: dialTimeout,&#125;)if err != nil &#123; log.Fatal(err)&#125;defer cli.Close()ops := []clientv3.Op&#123; clientv3.OpPut(&quot;put-key&quot;, &quot;123&quot;), clientv3.OpGet(&quot;put-key&quot;), clientv3.OpPut(&quot;put-key&quot;, &quot;456&quot;)&#125;for _, op := range ops &#123; if _, err := cli.Do(context.TODO(), op); err != nil &#123; log.Fatal(err) &#125;&#125; 租约创建一个租约 1grantResp, err := lease.Grant(context.TODO(), 10) 分配租约 1kv.Put(context.TODO(), "/test/vanish", "vanish in 10s", clientv3.WithLease(grantResp.ID)) 如果在Put之前Lease已经过期了，那么这个Put操作会返回error，此时你需要重新分配Lease 续约 1keepResp, err := lease.KeepAliveOnce(context.TODO(), grantResp.ID) 如果在执行之前Lease就已经过期了，那么需要重新分配Lease。etcd并没有提供API来实现原子的Put with Lease，需要我们自己判断err重新分配Lease。 事务12345678910txn := kv.Txn(context.TODO())kv.Txn(context.TODO()).If( clientv3.Compare(clientv3.Value(k1), "&gt;", v1), clientv3.Compare(clientv3.Version(k1), "=", 2)).Then( clientv3.OpPut(k2,v2), clentv3.OpPut(k3,v3)).Else( clientv3.OpPut(k4,v4), clientv3.OpPut(k5,v5)).Commit() 类似于clientv3.Value()\用于指定key属性的，有这么几个方法： func CreateRevision(key string) Cmp：key=xxx的创建版本必须满足… func LeaseValue(key string) Cmp：key=xxx的Lease ID必须满足… func ModRevision(key string) Cmp：key=xxx的最后修改版本必须满足… func Value(key string) Cmp：key=xxx的创建值必须满足… func Version(key string) Cmp：key=xxx的累计更新次数必须满足… 监控Watch用于监听某个键的变化, Watch调用后返回一个WatchChan，它的类型声明如下: 123456789101112type WatchChan &lt;-chan WatchResponsetype WatchResponse struct &#123; Header pb.ResponseHeader Events []*Event CompactRevision int64 Canceled bool Created bool&#125; 参考文章https://juejin.im/post/5dba5bedf265da4d461eb8ff#heading-3 https://zhuanlan.zhihu.com/p/38300827]]></content>
      <categories>
        <category>etcd</category>
      </categories>
      <tags>
        <tag>etcd</tag>
        <tag>服务发现</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ThinkPHP5和ThinkPHP6的区别]]></title>
    <url>%2F2020%2F12%2F14%2F36.ThinkPHP5%E5%92%8CThinkPHP6%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚个人博客：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 1.安装方式thinkphp6只能通过composer安装 12composer config -g repo.packagist composer https://mirrors.aliyun.com/composer # 设置composer为阿里云镜像,解决国内使用composer慢的问题composer create-project topthink/think myproject # 安装稳定版,myproject为你的项目名 2.配置文件thinkphp5里面的config.php被拆分成了app、cache、database、route等等模块，放在了config文件夹； thinkphp6新引入了一个.env的文件，可以通过读取这个环境设置去配置数据库等等 3.自带web服务直接php think run就可以在本地启动一个web服务器，还可以用-p参数指定端口 4.目录结构application文件夹重命名为app； thinkphp5核心框架是项目根目录thinkphp下 , thinkphp6是vendor/topthink 5.控制器之前继承think\Controller类，现在改为继承BaseController 6.跨域只需要在middleware.php中注册\think\middleware\AllowCrossDomain就可以搞定跨域问题 7.组件独立独立ORM 独立模版引擎 8.严格模式thinkphp6使用了php7严格模式 9.引入Filesystem10.支持多应用入口admin应用可以设置admin.php入口文件来访问；api应用可以设置api.php入口文件来访问。 如果要使用多应用模式，你需要安装多应用模式扩展 1composer require topthink/think-multi-app 然后你的应用目录结构需要做如下调整，主要区别在app目录增加了应用子目录，然后配置文件和路由定义文件都纳入应用目录下 123456789101112131415161718192021222324252627├─app 应用目录│ ├─index 主应用│ │ ├─controller 控制器目录│ │ ├─model 模型目录│ │ ├─view 视图目录│ │ ├─config 配置目录│ │ ├─route 路由目录│ │ └─ ... 更多类库目录│ │ │ ├─admin 后台应用│ │ ├─controller 控制器目录│ │ ├─model 模型目录│ │ ├─view 视图目录│ │ ├─config 配置目录│ │ ├─route 路由目录│ │ └─ ... 更多类库目录│├─public WEB目录（对外访问目录）│ ├─admin.php 后台入口文件│ ├─index.php 入口文件│ ├─router.php 快速测试文件│ └─.htaccess 用于apache的重写│├─config 全局应用配置目录├─runtime 运行时目录│ ├─index index应用运行时目录│ └─admin admin应用运行时目录 支持在同一个入口文件中访问多个应用，并且支持应用的映射关系以及自定义。如果你通过index.php入口文件访问的话，并且没有设置应用name，系统自动采用自动多应用模式。 自动多应用模式的URL地址默认使用 1234// 访问admin应用http://serverName/index.php/admin// 访问shop应用http://serverName/index.php/shop 以通过app.php配置文件的default_app配置参数指定默认应用 12// 设置默认应用名称'default_app' =&gt; 'home', 11.域名绑定应用config/app.php 配置文件中定义域名和应用的绑定 1234'domain_bind' =&gt; [ 'www.a.com' =&gt; 'index', // 域名绑定到www应用 'admin.a.com' =&gt; 'admin', // admin绑定到后台应用], 12.自动加载thinkphp5真正实现了按需加载,所有类库采用自动加载机制,并且支持类库映射和composer类库的自动加载； thinkphp6使用composer方式实现类自动加载]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>ThinkPHP6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux检查指定程序是否在运行监控脚本]]></title>
    <url>%2F2020%2F12%2F14%2F35.Linux%E6%A3%80%E6%9F%A5%E6%8C%87%E5%AE%9A%E7%A8%8B%E5%BA%8F%E6%98%AF%E5%90%A6%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9B%91%E6%8E%A7%E8%84%9A%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚个人博客：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 说明此脚本可以检测Linux指定名字的程序是否在运行，如果检测到没有在运行，则启动该程序并做日志记录 编写脚本1vi monitor.sh 将以下代码中的程序名和所在目录修改然后复制粘贴保存 123456789101112131415161718192021222324252627282930#!/bin/sh# 在这修改程序名和程序所在目录，其他不用改name="entwallet"path="/root/entwallet"pid=`ps -A |grep $name| awk '&#123;print $1&#125;'`now=`date "+%Y-%m-%d %H:%M:%S"`# 检测是否在运行if [ ! $pid ]then echo "$now $name is not running, start it now..." # 启动程序命令 cd $path ./entwallet start new_pid=`ps -A |grep $name| awk '&#123;print $1&#125;'` # 检测是否启动成功 if [ ! $pid ] then echo "$now $name start successfully, pid is $new_pid" else "$now $name start failed!" fielse echo "$now $name is running, pid is $pid"fi 添加执行权限1chmod +x ./monitor.sh 添加定时任务1crontab -e 根据自己的需要编辑脚本运行时间，修改日志存放的目录，例如：1分钟检测一次 1* * * * * /home/leafserver/monitor.sh &gt;&gt; /home/leafserver/monitor.log 2&gt;&amp;1 输入完成保存即可 查看日志1tail -f /home/leafserver/monitor.log 日志如下 1234562020-08-11 14:51:22 entwallet is not running, start it now...2020-08-11 14:51:22 entwallet start successfully, pid is 171172020-08-11 14:52:01 entwallet is running, pid is 171172020-08-11 14:53:01 entwallet is running, pid is 171172020-08-11 14:54:01 entwallet is running, pid is 171172020-08-11 14:55:01 entwallet is running, pid is 17117]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>监控脚本</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[多线程高并发编程MySQL数据库处理]]></title>
    <url>%2F2020%2F12%2F14%2F34.%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8BMySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%84%E7%90%86%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚个人博客：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 摘要 ​ 现在很多主流的编程语言都支持多线程或者协程处理，例如天生支持协程的go语言、php+swoole等。但是多线程和单线程不同，多线程如果不对数据库做处理的话，有时候单线程跑的程序没有问题，但是一旦开启多线程，数据库就会发生一系列之前没有的问题。 ​ 那么多线程高并发的数据库需要做怎样的处理呢？下面以PHP+MySQL为例做说明，其他编程语言类似。 数据库处理 并发数据库处理最低条件必须满足下面的前6条 事务​ 事务是多线程处理中确保数据准确性和一致性的核心步骤之一，但前提是MySQL数据库的存储引擎必须是InnoDB，因为MyISAM不支持事务，对于InnoDB每一条SQL语言都默认封装成事务，自动提交，这样会影响速度，所以最好把多条SQL语言放在begin和commit之间，组成一个事务； 例如php-laravel框架中的事务： 12345678910try &#123; DB::beginTransaction(); //业务逻辑和数据库操作 DB::commit();&#125; catch (Exception $e) &#123; DB::rollback(); echo $e-&gt;getMessage();&#125; 行锁​ 行锁是多线程处理中确保数据准确性和一致性的第二个核心步骤，加行锁能保证在这个事务中的数据不会被其他线程更改，确保数据准确，其他线程访问这一行时会阻塞；需要注意的是，行锁只能锁定一行，如果数据库where条件中包含多行结果将会报错 例如php-laravel框架事务中的行锁： 1234567891011121314try &#123; DB::beginTransaction(); //lockForUpdate()表示加行锁进行更新 $user = User::where('id',1)-&gt;lockForUpdate()-&gt;first(); //可行 $user = User::where('id','&gt;',1)-&gt;lockForUpdate()-&gt;first(); //这是不行的，会报错 $user-&gt;name = 'test'; $user-&gt;save(); DB::commit();&#125; catch (Exception $e) &#123; DB::rollback(); echo $e-&gt;getMessage();&#125; 索引​ InnoDB的行锁是实现在索引上的，而不是锁在物理行记录上。潜台词是，如果访问没有命中索引，也无法使用行锁，将要退化为表锁。 禁止的操作在有行锁的事务中不可以进行以下的操作 自增自减 很多编程语言框架的orm都提供自增自减连贯操作，但是在行锁事务中事不允许的，例如 12User::where(['id'=&gt;1])-&gt;increment('stock');User::where(['id'=&gt;1])-&gt;decrement('stock'); 查询语句在事务外面 数据查询的执行必须在事务开始后，否则不起作用 执行顺序​ 假如你的事务中的lockForUpdate操作的数据表依次为A、B、C表，那么你更新表的顺序也应该按A、B、C表的顺序更新； ​ 假如你的两条相同逻辑并发线程分别需要锁定相同的数据表，那么锁定的表顺序应该保持一致。举个反向案例：两条线程分别锁定顺序为A、B、C和B、A、C，当两线程同时执行，当线程1锁定A表，需要接着锁定B表，但是B表已经被线程2锁定；线程2此时也在等待线程1释放A表，这样两条线程相互等待造成会死锁。 连接池​ 多线程情况下数据库连接如果用同一个连接实例，可能会发生报错，这个视编程语言框架而定，有的框架已经帮忙处理好了，但是大多数需要配置才能生效。连接池的应用大大降低了数据库的连接资源占用和访问速度。 读写分离（可选）​ 当数据库的写压力增加，读写集中在一个数据库上会让数据库不堪重负。读写分离就是建立多个分布式数据库，只在主数据库服务器上写，只在从数据库服务器上读，其中从数据库服务器可以部署多台用来读数据。一般编程语言的orm都支持读写分离配置。 分库分表（可选）​ 随着系统访问量的增加，QPS越来越高，数据库磁盘容量不断增加，一般数据库服务器的QPS在800-1200的时候性能最佳，当超过2000的时候sql就会变得很慢并且很容易被请求打死，而单表数据量过大也会导致数据库执行sql很慢，为了应付这种场景产生了分库分表这种思想和技术。MySQL的话可以考虑使用分布分表中间件，例如mycat。另外如果单张表数据过大，查询起来速度会很慢，对时间要求不大的情况下，考虑建立历史表。 使用缓存（可选）​ 为了减少对数据库的访问，对时效性低的数据可以使用缓存数据库，提高访问速度，例如redis和memcacha。 负载均衡（可选）​ 负载均衡，也称分布式服务器，如果用户量很大，一台服务器无法支撑服务，需要部署多台服务器，做负载均衡处理。例如使用阿里云的负载均衡或者自行搭建nginx反向代理。另外，缓存服务器也是可以可以分布式搭建的 常见报错报错信息： 1ERROR : (2006, 'MySQL server has gone away') 解决方法： 事务中有锁等待问题导致数据库阻塞，检查你的事务中是否有事务没提交，return、continue或break前是否已经rollback 报错信息： 1[ERROR] Uncaught exception 'Illuminate\Database\QueryException': [0]Packets out of order. Expected 15 received 1. Packet size=80 解决方法： 检查事务中的锁行语句是否包含多行，多行只能锁一行，也就是说你查询条件的字段必须是唯一的； 或者检查是否有启用数据库连接池，多个线程使用同一数据库连接也会出现这个问题 报错信息： 1ERROR 1305(42000) SAVEPOINT trans*** DOES NOT EXIST 解决方法： 有部分事务没有提交或者回滚，检查你的事务中是否有事务没提交，return、continue或break前是否已经rollback]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>多线程</tag>
        <tag>高并发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LNMP1.6安装gmp扩展]]></title>
    <url>%2F2020%2F12%2F14%2F32.LNMP1.6%E5%AE%89%E8%A3%85gmp%E6%89%A9%E5%B1%95%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚个人博客：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 解压PHP包进入LNMP的src目录 1cd /root/lnmp1.6/src 找到你的PHP压缩包并解压 1tar -xjf php-7.2.22.tar.bz2 编译安装进入gmp扩展所在的目录 1cd /root/lnmp1.6/src/php-7.2.22/ext/gmp 执行phpize,得到configure程序 1/usr/local/php/bin/phpize 运行configure 1./configure -with-php-config=/usr/local/php/bin/php-config 编译安装，安装完成会在最后一行输出安装位置 1make &amp;&amp; make install 重启LNMP，进入上一步得到的位置目录，看见gmp.so表示安装成功 12lnmp restartcd /usr/local/php/lib/php/extensions/no-debug-non-zts-20170718 配置php.ini编辑php.ini文件 1vi /usr/local/php/etc/php.ini 在文件最后加上下面这行代码，然后重启LNMP即可 1extension=/usr/local/php/lib/php/extensions/no-debug-non-zts-20170718/gmp.so 1lnmp restart 重启完打开phpinfo.php可以看到多出了下面的扩展信息 gmp support enabled GMP version 6.0.0 参考文章 https://blog.csdn.net/weixin_43233341/article/details/104928207 https://blog.csdn.net/jj546630576/article/details/91424770]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>LAMP</tag>
        <tag>gmp扩展</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[go语言Gin框架教程]]></title>
    <url>%2F2020%2F12%2F14%2F33.go%E8%AF%AD%E8%A8%80Gin%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚个人博客：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 下载使用1$ go get -u github.com/gin-gonic/gin 1import &quot;github.com/gin-gonic/gin&quot; HTTP服务12345678910func main() &#123; router := gin.Default() //路由 router.GET("/", func(c *gin.Context) &#123; c.JSON(200, gin.H&#123; "message": "hello gin", &#125;) &#125;) router.Run(":8080")&#125; 路由绑定router.GET(&quot;/&quot;, index)表示用GET方式接收路由，如果路由是根目录，那么直接执行index控制器方法，index控制器必须含有gin.Context参数，也可以向上面一样将index控制器的内容写成匿名函数。 1234567router.GET("/", index)func index(c *gin.Context) &#123; c.JSON(200, gin.H&#123; "msg": "hello gin", &#125;)&#125; 路由分离为了更好的管理路由，最好将路由和控制器分开不同的文件 在根目录下新建router.go 1234567891011121314package ginimport ( "github.com/gin-gonic/gin" "os" "path/filepath")func initRouter() *gin.Engine &#123; //路由 router := gin.Default() router.GET("/", index) return router&#125; 在main方法中进行初始化 1234func main() &#123; router := initRouter() router.Run(":8080")&#125; 此时目录结构如下 12345--src --gin --gin.go #用于存放控制器 --router.go #用于存放路由 --main.go 路由组一些情况下，我们会有统一前缀的 url 的需求，典型的如 Api 接口版本号 /v1/something。Gin 可以使用 Group 方法统一归类到路由组中 12345678910111213141516171819func main() &#123; router := gin.Default() // /v1/login 就会匹配到这个组 v1 := router.Group("/v1") &#123; v1.POST("/login", loginEndpoint) v1.POST("/submit", submitEndpoint) v1.POST("/read", readEndpoint) &#125; // 不用花括号包起来也是可以的。上面那种只是看起来会统一一点。看你个人喜好 v2 := router.Group("/v2") v2.POST("/login", loginEndpoint) v2.POST("/submit", submitEndpoint) v2.POST("/read", readEndpoint) router.Run(":8080")&#125; 异步处理goroutine 机制可以方便地实现异步处理 123456789101112131415161718192021222324func main() &#123; r := gin.Default() //1. 异步 r.GET("/long_async", func(c *gin.Context) &#123; // goroutine 中只能使用只读的上下文 c.Copy() cCp := c.Copy() go func() &#123; time.Sleep(5 * time.Second) // 注意使用只读上下文 log.Println("Done! in path " + cCp.Request.URL.Path) &#125;() &#125;) //2. 同步 r.GET("/long_sync", func(c *gin.Context) &#123; time.Sleep(5 * time.Second) // 注意可以使用原始上下文 log.Println("Done! in path " + c.Request.URL.Path) &#125;) // Listen and serve on 0.0.0.0:8080 r.Run(":8080")&#125; 接收参数接收GET参数访问链接： http://localhost:8080/user?firstname=jian&amp;lastname=chen 路由 1router.GET("/user", hello) 控制器 (这里用的接收方法是Query) 12345func hello(c *gin.Context) &#123; firstname := c.DefaultQuery("firstname", "Guest") //设置默认参数值 lastname := c.Query("lastname") //获取参数值,c.Request.URL.Query().Get("lastname")的缩写 c.String(http.StatusOK, "Hello %s %s", firstname, lastname)&#125; 或者 访问链接：http://localhost:8080/user/jian/eat 路由 （参数名用:号标记） 1router.GET("/user/:name/:action", user) 或者 1router.GET("/user/:name/*action", user) 上面这个写法将会匹配/user/:name/开头的所有路由 控制器 (这里的接收方法是Param) 123456func user(c *gin.Context) &#123; name := c.Param("name") action := c.Param("action") message := name + " is " + action c.String(http.StatusOK, message)&#125; 接收POST参数访问链接：http://localhost:8080/post 路由 1router.POST("/post", post) 控制器 12345func post(c *gin.Context) &#123; name := c.PostForm("name") age := c.PostForm("age") fmt.Printf("name: %s, age: %s;", name, age)&#125; 文件上传单文件上传路由 1router.POST("/upload", upload) 控制器 123456func upload(c *gin.Context) &#123; file, _ := c.FormFile("file") //表单的文件name="file" //文件上传路径和文件名 c.SaveUploadedFile(file, "./upload/"+file.Filename) c.String(http.StatusOK, fmt.Sprintf("'%s' uploaded!", file.Filename))&#125; 多文件上传注意多文件上传表单&lt;form&gt;标签需要注明属性enctype=&quot;multipart/form-data&quot; method=&quot;post&quot;，&lt;input&gt;标签的name属性值必须相同，例如全部为name=&quot;file&quot; 路由 1router.POST("/multiupload", multiupload) 控制器 123456789101112131415161718192021222324252627func multiupload(c *gin.Context) &#123; // 文件上传大小限制 8 MB,在路由注册时设定 //router.MaxMultipartMemory = 8 &lt;&lt; 20 formdata := c.Request.MultipartForm files := formdata.File["file"] //表单的文件name="file" for i, _ := range files &#123; file, err := files[i].Open() defer file.Close() if err != nil &#123; c.String(http.StatusBadRequest, fmt.Sprintf("get file err: %s", err.Error())) return &#125; //文件上传路径和文件名 out, err := os.Create("./upload/" + files[i].Filename) defer out.Close() if err != nil &#123; c.String(http.StatusBadRequest, fmt.Sprintf("upload err: %s", err.Error())) return &#125; _, err = io.Copy(out, file) if err != nil &#123; c.String(http.StatusBadRequest, fmt.Sprintf("save file err: %s", err.Error())) return &#125; c.String(http.StatusOK, "upload successful") &#125;&#125; 视图模板 目录结构 在根目录下新建templates文件夹用于存放html页面，为了便于管理在templates目录下再创建一个index文件夹存放与index控制器相关的页面，在index目录下新建index.html文件 123456789101112&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt; &#123;&#123;.title&#125;&#125; &lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 此时目录结构如下 1234567- src --gin --main.go --router.go --templates --index --index.html 加载视图在初始化路由的位置加载所有视图模板，其中**表示各个控制器或路由组对应的视图目录，*表示该目录下所有文件 1234router := gin.Default()//加载模板router.LoadHTMLGlob(filepath.Join(os.Getenv("GOPATH"), "./src/gin/templates/**/*"))router.GET("/", index) 控制器绑定视图12345func index(c *gin.Context) &#123; c.HTML(http.StatusOK, "index.html", gin.H&#123; "title": "Main website", &#125;)&#125; 静态文件网页开发离不开css和图片等静态资源文件，我们必须设置好路径才能正确访问，例如我的目录结构为(缩进表示二级目录) 12345678910--src --gin --static --css --index.css --templates --index --index.html --router.go --main.go 如果index.html文件需要引入index.css文件，则在路由申请的地方声明 1234//加载模板router.LoadHTMLGlob(filepath.Join(os.Getenv("GOPATH"), "./src/gin/templates/**/*"))//加载静态文件router.Static("/static", filepath.Join(os.Getenv("GOPATH"), "./src/gin/static")) 然后index.css文件中这样调用就可以了，其他静态资源用法类似 1&lt;link rel="stylesheet" href="/static/css/index.css"&gt; 参数传递在控制器传递参数 123c.HTML(http.StatusOK, "index.html", gin.H&#123; "title": "Main website",&#125;) 在视图渲染参数 123&lt;h1&gt; &#123;&#123;.title&#125;&#125;&lt;/h1&gt; 重定向1234r.GET("/redirect", func(c *gin.Context) &#123; //支持内部和外部的重定向 c.Redirect(http.StatusMovedPermanently, "http://www.baidu.com/")&#125;) 中间件使用中间件 12router := gin.Default()router.Use(middleware.IPLimit()) //使用自定义中间件：IP验证 中间件实现 1234567891011121314151617181920212223242526272829303132package middlewareimport ( "core" "github.com/gin-gonic/gin" "net/http" "strings")//访问ip限制func IPLimit() gin.HandlerFunc &#123; return func(c *gin.Context) &#123; ip := c.ClientIP() ipList := strings.Split(core.Config["allow_ip"], "|") flag := false for i := 0; i &lt; len(ipList); i++ &#123; if ip == ipList[i] &#123; flag = true break &#125; &#125; if !flag &#123; c.Abort() c.JSON(http.StatusUnauthorized, gin.H&#123; "code": 0, "msg": "IP " + ip + " 没有访问权限", "data": nil&#125;) return // return也是可以省略的，执行了abort操作，会内置在中间件defer前，return，写出来也只是解答为什么Abort()之后，还能执行返回JSON数据 &#125; &#125;&#125; 数据绑定和验证使用 c.ShouldBind方法，可以将参数自动绑定到 struct，该方法是会检查 Url 查询字符串和 POST 的数据，而且会根据 content-type类型，优先匹配JSON或者 XML,之后才是 Form。数据绑定可以用来做数据验证，例如 路由 1router.POST(&quot;/binding&quot;, binding) 控制器 1234567891011121314151617181920//数据结构体，username为表单字段，required表示必须参数，可选的话binding留空即可type Login struct &#123; Username string `form:"username" binding:"required"` Password string `form:"password" binding:"required"`&#125;//控制器func binding(c *gin.Context) &#123; var form Login // 验证数据并绑定 if err := c.ShouldBind(&amp;form); err == nil &#123; if form.Username == "manu" &amp;&amp; form.Password == "123" &#123; c.JSON(http.StatusOK, gin.H&#123;"msg": "Login successfully"&#125;) &#125; else &#123; c.JSON(http.StatusUnauthorized, gin.H&#123;"msg": "username or password error"&#125;) &#125; &#125; else &#123; c.JSON(http.StatusBadRequest, gin.H&#123;"error": err.Error()&#125;) &#125;&#125; 当没有接收到参数时返回 123&#123; "error": "Key: 'Login.Username' Error:Field validation for 'Username' failed on the 'required' tag"&#125; 当参数错误时返回 123&#123; "msg": "username or password error"&#125; 当接收到参数且正确时放回 123&#123; "msg": "Login successfully"&#125; 不用在接收参数时用if逐个进行验证，除了binding:&quot;required&quot;属性外还有更多的校验规则，可以参考 https://godoc.org/gopkg.in/go-playground/validator.v8#hdr-Baked_In_Validators_and_Tags 日志自带日志Gin日志默认只在控制台显示，如果要写入文件需要在main方法中声明 1234gin.DisableConsoleColor() //关掉控制台颜色,可省略f, _ := os.Create("gin.log") //日志文件//gin.DefaultWriter = io.MultiWriter(f) //将日志写入文件gin.DefaultWriter = io.MultiWriter(f, os.Stdout) //将日志写入文件同时在控制台输出 Logrus 日志库Gin自带的日志系统只支持简单的功能，需要更强大的功能还需要用到第三方日志库，这里选择github上面star最多的Logrus。 下载1go get github.com/sirupsen/logrus 使用1234567891011121314151617package mainimport ( log "github.com/Sirupsen/logrus")func main() &#123; log.Trace("Something very low level.") log.Debug("Useful debugging information.") log.Info("Something noteworthy happened!") log.Warn("You should probably take a look at this.") log.Error("Something failed but I'm not quitting.") // Calls os.Exit(1) after logging log.Fatal("Bye.") // Calls panic() after logging log.Panic("I'm bailing.")&#125; 数据库Gin框架没有自带的数据库封装，导入的数据库驱动由开发使用的数据库类型决定,例如开发使用mysql就直接import _ &quot;github.com/go-sql-driver/mysql&quot;；但是访问数据库都是直接用写 sql，取出结果然后自己拼成对象，使用上面不是很方便，可读性也不好。这里使用目前github上star数量最多的https://github.com/jinzhu/gorm gorm的详细教程参考http://gorm.book.jasperxu.com/models.html#md 下载1go get -u github.com/jinzhu/gorm 连接mysql12345678910111213package ginimport ( "github.com/jinzhu/gorm")func Index() &#123; db, err := gorm.Open("mysql", "root:root@(127.0.0.1:3306)/test?charset=utf8&amp;parseTime=True&amp;loc=Local") if err != nil &#123; panic(err) &#125; defer db.Close()&#125; 数据表1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950import ( "github.com/jinzhu/gorm" _ "github.com/jinzhu/gorm/dialects/mysql" "time")//定义数据表模型type User struct &#123; Id uint `gorm:"primary_key;AUTO_INCREMENT"` // 自增主键 Name string `gorm:"size:255"` // string默认长度为255, 使用这种tag重设。 Address string `gorm:"not null;unique"` // 设置字段为非空并唯一 Addtime time.Time `gorm:"default:'2019-03-11 13:19:40'"` //默认值&#125;func Index() &#123; //连接数据库 db, err := gorm.Open("mysql", "root:root@(127.0.0.1:3306)/test?charset=utf8&amp;parseTime=True&amp;loc=Local") if err != nil &#123; panic(err) &#125; //关闭数据库 defer db.Close() //设置默认表名前缀 gorm.DefaultTableNameHandler = func(db *gorm.DB, defaultTableName string) string &#123; return "test_" + defaultTableName &#125; //创建表 if !db.HasTable(&amp;User&#123;&#125;) &#123; //检查表是否存在 if err := db.Set("gorm:table_options", "ENGINE=InnoDB DEFAULT CHARSET=utf8").CreateTable(&amp;User&#123;&#125;).Error; err != nil &#123; panic(err) &#125; &#125; // 删除表users db.DropTable("test_users") // 修改模型`User`的"addtime"列类型 db.Model(&amp;User&#123;&#125;).ModifyColumn("addtime", "text") // 删除模型`User`的addtime列 db.Model(&amp;User&#123;&#125;).DropColumn("addtime") // 为`name`列添加索引`idx_user_name` db.Model(&amp;User&#123;&#125;).AddIndex("idx_user_name", "name") // 删除索引 db.Model(&amp;User&#123;&#125;).RemoveIndex("idx_user_name")&#125; 添加记录12345//添加记录user := User&#123;Name: "jian", Address: "1234", Addtime: time.Now()&#125;if err := db.Create(&amp;user).Error; err != nil &#123;panic(err)&#125; 查询数据无条件查询123456789101112131415// 获取第一条记录，按主键排序db.First(&amp;user)// SELECT * FROM users ORDER BY id LIMIT 1;// 获取最后一条记录，按主键排序db.Last(&amp;user)// SELECT * FROM users ORDER BY id DESC LIMIT 1;// 获取所有记录db.Find(&amp;users)// SELECT * FROM users;// 使用主键获取记录db.First(&amp;user, 10)// SELECT * FROM users WHERE id = 10; Where查询条件123456789101112131415161718192021222324252627282930313233343536373839404142user := User&#123;&#125;// 获取第一个匹配记录db.Where("name = ?", "jinzhu").First(&amp;user)fmt.Println(user.Name) //读取数据// SELECT * FROM users WHERE name = 'jinzhu' limit 1;// 获取最后一条记录，按主键排序db.Last(&amp;user)// SELECT * FROM users ORDER BY id DESC LIMIT 1;// 获取所有匹配记录db.Where("name = ?", "jinzhu").Find(&amp;users)// SELECT * FROM users WHERE name = 'jinzhu';db.Where("name &lt;&gt; ?", "jinzhu").Find(&amp;users)// INdb.Where("name in (?)", []string&#123;"jinzhu", "jinzhu 2"&#125;).Find(&amp;users)// LIKEdb.Where("name LIKE ?", "%jin%").Find(&amp;users)// ANDdb.Where("name = ? AND age &gt;= ?", "jinzhu", "22").Find(&amp;users)// Timedb.Where("updated_at &gt; ?", lastWeek).Find(&amp;users)db.Where("created_at BETWEEN ? AND ?", lastWeek, today).Find(&amp;users)// Structdb.Where(&amp;User&#123;Name: "jinzhu", Age: 20&#125;).First(&amp;user)//// SELECT * FROM users WHERE name = "jinzhu" AND age = 20 LIMIT 1;// Mapdb.Where(map[string]interface&#123;&#125;&#123;"name": "jinzhu", "age": 20&#125;).Find(&amp;users)// SELECT * FROM users WHERE name = "jinzhu" AND age = 20;// 主键的Slicedb.Where([]int64&#123;20, 21, 22&#125;).Find(&amp;users)// SELECT * FROM users WHERE id IN (20, 21, 22); Not条件查询123456789101112131415161718192021db.Not("name", "jinzhu").First(&amp;user)// SELECT * FROM users WHERE name &lt;&gt; "jinzhu" LIMIT 1;// Not Indb.Not("name", []string&#123;"jinzhu", "jinzhu 2"&#125;).Find(&amp;users)// SELECT * FROM users WHERE name NOT IN ("jinzhu", "jinzhu 2");// Not In slice of primary keysdb.Not([]int64&#123;1,2,3&#125;).First(&amp;user)// SELECT * FROM users WHERE id NOT IN (1,2,3);db.Not([]int64&#123;&#125;).First(&amp;user)// SELECT * FROM users;// Plain SQLdb.Not("name = ?", "jinzhu").First(&amp;user)// SELECT * FROM users WHERE NOT(name = "jinzhu");// Structdb.Not(User&#123;Name: "jinzhu"&#125;).First(&amp;user)// SELECT * FROM users WHERE name &lt;&gt; "jinzhu"; Or条件查询123456789db.Where("role = ?", "admin").Or("role = ?", "super_admin").Find(&amp;users)// SELECT * FROM users WHERE role = 'admin' OR role = 'super_admin';// Structdb.Where("name = 'jinzhu'").Or(User&#123;Name: "jinzhu 2"&#125;).Find(&amp;users)// SELECT * FROM users WHERE name = 'jinzhu' OR name = 'jinzhu 2';// Mapdb.Where("name = 'jinzhu'").Or(map[string]interface&#123;&#125;&#123;"name": "jinzhu 2"&#125;).Find(&amp;users) 指定字段和表1234db.Select("name, age").Find(&amp;users)// SELECT name, age FROM users;db.Table("users").Select("COALESCE(age,?)", 42).Rows()// SELECT COALESCE(age,'42') FROM users; Order条件查询12db.Order("age desc, name").Find(&amp;users)// SELECT * FROM users ORDER BY age desc, name; Limit条件查询12db.Limit(3).Find(&amp;users)// SELECT * FROM users LIMIT 3; Offset条件查询指定在开始返回记录之前要跳过的记录数 12db.Offset(3).Find(&amp;users)// SELECT * FROM users OFFSET 3; Count条件查询12db.Where("name = ?", "jinzhu").Or("name = ?", "jinzhu 2").Find(&amp;users).Count(&amp;count)// SELECT * from USERS WHERE name = 'jinzhu' OR name = 'jinzhu 2'; (users) 多条件查询12db.Where("role = ?", "admin").Or("role = ?", "super_admin").Not("name = ?", "jinzhu").Find(&amp;users)db.Where("name &lt;&gt; ?","jinzhu").Where("age &gt;= ? and role &lt;&gt; ?",20,"admin").Find(&amp;users) 更新数据123456789 // 使用组合条件更新单个属性db.Model(&amp;user).Where("active = ?", true).Update("name", "hello")// UPDATE users SET name='hello', updated_at='2013-11-17 21:34:10' WHERE id=111 AND active=true;// 使用`map`更新多个属性，只会更新这些更改的字段db.Model(&amp;user).Updates(map[string]interface&#123;&#125;&#123;"name": "hello", "age": 18, "actived": false&#125;)// 使用`struct`更新多个属性，只会更新这些更改的和非空白字段db.Model(&amp;user).Updates(User&#123;Name: "hello", Age: 18&#125;) 删除数据12345db.Where("email LIKE ?", "%jinzhu%").Delete(Email&#123;&#125;)// DELETE from emails where email LIKE "%jinhu%";db.Delete(Email&#123;&#125;, "email LIKE ?", "%jinzhu%")// DELETE from emails where email LIKE "%jinhu%"; 执行原生SQL语句Scan()是将结果扫描到另一个结构中。 1234567891011121314db.Exec("DROP TABLE users;")db.Exec("UPDATE orders SET shipped_at=? WHERE id IN (?)", time.Now, []int64&#123;11,22,33&#125;)db.Raw("SELECT name, age FROM users WHERE name = ?", 3).Scan(&amp;result)row := db.Table("users").Where("name = ?", "jinzhu").Select("name, age").Row() // (*sql.Row)row.Scan(&amp;name, &amp;age)rows, err := db.Model(&amp;User&#123;&#125;).Where("name = ?", "jinzhu").Select("name, age, email").Rows() // (*sql.Rows, error)defer rows.Close()for rows.Next() &#123; ... rows.Scan(&amp;name, &amp;age, &amp;email) ...&#125; 连接池12db.DB().SetMaxIdleConns(10)db.DB().SetMaxOpenConns(100) 锁行注意：加行锁的表必须是InnoDB并且要加索引，否则无效；语句必须在事务里面，必须提交或回滚 123// 为Select语句添加扩展SQL选项db.Set("gorm:query_option", "FOR UPDATE").First(&amp;user, 10)// SELECT * FROM users WHERE id = 10 FOR UPDATE; 锁表12db.Exec("LOCK TABLES real_table WRITE, insert_table WRITE;") //锁定real_table和insert_table表UNLOCK TABLES; //解锁 日志123456789101112// 启用Logger，显示详细日志db.LogMode(true)// 禁用日志记录器，不显示任何日志db.LogMode(false)// 调试单个操作，显示此操作的详细日志db.Debug().Where("name = ?", "jinzhu").First(&amp;User&#123;&#125;)//自定义日志db.SetLogger(gorm.Logger&#123;revel.TRACE&#125;)db.SetLogger(log.New(os.Stdout, "\r\n", 0)) 事务12345678910111213// 开始事务tx := db.Begin()// 注意，一旦你在一个事务中，使用tx作为数据库句柄，而不再是上面的db// 在事务中做一些数据库操作（从这一点使用'tx'，而不是'db'）tx.Create(...)// ...// 发生错误时回滚事务tx.Rollback()// 提交事务tx.Commit()]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>Gin</tag>
        <tag>gorm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP生成助记词和BTC、ETH、LTC地址]]></title>
    <url>%2F2020%2F12%2F14%2F31.PHP%E7%94%9F%E6%88%90%E5%8A%A9%E8%AE%B0%E8%AF%8D%E5%92%8CBTC%E3%80%81ETH%E3%80%81LTC%E5%9C%B0%E5%9D%80%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚个人博客：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 安装扩展12composer require bitwasp/bitcoin # BTC库，需要运行在64位的php7.0+上composer require web3p/ethereum-util # ETH库 注意：使用bitwasp库需要安装PHP的gmp扩展，不然会报错Call to undefined function gmp_init()，LNMP环境安装gmp扩展可以看我的另一篇文章《LNMP1.6安装gmp扩展》 生成助记词123456789101112131415161718192021222324&lt;?phprequire_once './vendor/autoload.php';use BitWasp\Bitcoin\Address\PayToPubKeyHashAddress;use BitWasp\Bitcoin\Crypto\Random\Random;use BitWasp\Bitcoin\Key\Factory\HierarchicalKeyFactory;use BitWasp\Bitcoin\Mnemonic\Bip39\Bip39Mnemonic;use BitWasp\Bitcoin\Mnemonic\Bip39\Bip39SeedGenerator;use BitWasp\Bitcoin\Mnemonic\MnemonicFactory; //生成助记词function createMnemonicWord()&#123; // Bip39 //$math = Bitcoin::getMath(); //$network = Bitcoin::getNetwork(); $random = new Random(); // 生成随机数(initial entropy) $entropy = $random-&gt;bytes(Bip39Mnemonic::MIN_ENTROPY_BYTE_LEN); $bip39 = MnemonicFactory::bip39(); // 通过随机数生成助记词 $mnemonic = $bip39-&gt;entropyToMnemonic($entropy); // 输出助记词 echo $mnemonic; &#125; 创建BTC地址123456789101112function createBtcAddress($mnemonicWord,$offset)&#123; $seedGenerator = new Bip39SeedGenerator(); // 通过助记词生成种子，传入可选加密串'hello' $seed = $seedGenerator-&gt;getSeed($mnemonicWord); echo "seed: " . $seed-&gt;getHex() . PHP_EOL; //种子 $hdFactory = new HierarchicalKeyFactory(); $master = $hdFactory-&gt;fromEntropy($seed); $hardened = $master-&gt;derivePath("44/0'/0'/0/".$offset); //44的含义：https://github.com/bitcoin/bips echo 'WIF: ' . $hardened-&gt;getPrivateKey()-&gt;toWif(); //私钥 $address = new PayToPubKeyHashAddress($hardened-&gt;getPublicKey()-&gt;getPubKeyHash()); return $address-&gt;getAddress(); &#125; 参数说明：mnemonicWord（带空格的字符串）是上一步生成的助记词；offset（整数）是同一个助记词生成的第几个地址，相同助记词传入相同数字会得到同一个地址 创建ETH地址123456789101112131415161718192021222324252627use Web3p\EthereumUtil\Util; //头部要额外引入这个类// Bip39$math = Bitcoin::getMath();$network = Bitcoin::getNetwork();$random = new Random();// 生成随机数(initial entropy)$entropy = $random-&gt;bytes(Bip39Mnemonic::MIN_ENTROPY_BYTE_LEN);$bip39 = MnemonicFactory::bip39();// 通过随机数生成助记词$mnemonic = $bip39-&gt;entropyToMnemonic($entropy);echo "mnemonic: " . $mnemonic.PHP_EOL.PHP_EOL;// 助记词$seedGenerator = new Bip39SeedGenerator();// 通过助记词生成种子，传入可选加密串'hello'或其他，默认空字符串$seed = $seedGenerator-&gt;getSeed($mnemonic);echo "seed: " . $seed-&gt;getHex() . PHP_EOL;$hdFactory = new HierarchicalKeyFactory();$master = $hdFactory-&gt;fromEntropy($seed);$util = new Util();// 设置路径account$hardened = $master-&gt;derivePath("44'/60'/0'/0/0");echo " - m/44'/60'/0'/0/0 " .PHP_EOL;echo " public key: " . $hardened-&gt;getPublicKey()-&gt;getHex().PHP_EOL;echo " private key: " . $hardened-&gt;getPrivateKey()-&gt;getHex().PHP_EOL;// 可以导入到imtoken使用的私钥echo " address: " . $util-&gt;publicKeyToAddress($util-&gt;privateKeyToPublicKey($hardened-&gt;getPrivateKey()-&gt;getHex())) . PHP_EOL;// 私钥导入imtoken后一样的地址 创建LTC地址1234567891011121314151617181920212223242526272829303132333435363738&lt;?phprequire_once './vendor/autoload.php';use BitWasp\Bitcoin\Address\PayToPubKeyHashAddress;use BitWasp\Bitcoin\Bitcoin;use BitWasp\Bitcoin\Crypto\Random\Random;use BitWasp\Bitcoin\Key\Factory\HierarchicalKeyFactory;use BitWasp\Bitcoin\Mnemonic\Bip39\Bip39Mnemonic;use BitWasp\Bitcoin\Mnemonic\Bip39\Bip39SeedGenerator;use BitWasp\Bitcoin\Mnemonic\MnemonicFactory;use BitWasp\Bitcoin\Network\NetworkFactory;// Bip39$math = Bitcoin::getMath();// 设置莱特币网络$network = NetworkFactory::litecoin();$random = new Random();// 生成随机数(initial entropy)$entropy = $random-&gt;bytes(Bip39Mnemonic::MIN_ENTROPY_BYTE_LEN);$bip39 = MnemonicFactory::bip39();// 通过随机数生成助记词$mnemonic = $bip39-&gt;entropyToMnemonic($entropy);//$mnemonic = 'security hurdle lift acoustic skate recall hotel elegant amateur hidden escape slow';echo "mnemonic: " . $mnemonic.PHP_EOL.PHP_EOL;// 助记词$seedGenerator = new Bip39SeedGenerator();// 通过助记词生成种子，传入可选加密串'hello'$seed = $seedGenerator-&gt;getSeed($mnemonic);echo "seed: " . $seed-&gt;getHex() . PHP_EOL;$hdFactory = new HierarchicalKeyFactory();$master = $hdFactory-&gt;fromEntropy($seed);$hardened = $master-&gt;derivePath("44'/2'/0'/0/0");echo 'WIF ' . $hardened-&gt;getPrivateKey()-&gt;toWif($network);echo PHP_EOL;$address = new PayToPubKeyHashAddress($hardened-&gt;getPublicKey()-&gt;getPubKeyHash());echo 'address ' . $address-&gt;getAddress($network);echo PHP_EOL; 参考文章 https://www.cnblogs.com/ygcool/p/11714335.html https://iancoleman.io/bip39/ https://github.com/bitcoin/bips]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>助记词</tag>
        <tag>BTC地址</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows下以太坊私有链搭建]]></title>
    <url>%2F2020%2F12%2F14%2F3.Windows%E4%B8%8B%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E6%9C%89%E9%93%BE%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚博客地址：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com Geth的下载安装本文在64位windows10环境下搭建，其他系统或许会略有不同。首先在官方网站https://geth.ethereum.org/downloads/ ，国内镜像http://ethfans.org/wikis/Ethereum-Geth-Mirror下载geth的windows端，下载完成后一直点下一步安装即可。 准备创世区块文件在任何一个目录下创建 privatechain 文件夹，这里在D盘下创建。然后在privatechain 文件夹中创建data文件夹和genesis.json文件，打开genesis.json文件将以下代码复制到文件中并保存 123456789101112&#123;&quot;nonce&quot;: &quot;0x0000000000000042&quot;,&quot;mixhash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,&quot;difficulty&quot;: &quot;0x400&quot;,&quot;alloc&quot;: &#123;&#125;,&quot;coinbase&quot;: &quot;0x3333333333333333333333333333333333333333&quot;,&quot;timestamp&quot;: &quot;0x0&quot;,&quot;parentHash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,&quot;extraData&quot;: &quot;0x&quot;,&quot;gasLimit&quot;: &quot;0x8000000&quot;,&quot;config&quot;: &#123;&#125;&#125; 初始化创世区块打开cmd，进入到privatechain目录下然后执行下面的命令即可完成创世区块的初始化 1234567891011$ geth --datadir data init genesis.json INFO [10-24|14:12:56] Maximum peer count ETH=25 LES=0 total=25INFO [10-24|14:12:56] Allocated cache and file handles database=D:\\Ethereum\\data\\geth\\chaindata cache=16 handles=16INFO [10-24|14:12:56] Writing custom genesis blockINFO [10-24|14:12:56] Persisted trie from memory database nodes=0 size=0.00B time=0s gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00BINFO [10-24|14:12:56] Successfully wrote genesis state database=chaindata hash=6231b0 …a0300bINFO [10-24|14:12:56] Allocated cache and file handles database=D:\\Ethereum\\data\\geth\\lightchaindata cache=16 handles=16INFO [10-24|14:12:56] Writing custom genesis blockINFO [10-24|14:12:56] Persisted trie from memory database nodes=0 size=0.00B time=0s gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00BINFO [10-24|14:12:56] Successfully wrote genesis state database=lightchaindata hash=6231b0…a0300b 启动私有链打开cmd，进入到privatechain目录下然后执行下面的命令即可启动私有链，命令中的ip地址请自行换成你本机的ip，–datadir换成自己的私有链所在的目录 1$ geth --port 3000 --networkid 15 --maxpeers=3 --rpc --rpcport 8545 --rpcaddr 127.0.0.1 --rpccorsdomain &quot;*&quot; --rpcapi=&quot;db,eth,web3,personal,admin,txpool,net&quot; --gcmode=archive console 得到以下信息，表示已经启动私有链并进入geth console 123456789101112131415161718192021222324INFO [10-24|14:16:13] Maximum peer count ETH=3 LES=0 total=3INFO [10-24|14:16:13] Starting peer-to-peer node instance=Geth/v1.8.3-stable-329ac18e/windows-amd64/go1.10INFO [10-24|14:16:13] Allocated cache and file handles database=D:\\Ethereum\\data\\geth\\chaindata cache=768 handles=1024WARN [10-24|14:16:13] Upgrading database to use lookup entriesINFO [10-24|14:16:13] Database deduplication successful deduped=0INFO [10-24|14:16:13] Initialised chain configuration config=&quot;&#123;ChainID: &lt;nil&gt; Homestead: &lt;nil&gt; DAO: &lt;nil&gt; DAOSupport: false EIP150: &lt;nil&gt; EIP155: &lt;nil&gt; EIP158: &lt;nil&gt; Byzantium: &lt;nil&gt; Constantinople: &lt;nil&gt; Engine: unknown&#125;&quot;INFO [10-24|14:16:13] Disk storage enabled for ethash caches dir=D:\\Ethereum\\data\\geth\\ethash count=3INFO [10-24|14:16:13] Disk storage enabled for ethash DAGs dir=C:\\Users\\Jian\\AppData\\Ethash count=2INFO [10-24|14:16:13] Initialising Ethereum protocol versions=&quot;[63 62]&quot; network=15INFO [10-24|14:16:13] Loaded most recent local header number=0 hash=6231b0…a0300b td=1024INFO [10-24|14:16:13] Loaded most recent local full block number=0 hash=6231b0…a0300b td=1024INFO [10-24|14:16:13] Loaded most recent local fast block number=0 hash=6231b0…a0300b td=1024INFO [10-24|14:16:13] Regenerated local transaction journal transactions=0 accounts=0INFO [10-24|14:16:13] Starting P2P networkingINFO [10-24|14:16:16] UDP listener up self=enode://9ab0834740439ca962b4e2b43d85f555cff7585c0b4bf3a076f16a95ad6037beab7f8b9f2b9691c60c128cf212f38fe469930016cde71574b84733457ed45813@[::]:3000INFO [10-24|14:16:16] RLPx listener up self=enode://9ab0834740439ca962b4e2b43d85f555cff7585c0b4bf3a076f16a95ad6037beab7f8b9f2b9691c60c128cf212f38fe469930016cde71574b84733457ed45813@[::]:3000INFO [10-24|14:16:16] IPC endpoint opened url=\\\\.\\pipe\\geth.ipcINFO [10-24|14:16:16] HTTP endpoint opened url=http://192.168.1.168:8545 cors=* vhosts=localhostWelcome to the Geth JavaScript console!instance: Geth/v1.8.3-stable-329ac18e/windows-amd64/go1.10 modules: admin:1.0 debug:1.0 eth:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0&gt; 启动私有链之后就可以在控制台中进行账号操作和挖矿等相关操作了 ，启动命令加上 –gcmode archive 表示将区块信息及时保存，不然重启geth后区块数据可能会丢失，还原到上次启动之前的状态。 注意：如果是云服务器，要提供rpc服务给其他电脑使用的话，rpcaddr要填写云服务器的内网地址。 账号和挖矿等操作请参见我的另一篇文章：Ubuntu以太坊私有链搭建 图形化客户端除了使用命令行操作，以太坊还提供了图形界面Mist和Ethereum Wallet，两者功能上相同，下载其中一个即可 下载地址：https://github.com/ethereum/mist/releases/ ，windows建议下载.zip免安装压缩版，解压就可以用了。exe后缀的启动程序时好像会一直卡在“Downloading new node”的启动页面。 国内无法访问的话可以到以太坊爱好者的网站下载：http://ethfans.org/wikis/Wallet-Mirror 安装完成打开程序，第一次打开需要一段时间。客户端默认是同步公链区块的，所以想要在图形界面进入私有链，必须先在命令行启动私有链再打开客户端。进入私有链客户端启动界面的右上角会有PRIVATE-NET标记，进入程序后中间也有Private-net的标记。 如果要连接远程的服务器，那需要在命令行填写参数的方式启动，进入到Mist和Ethereum Wallet的安装目录，执行下面的命令即可 1./mist.exe --rpc http://Your_Server_IP:8545]]></content>
      <categories>
        <category>以太坊</category>
      </categories>
      <tags>
        <tag>以太坊</tag>
        <tag>私有链</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EOS主网节点搭建]]></title>
    <url>%2F2020%2F12%2F14%2F30.EOS%E4%B8%BB%E7%BD%91%E8%8A%82%E7%82%B9%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚个人博客：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 环境搭建去github上下载源码，最好是2.0以后的版本，不然会有很多问题 1git clone https://github.com/EOSIO/eos -b v2.0.3 --recursive 编译12cd eos/scripts/./eosio_build.sh 这个过程需要几个小时的时间，完成会出现下面的内容 1234567891011121314151617181920212223242526[100%] Built target print_floats _______ _______ _______ _________ _______ ( ____ \( ___ )( ____ \\__ __/( ___ ) | ( \/| ( ) || ( \/ ) ( | ( ) | | (__ | | | || (_____ | | | | | | | __) | | | |(_____ ) | | | | | | | ( | | | | ) | | | | | | | | (____/\| (___) |/\____) |___) (___| (___) | (_______/(_______)\_______)\_______/(_______) EOSIO has been successfully built. 00:38:51 To verify your installation run the following commands: export PATH=$&#123;HOME&#125;/opt/mongodb/bin:$PATH /home/jian/opt/mongodb/bin/mongod -f /home/jian/opt/mongodb/mongod.conf &amp; cd /home/jian/eos/build; make test For more information: EOSIO website: https://eos.io EOSIO Telegram channel @ https://t.me/EOSProject EOSIO resources: https://eos.io/resources/ EOSIO Stack Exchange: https://eosio.stackexchange.com EOSIO wiki: https://github.com/EOSIO/eos/wiki 安装1./eosio_install.sh 执行之后所有可执行程序会在/root/eosio/2.0/bin目录下 设置软连接12ln -fs /root/eosio/2.0/bin/nodeos /usr/local/bin/nodeosln -fs /root/eosio/2.0/bin/cleos /usr/local/bin/cleos 查看版本12nodeos -vv1.8.11 同步区块EOS主网区块数据很大，要同步所有区块的数据需要十几天以上，这里分别介绍同步全节点和快照(snapshots)同步的具体步骤 全节点同步准备工作准备至少1TB的硬盘，最好SSD 编辑配置文件 注意：配置文件中的filter-on = *参数打开的话可能会由于内存数据太大导致节点程序退出，所以最好过滤其他数据，只保留指定账号的数据，格式是filter-on = eosio.token:transfer:，把eosio.token换成你的账号名即可，注意后面有个冒号。 可以编辑默认的配置文件 vi ~/.local/share/eosio/nodeos/config/config.ini,也可以自定义配置文件目录，这里我自定义在/root目录下，将下面的配置复制保存producer-name = !!!!YOUR_BP_NAME!!!!!!!! #signature-provider = YOUR_BLOCK_SIGN_PUB_KEY=KEY:YOUR_BLOCK_SIGN_PRIV_KEY agent-name = AgentName #blocks-dir = &quot;blocks&quot; chain-state-db-size-mb = 65536 reversible-blocks-db-size-mb = 2048 contracts-console = false http-server-address = 0.0.0.0:8888 p2p-listen-endpoint = 0.0.0.0:9876 p2p-server-address = !!YOUR_ENDPOINT_IP_ADDRESS!!:9876 http-validate-host = false verbose-http-errors = true abi-serializer-max-time-ms = 2000 chain-threads = 8 http-threads = 6 access-control-allow-origin = * access-control-allow-headers = Origin, X-Requested-With, Content-Type, Accept # access-control-max-age = # access-control-allow-credentials = false # wasm-runtime = wabt wasm-runtime = eos-vm-jit eos-vm-oc-enable = true #produce-time-offset-us = 250000 last-block-time-offset-us = -300000 # Safely shut down node when free space remaining in the chain state database drops below this size (in MiB). (eosio::chain_plugin) chain-state-db-guard-size-mb = 128 # Safely shut down node when free space remaining in the reverseible blocks database drops below this size (in MiB). (eosio::chain_plugin) reversible-blocks-db-guard-size-mb = 2 p2p-max-nodes-per-host = 150 # actor-whitelist = # actor-blacklist = # contract-whitelist = # contract-blacklist = # filter-on = # SSL # Filename with https private key in PEM format. Required for https (eosio::http_plugin) # https-server-address = # Filename with the certificate chain to present on https connections. PEM format. Required for https. (eosio::http_plugin) # https-certificate-chain-file = # Filename with https private key in PEM format. Required for https (eosio::http_plugin) # https-private-key-file = allowed-connection = any max-clients = 150 connection-cleanup-period = 30 network-version-match = 0 sync-fetch-span = 2000 enable-stale-production = false pause-on-startup = false max-transaction-time = 30 max-irreversible-block-age = -1 txn-reference-block-lag = 0 plugin = eosio::chain_api_plugin plugin = eosio::history_plugin plugin = eosio::history_api_plugin plugin = eosio::chain_plugin filter-on = * #plugin = net_plugin #plugin = net_api_plugin #p2p-peer-address = #p2p-peer-address = #p2p-peer-address = #p2p-peer-address = 172.2.0.100:9876 #p2p-peer-address = 172.2.0.200:9876 #Other Pub BP nodes #p2p-peer-address = #p2p-peer-address =p2p-peer-address = bp.cryptolions.io:9876p2p-peer-address = p2p.mainnet.eospace.io:88p2p-peer-address = eu-west-nl.eosamsterdam.net:9876p2p-peer-address = p2p.mainnet.eosgermany.online:9876p2p-peer-address = 35.197.190.234:19878p2p-peer-address = mainnet.genereos.io:9876p2p-peer-address = mainnet.eospay.host:19876p2p-peer-address = 130.211.59.178:9876p2p-peer-address = 54.153.59.31:9999p2p-peer-address = 94.130.250.22:9806p2p-peer-address = peer.main.alohaeos.com:9876p2p-peer-address = peer.eosn.io:9876p2p-peer-address = prod.mainnet.eos.cybex.io:9888p2p-peer-address = p2p-1.eosnetwork.io:9876p2p-peer-address = p.jeda.one:3322p2p-peer-address = eosbattles.com:9877p2p-peer-address = 34.226.76.22:9876p2p-peer-address = mainnet.eosoasis.io:9876p2p-peer-address = node.eosflare.io:1883p2p-peer-address = mainnet.eoscalgary.io:5222p2p-peer-address = eos-p2p.worbli.io:33981p2p-peer-address = 18.188.38.175:9876p2p-peer-address = 18.221.255.38:9876p2p-peer-address = eos.staked.us:9870p2p-peer-address = peering.dutcheos.io:9876p2p-peer-address = 18.188.4.97:9876p2p-peer-address = 18.191.125.105:9876p2p-peer-address = boot.eostitan.com:9876p2p-peer-address = eosboot.chainrift.com:9876p2p-peer-address = dc1.eosemerge.io:9876p2p-peer-address = m.eosvibes.io:9876p2p-peer-address = node1.eosphere.io:9876p2p-peer-address = node2.eosphere.io:9876p2p-peer-address = 45.33.60.65:9820p2p-peer-address = peering.eosio.cr:1976p2p-peer-address = peering.eosio.cr:5418p2p-peer-address = 54.203.121.17:19866p2p-peer-address = eosnode.fi:9888p2p-peer-address = api.eosuk.io:12000p2p-peer-address = fullnode.eoslaomao.com:443p2p-peer-address = new.eoshenzhen.io:10034p2p-peer-address = peer.eosio.sg:9876p2p-peer-address = eos.nodepacific.com:9876p2p-peer-address = 18.234.6.119:80p2p-peer-address = eu1.eosdac.io:49876p2p-peer-address = br.eosrio.io:9876p2p-peer-address = p2p-public.hkeos.com:19875p2p-peer-address = node.eosmeso.io:9876p2p-peer-address = pub1.eostheworld.io:9876p2p-peer-address = 807534da.eosnodeone.io:19872p2p-peer-address = mainnet.eoseco.com:10010actor-blacklist = blacklistmee#https://eoscorearbitration.io/wp-content/uploads/2018/07/ECAF_Arbitrator_Order_2018-06-19-AO-001.pdfactor-blacklist = ge2dmmrqgeneactor-blacklist = gu2timbsgugeactor-blacklist = ge4tsmzvgegeactor-blacklist = gezdonzygageactor-blacklist = ha4tkobrgqgeactor-blacklist = ha4tamjtgugeactor-blacklist = gq4dkmzzhege#https://eoscorearbitration.io/wp-content/uploads/2018/07/ECAF_Arbitrator_Order_2018-06-22-AO-002.pdfactor-blacklist = gu2teobyg4geactor-blacklist = gq4demryhageactor-blacklist = q4dfv32fxfkxactor-blacklist = ktl2qk5h4boractor-blacklist = haydqnbtgeneactor-blacklist = g44dsojygygeactor-blacklist = guzdonzugmgeactor-blacklist = ha4doojzgygeactor-blacklist = gu4damztgygeactor-blacklist = haytanjtgigeactor-blacklist = exchangegdaxactor-blacklist = cmod44jlp14kactor-blacklist = 2fxfvlvkil4eactor-blacklist = yxbdknr3hcxtactor-blacklist = yqjltendhyjpactor-blacklist = pm241porzybuactor-blacklist = xkc2gnxfisweactor-blacklist = ic433gs42nkyactor-blacklist = fueaji11lhzgactor-blacklist = w1ewnn4xufobactor-blacklist = ugunxsrux2a3actor-blacklist = gz3q24tq3r21actor-blacklist = u5rlltjtjoeoactor-blacklist = k5thoceysinjactor-blacklist = ebhck31fnxbiactor-blacklist = pvxbvdkces1xactor-blacklist = oucjrjjvkrom#https://eoscorearbitration.io/wp-content/uploads/2018/07/ECAF-Temporary-Freeze-Order-2018-07-13-AO-003.pdfactor-blacklist = neverlandwalactor-blacklist = tseol5n52kmoactor-blacklist = potus1111111#https://eoscorearbitration.io/wp-content/uploads/2018/07/ECAF-Order-of-Emergency-Protection-2018-07-19-AO-004.pdfactor-blacklist = craigspys211#https://eoscorearbitration.io/wp-content/uploads/2018/08/ECAF-Order-of-Emergency-Protection-2018-08-07-AO-005.pdfactor-blacklist = eosfomoplay1#https://eoscorearbitration.io/wp-content/uploads/2018/08/ECAF-Order-of-Emergency-Protection-2018-08-28-AO-006.pdfactor-blacklist = wangfuhuahua#https://eoscorearbitration.io/wp-content/uploads/2018/09/ECAF-Order-of-Emergency-Protection-2018-09-07-AO-008.pdf#https://eoscorearbitration.io/wp-content/uploads/2018/09/ECAF-Order-of-Emergency-Protection-2018-09-24-AO-010.pdf#actor-blacklist = ha4timrzgugeactor-blacklist = guytqmbuhege#https://eoscorearbitration.io/wp-content/uploads/2018/09/ECAF-Order-of-Emergency-Protection-2018-09-09-AO-009.pdfactor-blacklist = huobldeposit#https://eoscorearbitration.io/wp-content/uploads/2018/09/ECAF-Order-of-Emergency-Protection-2018-09-25-AO-011.pdfactor-blacklist = gm3dcnqgenesactor-blacklist = gm34qnqrepqtactor-blacklist = gt3ftnqrrpqpactor-blacklist = gtwvtqptrpqpactor-blacklist = gm31qndrspqractor-blacklist = lxl2atucpyos#https://eoscorearbitration.io/wp-content/uploads/2018/10/ECAF-Order-of-Emergency-Protection-2018-10-05-AO-012.pdfactor-blacklist = g4ytenbxgqgeactor-blacklist = jinwen121212actor-blacklist = ha4tomztgageactor-blacklist = my1steosobagactor-blacklist = iloveyouplayactor-blacklist = eoschinaeos2actor-blacklist = eosholderkevactor-blacklist = dreams12trueactor-blacklist = imarichman55#https://eoscorearbitration.io/wp-content/uploads/2018/10/ECAF-Order-of-Emergency-Protection-2018-10-05-AO-013.pdfactor-blacklist = gizdcnjyg4ge#https://eoscorearbitration.io/wp-content/uploads/2018/10/ECAF-Order-of-Emergency-Protection-2018-10-12-AO-014.pdfactor-blacklist = gyzdmmjsgige#https://eoscorearbitration.io/wp-content/uploads/2018/10/ECAF-Order-of-Emergency-Protection-2018-10-13-AO-015.pdfactor-blacklist = guzdanrugeneactor-blacklist = earthsop1sys#https://eoscorearbitration.io/wp-content/uploads/2018/10/ECAF-Order-of-Emergency-Protection-2018-10-31-AO-017.pdfactor-blacklist = refundwalletactor-blacklist = jhonnywalkeractor-blacklist = alibabaioeosactor-blacklist = whitegroupesactor-blacklist = 24cryptoshopactor-blacklist = minedtradeos#Manual at 2019.02.22 (MainNet gropup)actor-blacklist = newdexmobappactor-blacklist = ftsqfgjoscmaactor-blacklist = hpbcc4k42nxyactor-blacklist = 3qyty1khhkhvactor-blacklist = xzr2fbvxwtgtactor-blacklist = myqdqdj4qbgeactor-blacklist = shprzailraztactor-blacklist = qkwrmqowelyuactor-blacklist = lhjuy3gdkpq4actor-blacklist = lmfsopxpr324actor-blacklist = lcxunh51a1gtactor-blacklist = geydddsfkk5eactor-blacklist = pnsdiia1pcuyactor-blacklist = kwmvzswquqpbactor-blacklist = guagddoefdqu 编辑genesis.json将下面的配置复制保存 1vi genesis.json 1234567891011121314151617181920212223&#123; &quot;initial_timestamp&quot;: &quot;2018-06-08T08:08:08.888&quot;, &quot;initial_key&quot;: &quot;EOS7EarnUhcyYqmdnPon8rm7mBCTnBoot6o7fE2WzjvEX2TdggbL3&quot;, &quot;initial_configuration&quot;: &#123; &quot;max_block_net_usage&quot;: 1048576, &quot;target_block_net_usage_pct&quot;: 1000, &quot;max_transaction_net_usage&quot;: 524288, &quot;base_per_transaction_net_usage&quot;: 12, &quot;net_usage_leeway&quot;: 500, &quot;context_free_discount_net_usage_num&quot;: 20, &quot;context_free_discount_net_usage_den&quot;: 100, &quot;max_block_cpu_usage&quot;: 200000, &quot;target_block_cpu_usage_pct&quot;: 1000, &quot;max_transaction_cpu_usage&quot;: 150000, &quot;min_transaction_cpu_usage&quot;: 100, &quot;max_transaction_lifetime&quot;: 3600, &quot;deferred_trx_expiration_window&quot;: 600, &quot;max_transaction_delay&quot;: 3888000, &quot;max_inline_action_size&quot;: 4096, &quot;max_inline_action_depth&quot;: 4, &quot;max_authority_depth&quot;: 6 &#125;&#125; 第一次启动默认端口是8888 1nodeos --config-dir . --data-dir /mnt/omnidata --genesis-json genesis.json --delete-all-blocks --config-dir：配置文件config.ini所在目录 --data-dir：区块数据存放目录 --genesis-json：文件目录 --delete-all-blocks：删除所有旧区块数据 再次启动不需要--genesis-json和--delete-all-blocks命令 1nodeos --config-dir . --data-dir /mnt/omnidata 停止节点如果强制关闭nodeos,下次启动时会报错database dirty flag set (likely due to unclean shutdown): replay required 所以安全退出要使用下面的命令 1pkill nodeos 如果出现上面的报错，在启动时需要加参数--hard-replay-blockchain重放区块，会花掉很长的时间 snapshot同步snapshot，即快照同步，当你需要快速搭建节点，不需要之前区块的历史数据的时候适用。快照同步不需要genesis.json文件，当快照初始化完成后，区块会从快照备份的那个区块开始同步数据，包括交易和区块数据。 编辑配置文件跟全节点同步一样。 下载快照备份文件从以下两个网站可以下载到快照备份文件 https://proxy.eosnode.tools 【按日期】 http://snapshots.eossweden.org 【按区块数】 下载完成后解压，解压得到一个.bin文件 1tar -xzvf snapshot-106753286.bin.tar.gz 初始化快照启动命令加上--snapshot即可，后面是解压出来的bin文件路径 1nodeos --config-dir . --data-dir /mnt/omnidata --snapshot /mnt/omnidata/snapshot-106753286.bin 大约10分钟即可初始化完成，占用硬盘约12GB 再次启动正常启动即可 1nodeos --config-dir . --data-dir /mnt/omnidata 停止节点1pkill nodeos]]></content>
      <categories>
        <category>EOS</category>
      </categories>
      <tags>
        <tag>EOS主网</tag>
        <tag>EOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[go语言开启go-module]]></title>
    <url>%2F2020%2F12%2F14%2F29.go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%90%AFgo-module%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚个人博客：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 模块是相关Go包的集合。modules是源代码交换和版本控制的单元。 go命令直接支持使用modules，包括记录和解析对其他模块的依赖性。modules替换旧的基于GOPATH的方法来指定在给定构建中使用哪些源文件。 注意：开启go module需要go1.11及以上版本 打开模块12set GO111MODULE=on //windowsexport GO111MODULE=on //linux 初始化执行下面的命令生成go.mod文件 1go mod init 项目名 执行下面的命令创建vendor目录存放并下载依赖 1go mod vendor 执行完成会生成go.sum文件来记录所依赖的项目的版本的锁定 然后在需要使用包的文件中正常import即可 引入新的包在需要使用包的文件中import，然后再次执行下面的命令即可 1go mod vendor 依赖包整理执行下面的命令可以将没用到的依赖包清除 1go mod tidy 其他命令go mod 有以下命令： 命令 说明 download download modules to local cache(下载依赖包) edit edit go.mod from tools or scripts（编辑go.mod graph print module requirement graph (打印模块依赖图) init initialize new module in current directory（在当前目录初始化mod） tidy add missing and remove unused modules(拉取缺少的模块，移除不用的模块) vendor make vendored copy of dependencies(将依赖复制到vendor下) verify verify dependencies have expected content (验证依赖是否正确） why explain why packages or modules are needed(解释为什么需要依赖)]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>go module</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[USDT离线签名交易]]></title>
    <url>%2F2020%2F12%2F14%2F27.USDT%E7%A6%BB%E7%BA%BF%E7%AD%BE%E5%90%8D%E4%BA%A4%E6%98%93%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚个人博客：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com USDT的离线交易需要进行下面这8个步骤 1.查询未花费交易参数：最小确认区块数、最大确认区块数、钱包地址数组（逗号隔开） 1omnicore-cli -conf=/root/.omnicore/bitcoin.conf &quot;listunspent&quot; 0 999999 &apos;[&quot;mu5vgTeuMRbGDAYZuvnYcebuky7bte2XNr&quot;,&quot;mxbL6VyXG4AJXD8ncrgRRgQY2GhbjTizSC&quot;]&apos; 返回结果： 123456789101112131415161718192021222324252627转出钱包：mq8FvvycAHw8zzwarYbk8SQ8uTY3GN493u 转入3.33333000usdt &#123; &quot;txid&quot;: &quot;7a8614c268c3113bb5bdefd2d85c092960c957053f2abf1fb2a7f81b7a8ab72d&quot;, &quot;vout&quot;: 2, &quot;address&quot;: &quot;mq8FvvycAHw8zzwarYbk8SQ8uTY3GN493u&quot;, &quot;account&quot;: &quot;usdt-test&quot;, &quot;scriptPubKey&quot;: &quot;76a9146966699024c310c454049a6eaac9c58fee02081c88ac&quot;, &quot;amount&quot;: 0.00000546, &quot;confirmations&quot;: 1, &quot;spendable&quot;: false, &quot;solvable&quot;: true &#125;手续费钱包： miLt8eZ85Z4S4sDXAVbK2R1E49RgnRasgK 转入20btc &#123; &quot;txid&quot;: &quot;7a8614c268c3113bb5bdefd2d85c092960c957053f2abf1fb2a7f81b7a8ab72d&quot;, &quot;vout&quot;: 0, &quot;address&quot;: &quot;miLt8eZ85Z4S4sDXAVbK2R1E49RgnRasgK&quot;, &quot;account&quot;: &quot;usdt-test&quot;, &quot;scriptPubKey&quot;: &quot;76a9141f00be4aee1d4534870b65c9b6c2e5276ffff0c888ac&quot;, &quot;amount&quot;: 19.99960000, &quot;confirmations&quot;: 1, &quot;spendable&quot;: false, &quot;solvable&quot;: true &#125;, 2.构建payload参数：propertyid、交易的usdt数量 1omnicore-cli -conf=/root/.omnicore/bitcoin.conf &quot;omni_createpayload_simplesend&quot; 1 &quot;2.22222&quot; 返回结果： 10000000000000001000000000d3ed6b0 3.创建未签名交易参数：第1步的input集合(即一个或多个输入) 、{转出地址:0.00000546} 这0.00000546个比特币是btc交易的最小交易数，USDT交易的本质是btc交易中附带的数据，没有btc，usdt就没有输入就不能转出 1omnicore-cli -conf=/root/.omnicore/bitcoin.conf &quot;createrawtransaction&quot; &apos;[&#123;&quot;txid&quot;:&quot;7a8614c268c3113bb5bdefd2d85c092960c957053f2abf1fb2a7f81b7a8ab72d&quot;,&quot;vout&quot;:2&#125;,&#123;&quot;txid&quot;:&quot;7a8614c268c3113bb5bdefd2d85c092960c957053f2abf1fb2a7f81b7a8ab72d&quot;,&quot;vout&quot;:0&#125;]&apos; &apos;&#123;&quot;mq8FvvycAHw8zzwarYbk8SQ8uTY3GN493u&quot;:0.00000546&#125;&apos; 返回结果： 101000000022db78a7a1bf8a7b21fbf2a3f0557c96029095cd8d2efbdb53b11c368c214867a0200000000ffffffff2db78a7a1bf8a7b21fbf2a3f0557c96029095cd8d2efbdb53b11c368c214867a0000000000ffffffff0122020000000000001976a9146966699024c310c454049a6eaac9c58fee02081c88ac00000000 4.给交易添加payload参数：第3步结果、第2步结果 1omnicore-cli -conf=/root/.omnicore/bitcoin.conf &quot;omni_createrawtx_opreturn&quot; &quot;01000000022db78a7a1bf8a7b21fbf2a3f0557c96029095cd8d2efbdb53b11c368c214867a0200000000ffffffff2db78a7a1bf8a7b21fbf2a3f0557c96029095cd8d2efbdb53b11c368c214867a0000000000ffffffff0122020000000000001976a9146966699024c310c454049a6eaac9c58fee02081c88ac00000000&quot; &quot;0000000000000001000000000d3ed6b0&quot; 返回结果： 101000000022db78a7a1bf8a7b21fbf2a3f0557c96029095cd8d2efbdb53b11c368c214867a0200000000ffffffff2db78a7a1bf8a7b21fbf2a3f0557c96029095cd8d2efbdb53b11c368c214867a0000000000ffffffff0222020000000000001976a9146966699024c310c454049a6eaac9c58fee02081c88ac0000000000000000166a146f6d6e690000000000000001000000000d3ed6b000000000 5.设置收款地址参数：第4步结果、收款钱包地址 1omnicore-cli -conf=/root/.omnicore/bitcoin.conf &quot;omni_createrawtx_reference&quot; &quot;01000000022db78a7a1bf8a7b21fbf2a3f0557c96029095cd8d2efbdb53b11c368c214867a0200000000ffffffff2db78a7a1bf8a7b21fbf2a3f0557c96029095cd8d2efbdb53b11c368c214867a0000000000ffffffff0222020000000000001976a9146966699024c310c454049a6eaac9c58fee02081c88ac0000000000000000166a146f6d6e690000000000000001000000000d3ed6b000000000&quot; &quot;mtsZjfgk6mb2wKqzt76rsybANpys25dcmi&quot; 返回结果： 101000000022db78a7a1bf8a7b21fbf2a3f0557c96029095cd8d2efbdb53b11c368c214867a0200000000ffffffff2db78a7a1bf8a7b21fbf2a3f0557c96029095cd8d2efbdb53b11c368c214867a0000000000ffffffff0322020000000000001976a9146966699024c310c454049a6eaac9c58fee02081c88ac0000000000000000166a146f6d6e690000000000000001000000000d3ed6b022020000000000001976a914927f8a23044bf2f4d2231ec0d40c844da44216fe88ac00000000 6.设置找零和手续费这里的找零和手续费指的是比特币 参数：第5步结果、第一步的输入列表（json格式，注意amount要改成value）、btc找零地址（可以设定为第一步中的地址）、交易手续费（设置太低会被视为尘埃交易而被丢弃） 1omnicore-cli -conf=/root/.omnicore/bitcoin.conf &quot;omni_createrawtx_change&quot; &quot;01000000022db78a7a1bf8a7b21fbf2a3f0557c96029095cd8d2efbdb53b11c368c214867a0200000000ffffffff2db78a7a1bf8a7b21fbf2a3f0557c96029095cd8d2efbdb53b11c368c214867a0000000000ffffffff0322020000000000001976a9146966699024c310c454049a6eaac9c58fee02081c88ac0000000000000000166a146f6d6e690000000000000001000000000d3ed6b022020000000000001976a914927f8a23044bf2f4d2231ec0d40c844da44216fe88ac00000000&quot; &apos;[&#123;&quot;txid&quot;:&quot;7a8614c268c3113bb5bdefd2d85c092960c957053f2abf1fb2a7f81b7a8ab72d&quot;,&quot;vout&quot;:2,&quot;scriptPubKey&quot;:&quot;76a9146966699024c310c454049a6eaac9c58fee02081c88ac&quot;,&quot;value&quot;:0.00000546&#125;,&#123;&quot;txid&quot;:&quot;7a8614c268c3113bb5bdefd2d85c092960c957053f2abf1fb2a7f81b7a8ab72d&quot;,&quot;vout&quot;:0,&quot;scriptPubKey&quot;:&quot;76a9141f00be4aee1d4534870b65c9b6c2e5276ffff0c888ac&quot;,&quot;value&quot;:19.99960000&#125;]&apos; &quot;miLt8eZ85Z4S4sDXAVbK2R1E49RgnRasgK&quot; 0.0004 返回结果： 101000000022db78a7a1bf8a7b21fbf2a3f0557c96029095cd8d2efbdb53b11c368c214867a0200000000ffffffff2db78a7a1bf8a7b21fbf2a3f0557c96029095cd8d2efbdb53b11c368c214867a0000000000ffffffff045e593477000000001976a9141f00be4aee1d4534870b65c9b6c2e5276ffff0c888ac22020000000000001976a9146966699024c310c454049a6eaac9c58fee02081c88ac0000000000000000166a146f6d6e690000000000000001000000000d3ed6b022020000000000001976a914927f8a23044bf2f4d2231ec0d40c844da44216fe88ac00000000 7.签名交易最后两步直接用比特币的命令即可，但是即使是最新版的omnicored程序都是基于老版本的bitcoind（0.13.2），所以无法使用signrawtransactionwithkey方法，只能使用旧版的signrawtransaction方法 参数：第6步结果、输入列表、以及输入列表中地址对应的私钥 1omnicore-cli -conf=/root/.omnicore/bitcoin.conf &quot;signrawtransaction&quot; &quot;01000000022db78a7a1bf8a7b21fbf2a3f0557c96029095cd8d2efbdb53b11c368c214867a0200000000ffffffff2db78a7a1bf8a7b21fbf2a3f0557c96029095cd8d2efbdb53b11c368c214867a0000000000ffffffff045e593477000000001976a9141f00be4aee1d4534870b65c9b6c2e5276ffff0c888ac22020000000000001976a9146966699024c310c454049a6eaac9c58fee02081c88ac0000000000000000166a146f6d6e690000000000000001000000000d3ed6b022020000000000001976a914927f8a23044bf2f4d2231ec0d40c844da44216fe88ac00000000&quot; &apos;[&#123;&quot;txid&quot;:&quot;7a8614c268c3113bb5bdefd2d85c092960c957053f2abf1fb2a7f81b7a8ab72d&quot;,&quot;vout&quot;:2,&quot;scriptPubKey&quot;:&quot;76a9146966699024c310c454049a6eaac9c58fee02081c88ac&quot;,&quot;value&quot;:0.00000546&#125;,&#123;&quot;txid&quot;:&quot;7a8614c268c3113bb5bdefd2d85c092960c957053f2abf1fb2a7f81b7a8ab72d&quot;,&quot;vout&quot;:0,&quot;scriptPubKey&quot;:&quot;76a9141f00be4aee1d4534870b65c9b6c2e5276ffff0c888ac&quot;,&quot;value&quot;:19.99960000&#125;]&apos; &apos;[&quot;92a4LrHSVUqvFSn6fxQKgoEL6wRJjkYy54vqNXVe5tRupQusmHZ&quot;,&quot;93QsgtSBGBih7bGYCPvkuig9wKaMDpQXLsVYCWnD6aLovP2yXLn&quot;]&apos; 返回结果： 1234&#123; &quot;hex&quot;: &quot;01000000022db78a7a1bf8a7b21fbf2a3f0557c96029095cd8d2efbdb53b11c368c214867a020000008b48304502210093ee76029c94f4d25c1e31f03940ab2eb4144a5a064d6088f33e3b0190e2f7ee02201724e427fe3158cadb4334f9ea90d279dfbe0b0b275ca58db94058ee4b76b7a6014104616a75154fb4ee49c6e18900c50c248f96a2b1b92f0233aa2600677390628372914181affbe0e5490c9387f428abc8047499c3034a88eea0f9b5368a2a969004ffffffff2db78a7a1bf8a7b21fbf2a3f0557c96029095cd8d2efbdb53b11c368c214867a000000008b483045022100dd08f9f493f06f67b363d245bcd2afbe5cb191fc2a7636057d3b7fe6c480968802202dfee669eac6e2e79ea6e645080f5f379b1a5e74d77b6ee3b79524bb737e81dc014104b654748d41d8d81ee6849188c569b6686d22bdf17abfa55a69b8ea40d6e57e5134bbacdcd68bdb668ea2df6428aa5129cd28f04027a18f63066d9952caaf8a09ffffffff045e593477000000001976a9141f00be4aee1d4534870b65c9b6c2e5276ffff0c888ac22020000000000001976a9146966699024c310c454049a6eaac9c58fee02081c88ac0000000000000000166a146f6d6e690000000000000001000000000d3ed6b022020000000000001976a914927f8a23044bf2f4d2231ec0d40c844da44216fe88ac00000000&quot;, &quot;complete&quot;: true&#125; 8.广播交易参数：第7步结果的hex值 1omnicore-cli -conf=/root/.omnicore/bitcoin.conf &quot;sendrawtransaction&quot; &quot;01000000022db78a7a1bf8a7b21fbf2a3f0557c96029095cd8d2efbdb53b11c368c214867a020000008b48304502210093ee76029c94f4d25c1e31f03940ab2eb4144a5a064d6088f33e3b0190e2f7ee02201724e427fe3158cadb4334f9ea90d279dfbe0b0b275ca58db94058ee4b76b7a6014104616a75154fb4ee49c6e18900c50c248f96a2b1b92f0233aa2600677390628372914181affbe0e5490c9387f428abc8047499c3034a88eea0f9b5368a2a969004ffffffff2db78a7a1bf8a7b21fbf2a3f0557c96029095cd8d2efbdb53b11c368c214867a000000008b483045022100dd08f9f493f06f67b363d245bcd2afbe5cb191fc2a7636057d3b7fe6c480968802202dfee669eac6e2e79ea6e645080f5f379b1a5e74d77b6ee3b79524bb737e81dc014104b654748d41d8d81ee6849188c569b6686d22bdf17abfa55a69b8ea40d6e57e5134bbacdcd68bdb668ea2df6428aa5129cd28f04027a18f63066d9952caaf8a09ffffffff045e593477000000001976a9141f00be4aee1d4534870b65c9b6c2e5276ffff0c888ac22020000000000001976a9146966699024c310c454049a6eaac9c58fee02081c88ac0000000000000000166a146f6d6e690000000000000001000000000d3ed6b022020000000000001976a914927f8a23044bf2f4d2231ec0d40c844da44216fe88ac00000000&quot; 返回结果： 15c67fc9eb0cdce9af1aa4f4a9f134b1fa98bed68f03a186b2b7065227576afe3 参考文档： https://github.com/OmniLayer/omnicore/blob/master/src/omnicore/doc/rpc-api.md https://gist.github.com/dexX7/352670c990ebf9ea31d6346a1519eb52 http://cw.hubwiz.com/card/c/omni-rpc-api/]]></content>
      <categories>
        <category>USDT</category>
      </categories>
      <tags>
        <tag>USDT</tag>
        <tag>离线交易</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker学习笔记]]></title>
    <url>%2F2020%2F12%2F14%2F28.Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚个人博客：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 注意事项 docker只能运行Linux系统 基本组成 客户端Client 守护进程Daemon 镜像Image 容器Container 仓库Registry 安装环境 Docker维护版本（推荐） 1curl -sSl https://get.docker.com/|sudo sh Ubuntu维护版本12sudo apt-get install docker.iosource /etc/bash_completion.d/docker.io 查看版本1sudo docker.io version 查看docker配置信息 1docker info 配置文件 1/etc/default/docker 重启docker1systemctl restart docker 启动容器单次启动容器1docker run 镜像名 命令 参数 例： 1sudo docker run ubuntu echo &apos;Hello world&apos; 按Ctrl+C退出容器为了方便非root用户运行，可以加入到用户组后运行 123sudo groupadd dockersudo gpasswd -a $&#123;USER&#125; dockersudo service docker restart 交互式容器1docker run --name=container01 -it 镜像名 bash -i：–interactive=true 默认false，保持交互状态 -t：–tty=true 默认false，提供tty终端 完整的创建容器命令 1docker run -it --name=EntWallet -p 8888:8888 --mount type=bind,source=/data/golang/EntWallet,target=/data/golang ubuntu bash –name：自定义容器名 –mount：挂载共享目录，source：宿主机目录，target：容器目录 -P：映射全端口 -p：映射指定端口，前面是宿主机端口，后面是容器端口，访问宿主机端口就相当于访问容器的绑定端口 -d：后台启动 -v：目录映射，例如host_dir:container_dir对应宿主机和容器目录，绑定后两个目录的数据将同步，容器被删除后宿主机数据不会删除；如果新容器映射这个目录，数据将同步到容器中 守护式容器 方法一：启动交互式容器后顺序按下Ctrl+P和Ctrl+Q 进入正在运行的容器 12345docker attach 容器名或ID或docker exec -it 容器名 /bin/bash 方法二：直接加-d参数启动 1docker run -d 镜像名 命令参数 退出当前容器：exec 停止守护式容器 1docker stop 容器名 或 1docker kill 容器名 区别：stop会发出停止信号等待容器停止并返回容器名，kill会直接快速停止容器 查看容器容器列表1docker ps [-a] [-l] 不加参数：列出正在运行的容器 -a：列出所有容器 -l：列出最新创建的容器 获取容器完整id1docker inspect lnmp|grep Id 通过ID查看容器详情1docker inspect 容器ID或仓库名+tag名 通过容器名查看容器详情自定义容器名称 1docker run --name=container01 -i -t ubuntu /bin/bash 查看详情 1docker inspect container01 重新启动已停止的容器1docker start [-i] 容器名 -i ：交互命令行 删除已停止的容器1docker rm 容器名或ID 参数： -f：强制删除正在运行的容器 删除所有容器1docker rm `docker ps -a -q` 查看容器日志1docker logs [-f] [-t] [--tail] 容器名 -f：–follows=true 默认false，跟踪日志并返回结果 -t：–timestamps=true 默认false，返回结果加上时间戳 –tail：=’all’，显示的条数，默认全部显示 注意：容器重启后ip和端口映射都会发生变化 查看容器内进程1docker top 容器名 在运行中的容器启动新进程1docker exec [-d] [-i] [-t] 容器名 命令 参数 帮助命令1234man docker-rumman docker-logsman docker-top...... 设置容器的端口映射1docker run -P -i -t ubuntu /bin/bash -P：–publish-all=true 默认false，映射容器所有端口 -p：指定映射端口；-p 80 ：只指定容器端口；-p 8080:80 ：指定宿主机和容器端口；-p 0.0.0.0:80：指定容器ip和端口；-p 0.0.0.0:8080:80：同时指定ip、宿主机和容器端口； 给已存在的容器添加端口映射提交一个运行中的容器为镜像 1docker commit containerid foo/live 运行镜像并添加端口 1docker run -d -p 8000:80 foo/live /bin/bash 镜像镜像列表1docker images -a,–all=false：显示所有镜像，包括没有标签的中间层镜像 -f,–filter=[] –no-trunc=false：显示完整的镜像ID -q,–quiet=false 仓库仓库是一系列镜像的集合 标签同一个仓库中的镜像用标签来区分，不同标签可能对应同一个镜像ID 删除指定镜像1docker rmi 镜像ID或仓库名+标签 删除所有镜像1docker rmi `docker images -q` 获取和推送 搜索镜像 从官网搜索镜像https://hub.docker.com/ 命令行搜索： 1docker search 拉取镜像 1docker pull 仓库名:标签名 推送镜像 1docker push 仓库名 需要登录 构建镜像保存修改的内容，后面可以使用构造的镜像来运行容器同时使用之前修改的内容 通过容器构造 1docker commit 容器名 镜像名 -a,–author=””：作者 -m,–message=””：镜像信息 -p,–paause=true：是否暂停正在执行的容器 通过Dockerfile构建 1docker build -t 镜像名 查看构建过程 1docker history 构建好的镜像可以用docker images命令查看 Dockerfile组成：大写命令+小写参数 123456789101112131415# 这是注释 FROM ubuntu:14.04 # 指定镜像:标签MAINTAINER dormancypress &quot;123@qq.com&quot; # 镜像作者信息RUN apt-get update # 在容器构建时执行命令RUN apt-get install -y nginxEXPOSE 80 # 正定运行该镜像容器使用的端口CMD # 在容器运行时执行的命令ENTRYPOINT # 与CMD相同 但不会被docker run指令覆盖ADD # 复制文件，带有类似tar的解压功能COPY # 复制文件，单纯复制推荐COLUME # WORKDIR # 指定工作目录ENV # 设置环境USER # 指定用户身份执行，默认用root执行ONBUILD # 镜像触发器 执行dockerfile首先进入到Dockerfile所在目录，然后执行命令 1docker build -t bitcoinpaygate/regtest-bitcoind:latest . 参数是镜像名:标签名和上下文（.） 创建完成镜像即可打开容器 1docker run --name regtest -it bitcoinpaygate/regtest-bitcoind:latest bash docker守护进程操作1sudo service docker start/stop/restart 运行docker hub上的镜像下载镜像 1docker pull huangguoji/lnmp 如果不指定标签，默认会加上:latest标签 以该镜像运行容器 1docker run -it huangguoji/lnmp:latest bash 如果仅运行一次，可以加上--rm，当容器退出会自动删除容器 文件传输容器和宿主机传输通过容器id或名字查到容器的长id 1docker inspect 549288a2fc7f 然后在宿主机中用docker cp或mv命令即可，注意容器id后面的冒号 1docker cp 549288a2fc7f74e63de13e37a2aae0db59af6543696fd29530175a1bd757b518:/root/go/main.go /root 1docker cp /root/main.go 549288a2fc7f74e63de13e37a2aae0db59af6543696fd29530175a1bd757b518:/root/go FTP工具在创建容器的时候需要绑定端口映射 1docker run --name containername -p 3000:80 -p 3001:21 -d dockerimagename]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows下Laravel-Homestead环境搭建]]></title>
    <url>%2F2020%2F12%2F14%2F26.Windows%E4%B8%8BLaravel-Homestead%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚个人博客：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 下载安装包本文所有的程序已经上传到百度云盘，如有失效请联系作者进行更新下载链接 链接：https://pan.baidu.com/s/1ltcH3IABqDiEZz0aC_0Zsw提取码：609b 安装VirtualBoxVirtualBox 是 Oracle 公司的开源虚拟机软件，安装包下载完成之后，双击安装包进行安装，之后按照提示操作一步一步进行安装即可。 安装VagrantVagran是用来管理虚拟机的工具，支持当前主流的虚拟机系统如 VirtualBox、VMware、AWS 等。Vagrant 的主要作用是提供一个可配置、可移植和复用的软件环境。安装包下载完成之后，双击安装包进行安装，之后按照提示操作一步一步进行安装即可。 安装GitGit是一款非常流行的代码版本控制工具。安装包下载完成之后，双击安装包进行安装，之后按照提示操作一步一步进行安装即可。 安装 Homestead说明Homestead 脚本使用 Ruby 和 Shell 脚本编写而成。原理是对Vagrantfile 文件做定制。将从 ~/Homestead/Homestead.yaml 读取的配置信息，在provision 时，解析为 Vagrant 命令并进行对虚拟机的配置。Homestead 脚本的作用在于，提供了极其简单易用的接口，使我们只需要通过傻瓜化配置，即可完成复杂的任务。 homestead.box 虚拟机盒子是提前打包好的 Vagrant Box 虚拟机盒子，里面预装了 Nginx Web 服务器、PHP 7、MySQL、Postgres、Redis、Memcached、Node，以及所有你在使用 Laravel 开发时所需要用到的各种软件。为了学习的流畅性，我们接下来将会使用定制版本的虚拟机盒子，你不需要太担心版本的事情。由于国内的网络环境原因，我们特意为大家定制了适用于国情的 Homestead 安装包，该安装包提供了以下内容： Composer 加速，配置了 Composer 中国全量镜像 支持； 默认集成 Heroku 工具； 默认集成 Yarn，并为Yarn 加了淘宝镜像的加速； 使用 CNPM 对 NPM 进行加速。 安装1.lc-homestead-6.4.1-2019072300.zip文件下载完成后解压，可以看到有两个文件 virtualbox.box（教程定制化过的 Homestead 盒子） metadata.json（盒子的导入配置文件） 在解压目录（非中文）中 lc-homestead-6.4.1-2019072300 运行以下命令导入 Box： 1vagrant box add metadata.json 2.进入用户根目录 1cd C:\Users\你的用户名 使用 Git 下载定制版的 Homestead 1git clone https://git.coding.net/summerblue/homestead.git Homestead 使用 Git 检出我们需要的 Homestead 版本 12cd ~/Homesteadgit checkout v7.8.0 初始化 Homestead 1bash init.sh 运行以上命令后，会在 ~/Homestead 目录下生成以下三个文件： Homestead.yaml - 主要配置信息文件，我们可以在此文件中配置 Homestead 的站点和数据库等信息； after.sh - 每一次 Homestead 盒子重置后（provision）会调用的 shell 脚本文件； aliases - 每一次 Homestead 盒子重置后（provision），会被替换至虚拟机的 ~/.bash_aliases 文件中，aliases 里可以放一些快捷命令的定义。 3.生成SSH Key，如果你之前已经生成过，可以直接跳过这一步； 检测是否已经生成过SSH Key 1ls -al ~/.ssh 如果存在 id_rsa 和 id_rsa.pub 的话，请跳过以下生成 SSH Key 的步骤 生成SSH Key，替换掉下面的邮箱 1ssh-keygen -t rsa -C &quot;your_email@example.com&quot; 接下来一路按回车选择默认即可。 4.配置站点 创建Code目录，默认情况下将会在该文件夹下放置我们所有的 Laravel 项目，Homestead 会把该文件夹下的项目自动映射到虚拟机的 /home/vagrant/Code 文件夹上。当然，我们也可以通过修改C:\Users\用户名\Homestead\Homestead.yaml文件中folders栏目将本地目录与虚拟机目录绑定，一旦本地文件有变化，虚拟机的文件也会自动同步修改。 主机里直接访问虚拟机站点，必须通过绑定 hosts 来实现。接下来我们利用 hosts 文件绑定 homestead.test 到虚拟机 IP 192.168.10.10 上。hosts 文件的完整路径为 C:\Windows\System32\Drivers\etc\hosts，在 hosts 文件的最后面加入以下一行 1192.168.10.10 homestead.test 启动Homestead1cd C:\Users\用户名\Homestead &amp;&amp; vagrant up 登录Homestead1vagrant ssh 登录成功后，你能看到类似于如下图的界面，现在我们在该终端界面中输入的所有命令都将运行在 Homestead 虚拟机上 退出和关闭Homestead退出虚拟机 1exit 关闭虚拟机 1vagrant halt 通过工具连接MySql可以使用Navicat等可视化工具连接mysql,mysql的默认配置如下 IP：192.168.10.10 端口：3306 用户名：homestead 密码：secret 通过工具连接命令行上面说过可以通过SSH Key来连接命令行，由于系统是ubuntu，所以也可以通过xshell等工具连接命令行。默认配置如下 IP：192.168.10.10 用户名：vagrant 密码：vagrant 修改Composer全量镜像按照Laravel China 社区文章《Laravel China镜像完成历史使命，将于两个月后停用》，我们需要修改Composer全量镜像为阿里云 Composer 全量镜像，否则Composer会报错。 1composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/ 安装Laravel通过 Composer 安装 Laravel 安装器： 1composer global require &quot;laravel/installer&quot; 创建 Laravel 应用创建code目录，这里创建一个名为blog的应用 123mkdir codecd codelaravel new blog 在windows环境下创建应用,使用5.7版本 1composer create-project laravel/laravel blog &quot;5.7.*&quot; 添加站点在Windows环境的C:\Users\用户名\Homestead\Homestead.yaml文件中sites栏目添加 123sites: - map: homestead.test to: /home/vagrant/code/blog/public 然后在 hosts 文件的最后面加入以下一行 1192.168.10.10 homestead.test 运行serve脚本 1serve homestead.test /home/vagrant/code/blog 退出Homestead然后重启虚拟机让上面的配置在homestead中生效 12exitvagrant reload --provision 打开浏览器访问http://homestead.test/即可 站点的配置文件会自动创建在/etc/nginx/sites-available/目录 PHP管理 切换版本 进入目录/etc/php可以看到php的各个版本 12vagrant@homestead:/etc/php$ ls5.6 7.0 7.1 7.2 7.3 要切换版本只需在在Windows环境的C:\Users\用户名\Homestead\Homestead.yaml文件中sites栏目指定版本然后重启虚拟机即可，所有站点只能指定相同的版本，否则会报错 123456- map: wd.com to: /home/vagrant/code/qianlong_sys php: &quot;7.1&quot;- map: admin.kd.do to: /home/vagrant/code/yii2_admin/backend/web php: &quot;7.1&quot; 重启 命令根据版本做修改 1/etc/init.d/php-fpm5.6 restart Nginx管理1/etc/init.d/nginx restart]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
        <tag>Homestead</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[比特股BTS和BAR类Json-RPC接口]]></title>
    <url>%2F2020%2F12%2F14%2F25.%E6%AF%94%E7%89%B9%E8%82%A1BTS%E5%92%8CBAR%E7%B1%BBJson-RPC%E6%8E%A5%E5%8F%A3%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚个人博客：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 参考文档：https://dev.bitshares.works/en/master/api/wallet_api.html# 查询节点信息参数：无 1&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;get_dynamic_global_properties&quot;, &quot;params&quot;: [], &quot;id&quot;: 1&#125; 返回： 1234567891011121314151617181920&#123; &quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: &#123; &quot;id&quot;: &quot;2.1.0&quot;, &quot;head_block_number&quot;: 35028, &quot;head_block_id&quot;: &quot;000088d4acd8537ebcd6237a20190f896d55cb6d&quot;, &quot;time&quot;: &quot;2019-09-19T05:49:45&quot;, &quot;current_witness&quot;: &quot;1.6.3&quot;, &quot;next_maintenance_time&quot;: &quot;2019-09-20T00:00:00&quot;, &quot;last_budget_time&quot;: &quot;2019-09-19T00:00:00&quot;, &quot;witness_budget&quot;: 0, &quot;accounts_registered_this_interval&quot;: 0, &quot;recently_missed_count&quot;: 925001, &quot;current_aslot&quot;: 3739147, &quot;recent_slots_filled&quot;: &quot;340282366920938463463374607431768211455&quot;, &quot;dynamic_flags&quot;: 0, &quot;last_irreversible_block_num&quot;: 35018 &#125;&#125; 通过区块id查询区块信息参数：区块id 1&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;get_block&quot;, &quot;params&quot;: [19868], &quot;id&quot;: 1&#125; 返回： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&#123; &quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: &#123; &quot;previous&quot;: &quot;00004d9b1abf0a3fa2103803ef1f9ff707e66f6b&quot;, &quot;timestamp&quot;: &quot;2019-09-04T08:10:15&quot;, &quot;witness&quot;: &quot;1.6.7&quot;, &quot;transaction_merkle_root&quot;: &quot;2522020e5fdb3b6e8faa49e0339b536872a72166&quot;, &quot;extensions&quot;: [], &quot;witness_signature&quot;: &quot;2067895022b1f0af047fa71d4e4ca869db1d5d36a20aa5cbd693d3270a80b8c96e7b9db23c135d465ba470383ed11ab3b860e8f83a381f9d34049edb3c117edb48&quot;, &quot;transactions&quot;: [ &#123; &quot;ref_block_num&quot;: 19867, &quot;ref_block_prefix&quot;: 1057668890, &quot;expiration&quot;: &quot;2019-09-04T08:10:40&quot;, &quot;operations&quot;: [ [ 0, &#123; &quot;fee&quot;: &#123; &quot;amount&quot;: 2089843, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;from&quot;: &quot;1.2.17&quot;, &quot;to&quot;: &quot;1.2.18&quot;, &quot;amount&quot;: &#123; &quot;amount&quot;: 100000, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;memo&quot;: &#123; &quot;from&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;to&quot;: &quot;BTS5VS9fuuzs5exawXmVxvM94fKjtJR6nRQQqbdStnXV8V4ihGExQ&quot;, &quot;nonce&quot;: &quot;505970742877495025&quot;, &quot;message&quot;: &quot;ac61bc16cfb0e9c0db19758388a51214&quot; &#125;, &quot;extensions&quot;: [] &#125; ] ], &quot;extensions&quot;: [], &quot;signatures&quot;: [ &quot;1f79cdabf4b7b2122c6becbee4dc7a42e07c053aa446fafd015eb351e24ade2f7a17df96aae62b28d71e9c465f8a732ae9a1417899f81ca1b6caefd9685a9a8301&quot; ], &quot;operation_results&quot;: [ [ 0, &#123;&#125; ] ] &#125; ], &quot;block_id&quot;: &quot;00004d9ce5e26a550f16dc940d655962d9a897fc&quot;, &quot;signing_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;transaction_ids&quot;: [ &quot;4b64a76707e698c726a186a9e15b644560ae9a4d&quot; ] &#125;&#125; 通过账号查询交易历史参数：账户名，最小编号，最大返回数量，最大编号。编号从 1 开始。 1&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;get_relative_account_history&quot;, &quot;params&quot;: [&quot;nathan&quot;,1,2,100], &quot;id&quot;: 1&#125; 返回： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980&#123; &quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: [ &#123; &quot;memo&quot;: &quot;&quot;, &quot;description&quot;: &quot;Transfer 1 BTS from nathan to alpha -- Unlock wallet to see memo. (Fee: 20.89843 BTS)&quot;, &quot;op&quot;: &#123; &quot;id&quot;: &quot;1.11.52&quot;, &quot;op&quot;: [ 0, &#123; &quot;fee&quot;: &#123; &quot;amount&quot;: 2089843, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;from&quot;: &quot;1.2.17&quot;, &quot;to&quot;: &quot;1.2.18&quot;, &quot;amount&quot;: &#123; &quot;amount&quot;: 100000, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;memo&quot;: &#123; &quot;from&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;to&quot;: &quot;BTS5VS9fuuzs5exawXmVxvM94fKjtJR6nRQQqbdStnXV8V4ihGExQ&quot;, &quot;nonce&quot;: &quot;505970742877495025&quot;, &quot;message&quot;: &quot;ac61bc16cfb0e9c0db19758388a51214&quot; &#125;, &quot;extensions&quot;: [] &#125; ], &quot;result&quot;: [ 0, &#123;&#125; ], &quot;block_num&quot;: 19868, &quot;trx_in_block&quot;: 0, &quot;op_in_trx&quot;: 0, &quot;virtual_op&quot;: 0 &#125; &#125;, &#123; &quot;memo&quot;: &quot;&quot;, &quot;description&quot;: &quot;Transfer 1.11111 BTS from nathan to alpha -- Unlock wallet to see memo. (Fee: 20.89843 BTS)&quot;, &quot;op&quot;: &#123; &quot;id&quot;: &quot;1.11.51&quot;, &quot;op&quot;: [ 0, &#123; &quot;fee&quot;: &#123; &quot;amount&quot;: 2089843, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;from&quot;: &quot;1.2.17&quot;, &quot;to&quot;: &quot;1.2.18&quot;, &quot;amount&quot;: &#123; &quot;amount&quot;: 111111, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;memo&quot;: &#123; &quot;from&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;to&quot;: &quot;BTS5VS9fuuzs5exawXmVxvM94fKjtJR6nRQQqbdStnXV8V4ihGExQ&quot;, &quot;nonce&quot;: &quot;11674897818616179291&quot;, &quot;message&quot;: &quot;69cc001a11d3007923dc4d00d28cac1f&quot; &#125;, &quot;extensions&quot;: [] &#125; ], &quot;result&quot;: [ 0, &#123;&#125; ], &quot;block_num&quot;: 19840, &quot;trx_in_block&quot;: 0, &quot;op_in_trx&quot;: 0, &quot;virtual_op&quot;: 0 &#125; &#125; ]&#125; 账户列表参数：最顶层的账户名，获取数量 1&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;list_accounts&quot;, &quot;params&quot;: [&quot;nathan&quot;,10], &quot;id&quot;: 1&#125; 返回： 123456789101112131415161718192021222324252627282930&#123; &quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: [ [ &quot;nathan&quot;, &quot;1.2.17&quot; ], [ &quot;null-account&quot;, &quot;1.2.3&quot; ], [ &quot;proxy-to-self&quot;, &quot;1.2.5&quot; ], [ &quot;relaxed-committee-account&quot;, &quot;1.2.2&quot; ], [ &quot;temp-account&quot;, &quot;1.2.4&quot; ], [ &quot;witness-account&quot;, &quot;1.2.1&quot; ] ]&#125; 查询账户余额参数：账户名 1&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;list_account_balances&quot;, &quot;params&quot;: [&quot;nathan&quot;], &quot;id&quot;: 1&#125; 返回： 12345678910&#123; &quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: [ &#123; &quot;amount&quot;: &quot;999918734664049&quot;, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125; ]&#125; 通过账户名查询账户id参数：账户名 1&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;get_account_id&quot;, &quot;params&quot;: [&quot;nathan&quot;], &quot;id&quot;: 1&#125; 返回： 12345&#123; &quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: &quot;1.2.17&quot;&#125; 通过账户id查询账户信息参数：账户id 1&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;get_object&quot;, &quot;params&quot;: [&quot;1.2.6&quot;,&quot;1.3.0&quot;], &quot;id&quot;: 1&#125; 或者用另一个端口的另一个方法：http://47.56.168.231:11011，可同时查询多个账户 1&#123;&quot;id&quot;:1,&quot;method&quot;:&quot;call&quot;,&quot;params&quot;:[0,&quot;get_accounts&quot;,[[&quot;1.2.6&quot;]]]&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&#123; &quot;id&quot;: 1, &quot;result&quot;: [ &#123; &quot;id&quot;: &quot;1.2.6&quot;, &quot;membership_expiration_date&quot;: &quot;1969-12-31T23:59:59&quot;, &quot;registrar&quot;: &quot;1.2.6&quot;, &quot;referrer&quot;: &quot;1.2.6&quot;, &quot;lifetime_referrer&quot;: &quot;1.2.6&quot;, &quot;network_fee_percentage&quot;: 2000, &quot;lifetime_referrer_fee_percentage&quot;: 8000, &quot;referrer_rewards_percentage&quot;: 0, &quot;name&quot;: &quot;init0&quot;, &quot;owner&quot;: &#123; &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [ [ &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, 1 ] ], &quot;address_auths&quot;: [] &#125;, &quot;active&quot;: &#123; &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [ [ &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, 1 ] ], &quot;address_auths&quot;: [] &#125;, &quot;options&quot;: &#123; &quot;memo_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;voting_account&quot;: &quot;1.2.5&quot;, &quot;num_witness&quot;: 0, &quot;num_committee&quot;: 0, &quot;votes&quot;: [], &quot;extensions&quot;: [] &#125;, &quot;statistics&quot;: &quot;2.6.6&quot;, &quot;whitelisting_accounts&quot;: [], &quot;blacklisting_accounts&quot;: [], &quot;whitelisted_accounts&quot;: [], &quot;blacklisted_accounts&quot;: [], &quot;owner_special_authority&quot;: [ 0, &#123;&#125; ], &quot;active_special_authority&quot;: [ 0, &#123;&#125; ], &quot;top_n_control_flags&quot;: 0 &#125; ]&#125; 通过账户名查询账户信息参数：账户名 1&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;get_account&quot;, &quot;params&quot;: [&quot;nathan&quot;], &quot;id&quot;: 1&#125; 返回： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768&#123; &quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: &#123; &quot;id&quot;: &quot;1.2.17&quot;, &quot;membership_expiration_date&quot;: &quot;1969-12-31T23:59:59&quot;, &quot;registrar&quot;: &quot;1.2.17&quot;, &quot;referrer&quot;: &quot;1.2.17&quot;, &quot;lifetime_referrer&quot;: &quot;1.2.17&quot;, &quot;network_fee_percentage&quot;: 2000, &quot;lifetime_referrer_fee_percentage&quot;: 8000, &quot;referrer_rewards_percentage&quot;: 0, &quot;name&quot;: &quot;nathan&quot;, &quot;owner&quot;: &#123; &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [ [ &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, 1 ] ], &quot;address_auths&quot;: [] &#125;, &quot;active&quot;: &#123; &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [ [ &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, 1 ] ], &quot;address_auths&quot;: [] &#125;, &quot;options&quot;: &#123; &quot;memo_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;voting_account&quot;: &quot;1.2.5&quot;, &quot;num_witness&quot;: 0, &quot;num_committee&quot;: 0, &quot;votes&quot;: [ &quot;0:23&quot;, &quot;0:24&quot;, &quot;0:25&quot;, &quot;0:26&quot;, &quot;0:27&quot;, &quot;0:28&quot;, &quot;0:29&quot; ], &quot;extensions&quot;: [] &#125;, &quot;statistics&quot;: &quot;2.6.17&quot;, &quot;whitelisting_accounts&quot;: [], &quot;blacklisting_accounts&quot;: [], &quot;whitelisted_accounts&quot;: [], &quot;blacklisted_accounts&quot;: [], &quot;cashback_vb&quot;: &quot;1.13.0&quot;, &quot;owner_special_authority&quot;: [ 0, &#123;&#125; ], &quot;active_special_authority&quot;: [ 0, &#123;&#125; ], &quot;top_n_control_flags&quot;: 0 &#125;&#125; 解锁钱包参数：密码 1&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;unlock&quot;, &quot;params&quot;: [&quot;supersecret&quot;], &quot;id&quot;: 1&#125; 返回： 12345&#123; &quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: null&#125; 转账参数：源账户名，目的账户名，金额，币种，备注 1&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;transfer2&quot;, &quot;params&quot;: [&quot;nathan&quot;,&quot;alpha&quot;,10,&quot;BTS&quot;,&quot;This is memo&quot;], &quot;id&quot;: 1&#125; 返回： 12345678910111213141516171819202122232425262728293031323334353637383940&#123; &quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: [ &quot;a31884057f4c20724acb54c6817b709892a89de5&quot;, &#123; &quot;ref_block_num&quot;: 35238, &quot;ref_block_prefix&quot;: 4037660452, &quot;expiration&quot;: &quot;2019-09-19T06:07:45&quot;, &quot;operations&quot;: [ [ 0, &#123; &quot;fee&quot;: &#123; &quot;amount&quot;: 2105468, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;from&quot;: &quot;1.2.17&quot;, &quot;to&quot;: &quot;1.2.18&quot;, &quot;amount&quot;: &#123; &quot;amount&quot;: 1000000, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;memo&quot;: &#123; &quot;from&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;to&quot;: &quot;BTS5VS9fuuzs5exawXmVxvM94fKjtJR6nRQQqbdStnXV8V4ihGExQ&quot;, &quot;nonce&quot;: &quot;14845433245050049736&quot;, &quot;message&quot;: &quot;199b07f4622468588c88c88d9a4349b8842c2efbe535d99b74eba99e70e225f5&quot; &#125;, &quot;extensions&quot;: [] &#125; ] ], &quot;extensions&quot;: [], &quot;signatures&quot;: [ &quot;200ecd4ddb9a9563b54f34e68ac218404ad8006a0b6efb5d8c118bb768542c787a7c7fbefecd41422702d94ce0f4890afd60311a55fb717801aad647d1b7df8d23&quot; ] &#125; ]&#125; 查询资产详情参数：资产名 1&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;get_asset&quot;, &quot;params&quot;: [&quot;BTS&quot;], &quot;id&quot;: 1&#125; 返回： 12345678910111213141516171819202122232425262728293031323334&#123; &quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: &#123; &quot;id&quot;: &quot;1.3.0&quot;, &quot;symbol&quot;: &quot;BTS&quot;, &quot;precision&quot;: 5, &quot;issuer&quot;: &quot;1.2.3&quot;, &quot;options&quot;: &#123; &quot;max_supply&quot;: &quot;1000000000000000&quot;, &quot;market_fee_percent&quot;: 0, &quot;max_market_fee&quot;: &quot;1000000000000000&quot;, &quot;issuer_permissions&quot;: 0, &quot;flags&quot;: 0, &quot;core_exchange_rate&quot;: &#123; &quot;base&quot;: &#123; &quot;amount&quot;: 1, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;quote&quot;: &#123; &quot;amount&quot;: 1, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125; &#125;, &quot;whitelist_authorities&quot;: [], &quot;blacklist_authorities&quot;: [], &quot;whitelist_markets&quot;: [], &quot;blacklist_markets&quot;: [], &quot;description&quot;: &quot;&quot;, &quot;extensions&quot;: &#123;&#125; &#125;, &quot;dynamic_asset_data_id&quot;: &quot;2.3.0&quot; &#125;&#125; 所有钱包列表参数：无 1&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;list_my_accounts&quot;, &quot;params&quot;: [], &quot;id&quot;: 1&#125; 返回： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518&#123; &quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: [ &#123; &quot;id&quot;: &quot;1.2.17&quot;, &quot;membership_expiration_date&quot;: &quot;1969-12-31T23:59:59&quot;, &quot;registrar&quot;: &quot;1.2.17&quot;, &quot;referrer&quot;: &quot;1.2.17&quot;, &quot;lifetime_referrer&quot;: &quot;1.2.17&quot;, &quot;network_fee_percentage&quot;: 2000, &quot;lifetime_referrer_fee_percentage&quot;: 8000, &quot;referrer_rewards_percentage&quot;: 0, &quot;name&quot;: &quot;nathan&quot;, &quot;owner&quot;: &#123; &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [ [ &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, 1 ] ], &quot;address_auths&quot;: [] &#125;, &quot;active&quot;: &#123; &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [ [ &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, 1 ] ], &quot;address_auths&quot;: [] &#125;, &quot;options&quot;: &#123; &quot;memo_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;voting_account&quot;: &quot;1.2.5&quot;, &quot;num_witness&quot;: 0, &quot;num_committee&quot;: 0, &quot;votes&quot;: [ &quot;0:23&quot;, &quot;0:24&quot;, &quot;0:25&quot;, &quot;0:26&quot;, &quot;0:27&quot;, &quot;0:28&quot;, &quot;0:29&quot; ], &quot;extensions&quot;: [] &#125;, &quot;statistics&quot;: &quot;2.6.17&quot;, &quot;whitelisting_accounts&quot;: [], &quot;blacklisting_accounts&quot;: [], &quot;whitelisted_accounts&quot;: [], &quot;blacklisted_accounts&quot;: [], &quot;cashback_vb&quot;: &quot;1.13.0&quot;, &quot;owner_special_authority&quot;: [ 0, &#123;&#125; ], &quot;active_special_authority&quot;: [ 0, &#123;&#125; ], &quot;top_n_control_flags&quot;: 0 &#125;, &#123; &quot;id&quot;: &quot;1.2.18&quot;, &quot;membership_expiration_date&quot;: &quot;1969-12-31T23:59:59&quot;, &quot;registrar&quot;: &quot;1.2.18&quot;, &quot;referrer&quot;: &quot;1.2.18&quot;, &quot;lifetime_referrer&quot;: &quot;1.2.18&quot;, &quot;network_fee_percentage&quot;: 2000, &quot;lifetime_referrer_fee_percentage&quot;: 8000, &quot;referrer_rewards_percentage&quot;: 0, &quot;name&quot;: &quot;alpha&quot;, &quot;owner&quot;: &#123; &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [ [ &quot;BTS5VS9fuuzs5exawXmVxvM94fKjtJR6nRQQqbdStnXV8V4ihGExQ&quot;, 1 ] ], &quot;address_auths&quot;: [] &#125;, &quot;active&quot;: &#123; &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [ [ &quot;BTS5VS9fuuzs5exawXmVxvM94fKjtJR6nRQQqbdStnXV8V4ihGExQ&quot;, 1 ] ], &quot;address_auths&quot;: [] &#125;, &quot;options&quot;: &#123; &quot;memo_key&quot;: &quot;BTS5VS9fuuzs5exawXmVxvM94fKjtJR6nRQQqbdStnXV8V4ihGExQ&quot;, &quot;voting_account&quot;: &quot;1.2.5&quot;, &quot;num_witness&quot;: 0, &quot;num_committee&quot;: 0, &quot;votes&quot;: [], &quot;extensions&quot;: [] &#125;, &quot;statistics&quot;: &quot;2.6.18&quot;, &quot;whitelisting_accounts&quot;: [], &quot;blacklisting_accounts&quot;: [], &quot;whitelisted_accounts&quot;: [], &quot;blacklisted_accounts&quot;: [], &quot;cashback_vb&quot;: &quot;1.13.1&quot;, &quot;owner_special_authority&quot;: [ 0, &#123;&#125; ], &quot;active_special_authority&quot;: [ 0, &#123;&#125; ], &quot;top_n_control_flags&quot;: 0 &#125;, &#123; &quot;id&quot;: &quot;1.2.19&quot;, &quot;membership_expiration_date&quot;: &quot;1969-12-31T23:59:59&quot;, &quot;registrar&quot;: &quot;1.2.19&quot;, &quot;referrer&quot;: &quot;1.2.19&quot;, &quot;lifetime_referrer&quot;: &quot;1.2.19&quot;, &quot;network_fee_percentage&quot;: 2000, &quot;lifetime_referrer_fee_percentage&quot;: 8000, &quot;referrer_rewards_percentage&quot;: 0, &quot;name&quot;: &quot;com0&quot;, &quot;owner&quot;: &#123; &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [ [ &quot;BTS5ZYQtrYUPk5ELqJfygsJHnTJ9wDQmFZK4UXH8d6Txqsjg9MdBc&quot;, 1 ] ], &quot;address_auths&quot;: [] &#125;, &quot;active&quot;: &#123; &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [ [ &quot;BTS5arjFbgDWrqxhuqvvUGpLFCguse3ebKVC4XGcjUnDgdtNT22Dd&quot;, 1 ] ], &quot;address_auths&quot;: [] &#125;, &quot;options&quot;: &#123; &quot;memo_key&quot;: &quot;BTS67M2hU4tdqD53DdiUxsNaPrRehq3q8zvgVuwfVy1umu7EDqQLU&quot;, &quot;voting_account&quot;: &quot;1.2.5&quot;, &quot;num_witness&quot;: 0, &quot;num_committee&quot;: 0, &quot;votes&quot;: [], &quot;extensions&quot;: [] &#125;, &quot;statistics&quot;: &quot;2.6.19&quot;, &quot;whitelisting_accounts&quot;: [], &quot;blacklisting_accounts&quot;: [], &quot;whitelisted_accounts&quot;: [], &quot;blacklisted_accounts&quot;: [], &quot;cashback_vb&quot;: &quot;1.13.2&quot;, &quot;owner_special_authority&quot;: [ 0, &#123;&#125; ], &quot;active_special_authority&quot;: [ 0, &#123;&#125; ], &quot;top_n_control_flags&quot;: 0 &#125;, &#123; &quot;id&quot;: &quot;1.2.20&quot;, &quot;membership_expiration_date&quot;: &quot;1969-12-31T23:59:59&quot;, &quot;registrar&quot;: &quot;1.2.20&quot;, &quot;referrer&quot;: &quot;1.2.20&quot;, &quot;lifetime_referrer&quot;: &quot;1.2.20&quot;, &quot;network_fee_percentage&quot;: 2000, &quot;lifetime_referrer_fee_percentage&quot;: 8000, &quot;referrer_rewards_percentage&quot;: 0, &quot;name&quot;: &quot;com1&quot;, &quot;owner&quot;: &#123; &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [ [ &quot;BTS7sKfFcj6KnKNnEeM7ojLXxJd9fhx9oDQduawBgTZsMicac1uqn&quot;, 1 ] ], &quot;address_auths&quot;: [] &#125;, &quot;active&quot;: &#123; &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [ [ &quot;BTS5rtEW3HgzB6jRTj6gDMprBwdHRcTF13fsydDjKFLEp1xurW74Z&quot;, 1 ] ], &quot;address_auths&quot;: [] &#125;, &quot;options&quot;: &#123; &quot;memo_key&quot;: &quot;BTS7kz2cGTXaoDk49fUXr88urAuLEek9gjXrMQw5gkQ7seLD3MSpt&quot;, &quot;voting_account&quot;: &quot;1.2.5&quot;, &quot;num_witness&quot;: 0, &quot;num_committee&quot;: 0, &quot;votes&quot;: [], &quot;extensions&quot;: [] &#125;, &quot;statistics&quot;: &quot;2.6.20&quot;, &quot;whitelisting_accounts&quot;: [], &quot;blacklisting_accounts&quot;: [], &quot;whitelisted_accounts&quot;: [], &quot;blacklisted_accounts&quot;: [], &quot;cashback_vb&quot;: &quot;1.13.3&quot;, &quot;owner_special_authority&quot;: [ 0, &#123;&#125; ], &quot;active_special_authority&quot;: [ 0, &#123;&#125; ], &quot;top_n_control_flags&quot;: 0 &#125;, &#123; &quot;id&quot;: &quot;1.2.21&quot;, &quot;membership_expiration_date&quot;: &quot;1969-12-31T23:59:59&quot;, &quot;registrar&quot;: &quot;1.2.21&quot;, &quot;referrer&quot;: &quot;1.2.21&quot;, &quot;lifetime_referrer&quot;: &quot;1.2.21&quot;, &quot;network_fee_percentage&quot;: 2000, &quot;lifetime_referrer_fee_percentage&quot;: 8000, &quot;referrer_rewards_percentage&quot;: 0, &quot;name&quot;: &quot;com2&quot;, &quot;owner&quot;: &#123; &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [ [ &quot;BTS5yK72A2mSQdnfea7tZ3mbk8bMsg4NbH6nBVFDnAMywSCA6QXei&quot;, 1 ] ], &quot;address_auths&quot;: [] &#125;, &quot;active&quot;: &#123; &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [ [ &quot;BTS67QpKoWzsZCAEXNkWefxmmGerC2G8hdffQVUeDaf5BbDjDLWCK&quot;, 1 ] ], &quot;address_auths&quot;: [] &#125;, &quot;options&quot;: &#123; &quot;memo_key&quot;: &quot;BTS7r7hEmGLdgSuAb7UWZ27YfcFCj2xiUMeCewK5ZX7Xxa4pt9QAX&quot;, &quot;voting_account&quot;: &quot;1.2.5&quot;, &quot;num_witness&quot;: 0, &quot;num_committee&quot;: 0, &quot;votes&quot;: [], &quot;extensions&quot;: [] &#125;, &quot;statistics&quot;: &quot;2.6.21&quot;, &quot;whitelisting_accounts&quot;: [], &quot;blacklisting_accounts&quot;: [], &quot;whitelisted_accounts&quot;: [], &quot;blacklisted_accounts&quot;: [], &quot;cashback_vb&quot;: &quot;1.13.4&quot;, &quot;owner_special_authority&quot;: [ 0, &#123;&#125; ], &quot;active_special_authority&quot;: [ 0, &#123;&#125; ], &quot;top_n_control_flags&quot;: 0 &#125;, &#123; &quot;id&quot;: &quot;1.2.22&quot;, &quot;membership_expiration_date&quot;: &quot;1969-12-31T23:59:59&quot;, &quot;registrar&quot;: &quot;1.2.22&quot;, &quot;referrer&quot;: &quot;1.2.22&quot;, &quot;lifetime_referrer&quot;: &quot;1.2.22&quot;, &quot;network_fee_percentage&quot;: 2000, &quot;lifetime_referrer_fee_percentage&quot;: 8000, &quot;referrer_rewards_percentage&quot;: 0, &quot;name&quot;: &quot;com3&quot;, &quot;owner&quot;: &#123; &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [ [ &quot;BTS4tVaEEqzfguMjddTEc2ax75b2qKFoVSvboUjnrtVQ3Y3etYKYy&quot;, 1 ] ], &quot;address_auths&quot;: [] &#125;, &quot;active&quot;: &#123; &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [ [ &quot;BTS8mPETTECzSvzSenVTqT8WM4zir7ggfVnEc2AfxxzB52AFeYoyX&quot;, 1 ] ], &quot;address_auths&quot;: [] &#125;, &quot;options&quot;: &#123; &quot;memo_key&quot;: &quot;BTS6jwUt27WTrrqQLqMvWHsD9HP83sqDhviuQKxAeD7HpoCjhXnds&quot;, &quot;voting_account&quot;: &quot;1.2.5&quot;, &quot;num_witness&quot;: 0, &quot;num_committee&quot;: 0, &quot;votes&quot;: [], &quot;extensions&quot;: [] &#125;, &quot;statistics&quot;: &quot;2.6.22&quot;, &quot;whitelisting_accounts&quot;: [], &quot;blacklisting_accounts&quot;: [], &quot;whitelisted_accounts&quot;: [], &quot;blacklisted_accounts&quot;: [], &quot;cashback_vb&quot;: &quot;1.13.5&quot;, &quot;owner_special_authority&quot;: [ 0, &#123;&#125; ], &quot;active_special_authority&quot;: [ 0, &#123;&#125; ], &quot;top_n_control_flags&quot;: 0 &#125;, &#123; &quot;id&quot;: &quot;1.2.23&quot;, &quot;membership_expiration_date&quot;: &quot;1969-12-31T23:59:59&quot;, &quot;registrar&quot;: &quot;1.2.23&quot;, &quot;referrer&quot;: &quot;1.2.23&quot;, &quot;lifetime_referrer&quot;: &quot;1.2.23&quot;, &quot;network_fee_percentage&quot;: 2000, &quot;lifetime_referrer_fee_percentage&quot;: 8000, &quot;referrer_rewards_percentage&quot;: 0, &quot;name&quot;: &quot;com4&quot;, &quot;owner&quot;: &#123; &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [ [ &quot;BTS7zNF1rh2quabV6z7hsfojz9328ZUfTBURMRSvReExnFZ1sYsDp&quot;, 1 ] ], &quot;address_auths&quot;: [] &#125;, &quot;active&quot;: &#123; &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [ [ &quot;BTS7Fnb9TzMQXFsXegEk8rBzUPza8CUUXNFTVn1jWyWH6mX6TNNLv&quot;, 1 ] ], &quot;address_auths&quot;: [] &#125;, &quot;options&quot;: &#123; &quot;memo_key&quot;: &quot;BTS6eXTWMGVRyo7V5y3wev6WP5ekH6ULekwByXJMT7wFNGtF8Yb7k&quot;, &quot;voting_account&quot;: &quot;1.2.5&quot;, &quot;num_witness&quot;: 0, &quot;num_committee&quot;: 0, &quot;votes&quot;: [], &quot;extensions&quot;: [] &#125;, &quot;statistics&quot;: &quot;2.6.23&quot;, &quot;whitelisting_accounts&quot;: [], &quot;blacklisting_accounts&quot;: [], &quot;whitelisted_accounts&quot;: [], &quot;blacklisted_accounts&quot;: [], &quot;cashback_vb&quot;: &quot;1.13.6&quot;, &quot;owner_special_authority&quot;: [ 0, &#123;&#125; ], &quot;active_special_authority&quot;: [ 0, &#123;&#125; ], &quot;top_n_control_flags&quot;: 0 &#125;, &#123; &quot;id&quot;: &quot;1.2.24&quot;, &quot;membership_expiration_date&quot;: &quot;1969-12-31T23:59:59&quot;, &quot;registrar&quot;: &quot;1.2.24&quot;, &quot;referrer&quot;: &quot;1.2.24&quot;, &quot;lifetime_referrer&quot;: &quot;1.2.24&quot;, &quot;network_fee_percentage&quot;: 2000, &quot;lifetime_referrer_fee_percentage&quot;: 8000, &quot;referrer_rewards_percentage&quot;: 0, &quot;name&quot;: &quot;com5&quot;, &quot;owner&quot;: &#123; &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [ [ &quot;BTS6TcrQC2biZKGyx8DAZETh4zsLiLcSciLuMKYNimqx6WkT22KKA&quot;, 1 ] ], &quot;address_auths&quot;: [] &#125;, &quot;active&quot;: &#123; &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [ [ &quot;BTS5jbkaqLgNvKZrDHAEAt3of9PmrU9UWyLKLP3arJFE34T4qvhbJ&quot;, 1 ] ], &quot;address_auths&quot;: [] &#125;, &quot;options&quot;: &#123; &quot;memo_key&quot;: &quot;BTS4zLb7M2hAcPBdEiDJQdA5FgYRg1yZeLNTdoARPZ5tk8WJpGAz6&quot;, &quot;voting_account&quot;: &quot;1.2.5&quot;, &quot;num_witness&quot;: 0, &quot;num_committee&quot;: 0, &quot;votes&quot;: [], &quot;extensions&quot;: [] &#125;, &quot;statistics&quot;: &quot;2.6.24&quot;, &quot;whitelisting_accounts&quot;: [], &quot;blacklisting_accounts&quot;: [], &quot;whitelisted_accounts&quot;: [], &quot;blacklisted_accounts&quot;: [], &quot;cashback_vb&quot;: &quot;1.13.7&quot;, &quot;owner_special_authority&quot;: [ 0, &#123;&#125; ], &quot;active_special_authority&quot;: [ 0, &#123;&#125; ], &quot;top_n_control_flags&quot;: 0 &#125;, &#123; &quot;id&quot;: &quot;1.2.25&quot;, &quot;membership_expiration_date&quot;: &quot;1969-12-31T23:59:59&quot;, &quot;registrar&quot;: &quot;1.2.25&quot;, &quot;referrer&quot;: &quot;1.2.25&quot;, &quot;lifetime_referrer&quot;: &quot;1.2.25&quot;, &quot;network_fee_percentage&quot;: 2000, &quot;lifetime_referrer_fee_percentage&quot;: 8000, &quot;referrer_rewards_percentage&quot;: 0, &quot;name&quot;: &quot;com6&quot;, &quot;owner&quot;: &#123; &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [ [ &quot;BTS52ktNc48V9Rkw3cWU51hoMqHRRwk7mDHcrGTQAeRT9bMZzozWc&quot;, 1 ] ], &quot;address_auths&quot;: [] &#125;, &quot;active&quot;: &#123; &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [ [ &quot;BTS5dFvUh87J3PFU5z9BmuF4AFaLXv8TiXB9Cjdy9taNrVpxYUq1c&quot;, 1 ] ], &quot;address_auths&quot;: [] &#125;, &quot;options&quot;: &#123; &quot;memo_key&quot;: &quot;BTS5pLk575W7yRuHsUPEMvWqwUeKPhGPTanqEQRSzUHTTkD9FwNnp&quot;, &quot;voting_account&quot;: &quot;1.2.5&quot;, &quot;num_witness&quot;: 0, &quot;num_committee&quot;: 0, &quot;votes&quot;: [], &quot;extensions&quot;: [] &#125;, &quot;statistics&quot;: &quot;2.6.25&quot;, &quot;whitelisting_accounts&quot;: [], &quot;blacklisting_accounts&quot;: [], &quot;whitelisted_accounts&quot;: [], &quot;blacklisted_accounts&quot;: [], &quot;cashback_vb&quot;: &quot;1.13.8&quot;, &quot;owner_special_authority&quot;: [ 0, &#123;&#125; ], &quot;active_special_authority&quot;: [ 0, &#123;&#125; ], &quot;top_n_control_flags&quot;: 0 &#125; ]&#125; 见证人列表参数：最顶层的账户名，最大数量 1&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;list_witnesses&quot;, &quot;params&quot;: [&quot;init0&quot;,10], &quot;id&quot;: 1&#125; 返回： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&#123; &quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: [ [ &quot;init0&quot;, &quot;1.6.1&quot; ], [ &quot;init1&quot;, &quot;1.6.2&quot; ], [ &quot;init10&quot;, &quot;1.6.11&quot; ], [ &quot;init2&quot;, &quot;1.6.3&quot; ], [ &quot;init3&quot;, &quot;1.6.4&quot; ], [ &quot;init4&quot;, &quot;1.6.5&quot; ], [ &quot;init5&quot;, &quot;1.6.6&quot; ], [ &quot;init6&quot;, &quot;1.6.7&quot; ], [ &quot;init7&quot;, &quot;1.6.8&quot; ], [ &quot;init8&quot;, &quot;1.6.9&quot; ] ]&#125; 通过用户名查询见证人详情参数：见证人账号 1&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;get_witness&quot;, &quot;params&quot;: [&quot;init0&quot;], &quot;id&quot;: 1&#125; 返回： 12345678910111213141516&#123; &quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: &#123; &quot;id&quot;: &quot;1.6.1&quot;, &quot;witness_account&quot;: &quot;1.2.6&quot;, &quot;last_aslot&quot;: 3741892, &quot;signing_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;pay_vb&quot;: &quot;1.13.11&quot;, &quot;vote_id&quot;: &quot;1:0&quot;, &quot;total_votes&quot;: 0, &quot;url&quot;: &quot;&quot;, &quot;total_missed&quot;: 0, &quot;last_confirmed_block_num&quot;: 37773 &#125;&#125; 通过见证人id查询见证人详情先查询见证人的普通账号id 1&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;get_object&quot;, &quot;params&quot;: [&quot;1.6.1&quot;], &quot;id&quot;: 1&#125; 返回： 123456789101112131415161718&#123; &quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: [ &#123; &quot;id&quot;: &quot;1.6.1&quot;, &quot;witness_account&quot;: &quot;1.2.6&quot;, &quot;last_aslot&quot;: 4186995, &quot;signing_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;pay_vb&quot;: &quot;1.13.11&quot;, &quot;vote_id&quot;: &quot;1:0&quot;, &quot;total_votes&quot;: &quot;999925340001863&quot;, &quot;url&quot;: &quot;&quot;, &quot;total_missed&quot;: 1, &quot;last_confirmed_block_num&quot;: 482869 &#125; ]&#125; 得到见证人对应的witness_account,然后调用同一个方法，将witness_account作为参数传入即可 1&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;get_object&quot;, &quot;params&quot;: [&quot;1.2.6&quot;], &quot;id&quot;: 1&#125; 返回： 123456789101112131415161718&#123; &quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: [ &#123; &quot;id&quot;: &quot;1.2.6&quot;, &quot;membership_expiration_date&quot;: &quot;1969-12-31T23:59:59&quot;, &quot;registrar&quot;: &quot;1.2.6&quot;, &quot;referrer&quot;: &quot;1.2.6&quot;, &quot;lifetime_referrer&quot;: &quot;1.2.6&quot;, &quot;network_fee_percentage&quot;: 2000, &quot;lifetime_referrer_fee_percentage&quot;: 8000, &quot;referrer_rewards_percentage&quot;: 0, &quot;name&quot;: &quot;init0&quot;, &quot;top_n_control_flags&quot;: 0 &#125; ]&#125; 得到账户名name 委员会成员列表参数：最顶层的账户名，最大数量 1&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;list_committee_members&quot;, &quot;params&quot;: [&quot;init0&quot;,10], &quot;id&quot;: 1&#125; 返回： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&#123; &quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: [ [ &quot;init0&quot;, &quot;1.5.0&quot; ], [ &quot;init1&quot;, &quot;1.5.1&quot; ], [ &quot;init10&quot;, &quot;1.5.10&quot; ], [ &quot;init2&quot;, &quot;1.5.2&quot; ], [ &quot;init3&quot;, &quot;1.5.3&quot; ], [ &quot;init4&quot;, &quot;1.5.4&quot; ], [ &quot;init5&quot;, &quot;1.5.5&quot; ], [ &quot;init6&quot;, &quot;1.5.6&quot; ], [ &quot;init7&quot;, &quot;1.5.7&quot; ], [ &quot;init8&quot;, &quot;1.5.8&quot; ] ]&#125; 查询委员会账号详情参数：委员会成员账号 1&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;get_committee_member&quot;, &quot;params&quot;: [&quot;init0&quot;], &quot;id&quot;: 1&#125; 返回： 1234567891011&#123; &quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: &#123; &quot;id&quot;: &quot;1.5.0&quot;, &quot;committee_member_account&quot;: &quot;1.2.6&quot;, &quot;vote_id&quot;: &quot;0:11&quot;, &quot;total_votes&quot;: 0, &quot;url&quot;: &quot;&quot; &#125;&#125; 通过交易id查询交易链接：http://47.56.168.231/index/index/getTransaction?id=0dcdbe50a128deee41a18fe6788b5933a19211ba 参数：id = 交易id 返回： 1234567891011121314&#123; &quot;code&quot;:0, &quot;type&quot;:&quot;transfer&quot;, &quot;from&quot;:&quot;nathan&quot;, &quot;to&quot;:&quot;alpha&quot;, &quot;amount&quot;:&quot;10000000000&quot;, &quot;asset&quot;:&quot;BTS&quot;, &quot;fee&quot;:2105468, &quot;fee_asset&quot;:&quot;BTS&quot;, &quot;memo&quot;:&quot;here is the cash&quot;, &quot;txid&quot;:&quot;0dcdbe50a128deee41a18fe6788b5933a19211ba&quot;, &quot;timestamp&quot;:&quot;2019-09-03T03:17:10&quot;, &quot;block&quot;:401&#125; 用助记词派生出公私钥参数：助记词，生成的数量 1&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;derive_owner_keys_from_brain_key&quot;, &quot;params&quot;: [&quot;IMPLIAL BURLY THYMY CAVITY GUNSHOP STOPE JAPE PENDA TOMBLET COUPLET RECENSE LUE ROTAL CIPPUS PRIER CODICES&quot;,5], &quot;id&quot;: 1&#125; 返回： 12345678910111213141516171819202122232425262728293031&#123; &quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: [ &#123; &quot;brain_priv_key&quot;: &quot;IMPLIAL BURLY THYMY CAVITY GUNSHOP STOPE JAPE PENDA TOMBLET COUPLET RECENSE LUE ROTAL CIPPUS PRIER CODICES&quot;, &quot;wif_priv_key&quot;: &quot;5JjmpBny2216AGBXu6jCV9f15aH27fRrczN466MPRv3DarZiVFK&quot;, &quot;pub_key&quot;: &quot;TLEC6UL7Q53kW15Tee78fLHZBcxN2Xzjf3bE8PGfYdA1pkZf5om7ks&quot; &#125;, &#123; &quot;brain_priv_key&quot;: &quot;IMPLIAL BURLY THYMY CAVITY GUNSHOP STOPE JAPE PENDA TOMBLET COUPLET RECENSE LUE ROTAL CIPPUS PRIER CODICES&quot;, &quot;wif_priv_key&quot;: &quot;5KVJ1Hj9TP1CwyjNV7BHj5vWxsAhAV95bpoR6NJXf7P3V9VhUx2&quot;, &quot;pub_key&quot;: &quot;TLEC6MfDADpmTzzP2ACAog7dZDVthz3Te9FBbQadPevPXRES659MgL&quot; &#125;, &#123; &quot;brain_priv_key&quot;: &quot;IMPLIAL BURLY THYMY CAVITY GUNSHOP STOPE JAPE PENDA TOMBLET COUPLET RECENSE LUE ROTAL CIPPUS PRIER CODICES&quot;, &quot;wif_priv_key&quot;: &quot;5KURTeSztbVERQSTpvFx867iFyZVzx8miWAWFRwkTBftUgpAUvk&quot;, &quot;pub_key&quot;: &quot;TLEC59hmVg8UxPxYGdeYFboBXZ4rSJBaBUHJsZp1EEajHPaVKmu1Eb&quot; &#125;, &#123; &quot;brain_priv_key&quot;: &quot;IMPLIAL BURLY THYMY CAVITY GUNSHOP STOPE JAPE PENDA TOMBLET COUPLET RECENSE LUE ROTAL CIPPUS PRIER CODICES&quot;, &quot;wif_priv_key&quot;: &quot;5JwjgX4pFqy8CtuyjRDhRgKTc6eDJcUjyUzbLbHD3CTigHbAf3N&quot;, &quot;pub_key&quot;: &quot;TLEC6k1FLFAkjE5BB9tZTuMzqTpPbUVKC6Njv4ZzPNQQmLdKJmnu6d&quot; &#125;, &#123; &quot;brain_priv_key&quot;: &quot;IMPLIAL BURLY THYMY CAVITY GUNSHOP STOPE JAPE PENDA TOMBLET COUPLET RECENSE LUE ROTAL CIPPUS PRIER CODICES&quot;, &quot;wif_priv_key&quot;: &quot;5KQCxgU452dcK4v2BYgA9672moucK8DQzQExpr82XMVDJdCA4gB&quot;, &quot;pub_key&quot;: &quot;TLEC8hdahDkRmz9MbkiBa9LHt39NKao5DcsyEfe4XZPgC8gXcTuZ7x&quot; &#125; ]&#125; 创建账户获取助记词参数：无 1&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;suggest_brain_key&quot;, &quot;params&quot;: [], &quot;id&quot;: 1&#125; 返回： 123456789&#123; &quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: &#123; &quot;brain_priv_key&quot;: &quot;IMPLIAL BURLY THYMY CAVITY GUNSHOP STOPE JAPE PENDA TOMBLET COUPLET RECENSE LUE ROTAL CIPPUS PRIER CODICES&quot;, &quot;wif_priv_key&quot;: &quot;5JjmpBny2216AGBXu6jCV9f15aH27fRrczN466MPRv3DarZiVFK&quot;, &quot;pub_key&quot;: &quot;BTS6UL7Q53kW15Tee78fLHZBcxN2Xzjf3bE8PGfYdA1pkZf5om7ks&quot; &#125;&#125; 用助记词注册账号参数：助记词，新账号名（8位以上字母开头，至少一个数字,特殊字符只能是-），支付费用帐号，推荐人帐号，是否真实创建 例：创建账号test-123，支付费用帐号和推荐人帐号是nathan 1&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;create_account_with_brain_key&quot;, &quot;params&quot;: [&quot;IMPLIAL BURLY THYMY CAVITY GUNSHOP STOPE JAPE PENDA TOMBLET COUPLET RECENSE LUE ROTAL CIPPUS PRIER CODICES&quot;,&quot;test-123&quot;,&quot;nathan&quot;,&quot;nathan&quot;,true], &quot;id&quot;: 1&#125; 返回： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&#123; &quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: &#123; &quot;ref_block_num&quot;: 29651, &quot;ref_block_prefix&quot;: 2513231364, &quot;expiration&quot;: &quot;2019-09-30T07:28:55&quot;, &quot;operations&quot;: [ [ 5, &#123; &quot;fee&quot;: &#123; &quot;amount&quot;: 514355, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;registrar&quot;: &quot;1.2.17&quot;, &quot;referrer&quot;: &quot;1.2.17&quot;, &quot;referrer_percent&quot;: 0, &quot;name&quot;: &quot;test-123&quot;, &quot;owner&quot;: &#123; &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [ [ &quot;BTS7kPRNM1yzvfKQBagMA6bQiwpAmaGBh6aP6mtr8h1YXX2nD3oWC&quot;, 1 ] ], &quot;address_auths&quot;: [] &#125;, &quot;active&quot;: &#123; &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [ [ &quot;BTS85y6zRw4KKxWbbPyEbGGSuBvwXDAMJPoSqRmQvcGDPU3WWGqnP&quot;, 1 ] ], &quot;address_auths&quot;: [] &#125;, &quot;options&quot;: &#123; &quot;memo_key&quot;: &quot;BTS7WX9CF4bbjkQHheLX4zMggYg6cXCJtPGT1it37dfGE8ctKKbC4&quot;, &quot;voting_account&quot;: &quot;1.2.5&quot;, &quot;num_witness&quot;: 0, &quot;num_committee&quot;: 0, &quot;votes&quot;: [], &quot;extensions&quot;: [] &#125;, &quot;extensions&quot;: &#123;&#125; &#125; ] ], &quot;extensions&quot;: [], &quot;signatures&quot;: [ &quot;206100580ba6369cb9d20ed4e1f4c05e61be2d60ca6fef4108e540947c4cd262007d45e2a295bc1eb89790ccc7802457955a035826fc0efeb21f63909192f7d3bb&quot; ] &#125;&#125; 账户余额和资产列表参数：账户名 1&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;list_account_balances&quot;, &quot;params&quot;: [&quot;nathan&quot;], &quot;id&quot;: 1&#125; 返回： 12345678910&#123; &quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: [ &#123; &quot;amount&quot;: &quot;999918734664049&quot;, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125; ]&#125; 通过资产id查询资产信息参数：资产id 1&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;get_asset&quot;, &quot;params&quot;: [&quot;1.3.0&quot;], &quot;id&quot;: 1&#125; 返回： 12345678910111213141516171819202122232425262728293031323334&#123; &quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: &#123; &quot;id&quot;: &quot;1.3.0&quot;, &quot;symbol&quot;: &quot;BTS&quot;, &quot;precision&quot;: 5, &quot;issuer&quot;: &quot;1.2.3&quot;, &quot;options&quot;: &#123; &quot;max_supply&quot;: &quot;1000000000000000&quot;, &quot;market_fee_percent&quot;: 0, &quot;max_market_fee&quot;: &quot;1000000000000000&quot;, &quot;issuer_permissions&quot;: 0, &quot;flags&quot;: 0, &quot;core_exchange_rate&quot;: &#123; &quot;base&quot;: &#123; &quot;amount&quot;: 1, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;quote&quot;: &#123; &quot;amount&quot;: 1, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125; &#125;, &quot;whitelist_authorities&quot;: [], &quot;blacklist_authorities&quot;: [], &quot;whitelist_markets&quot;: [], &quot;blacklist_markets&quot;: [], &quot;description&quot;: &quot;&quot;, &quot;extensions&quot;: &#123;&#125; &#125;, &quot;dynamic_asset_data_id&quot;: &quot;2.3.0&quot; &#125;&#125; 转账参数：源账户名，要发往的账户名，金额，币种，备注 1&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;transfer2&quot;, &quot;params&quot;: [&quot;nathan&quot;,&quot;alpha&quot;,10,&quot;BTS&quot;,&quot;This is memo&quot;], &quot;id&quot;: 1&#125; 返回： 12345678910111213141516171819202122232425262728293031323334353637383940&#123; &quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: [ &quot;a31884057f4c20724acb54c6817b709892a89de5&quot;, &#123; &quot;ref_block_num&quot;: 35238, &quot;ref_block_prefix&quot;: 4037660452, &quot;expiration&quot;: &quot;2019-09-19T06:07:45&quot;, &quot;operations&quot;: [ [ 0, &#123; &quot;fee&quot;: &#123; &quot;amount&quot;: 2105468, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;from&quot;: &quot;1.2.17&quot;, &quot;to&quot;: &quot;1.2.18&quot;, &quot;amount&quot;: &#123; &quot;amount&quot;: 1000000, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;memo&quot;: &#123; &quot;from&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;to&quot;: &quot;BTS5VS9fuuzs5exawXmVxvM94fKjtJR6nRQQqbdStnXV8V4ihGExQ&quot;, &quot;nonce&quot;: &quot;14845433245050049736&quot;, &quot;message&quot;: &quot;199b07f4622468588c88c88d9a4349b8842c2efbe535d99b74eba99e70e225f5&quot; &#125;, &quot;extensions&quot;: [] &#125; ] ], &quot;extensions&quot;: [], &quot;signatures&quot;: [ &quot;200ecd4ddb9a9563b54f34e68ac218404ad8006a0b6efb5d8c118bb768542c787a7c7fbefecd41422702d94ce0f4890afd60311a55fb717801aad647d1b7df8d23&quot; ] &#125; ]&#125; 近期活动参数：账号名，获取数量 1&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;get_account_history&quot;, &quot;params&quot;: [&quot;nathan&quot;,10], &quot;id&quot;: 1&#125; 返回： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398&#123; &quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: [ &#123; &quot;memo&quot;: &quot;&quot;, &quot;description&quot;: &quot;Create Account &apos;test-123&apos; (Fee: 5.14355 BTS)&quot;, &quot;op&quot;: &#123; &quot;id&quot;: &quot;1.11.54&quot;, &quot;op&quot;: [ 5, &#123; &quot;fee&quot;: &#123; &quot;amount&quot;: 514355, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;registrar&quot;: &quot;1.2.17&quot;, &quot;referrer&quot;: &quot;1.2.17&quot;, &quot;referrer_percent&quot;: 0, &quot;name&quot;: &quot;test-123&quot;, &quot;owner&quot;: &#123; &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [ [ &quot;BTS7kPRNM1yzvfKQBagMA6bQiwpAmaGBh6aP6mtr8h1YXX2nD3oWC&quot;, 1 ] ], &quot;address_auths&quot;: [] &#125;, &quot;active&quot;: &#123; &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [ [ &quot;BTS85y6zRw4KKxWbbPyEbGGSuBvwXDAMJPoSqRmQvcGDPU3WWGqnP&quot;, 1 ] ], &quot;address_auths&quot;: [] &#125;, &quot;options&quot;: &#123; &quot;memo_key&quot;: &quot;BTS7WX9CF4bbjkQHheLX4zMggYg6cXCJtPGT1it37dfGE8ctKKbC4&quot;, &quot;voting_account&quot;: &quot;1.2.5&quot;, &quot;num_witness&quot;: 0, &quot;num_committee&quot;: 0, &quot;votes&quot;: [], &quot;extensions&quot;: [] &#125;, &quot;extensions&quot;: &#123;&#125; &#125; ], &quot;result&quot;: [ 1, &quot;1.2.26&quot; ], &quot;block_num&quot;: 226260, &quot;trx_in_block&quot;: 0, &quot;op_in_trx&quot;: 0, &quot;virtual_op&quot;: 0 &#125; &#125;, &#123; &quot;memo&quot;: &quot;This is memo&quot;, &quot;description&quot;: &quot;Transfer 10 BTS from nathan to alpha -- Memo: This is memo (Fee: 21.05468 BTS)&quot;, &quot;op&quot;: &#123; &quot;id&quot;: &quot;1.11.53&quot;, &quot;op&quot;: [ 0, &#123; &quot;fee&quot;: &#123; &quot;amount&quot;: 2105468, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;from&quot;: &quot;1.2.17&quot;, &quot;to&quot;: &quot;1.2.18&quot;, &quot;amount&quot;: &#123; &quot;amount&quot;: 1000000, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;memo&quot;: &#123; &quot;from&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;to&quot;: &quot;BTS5VS9fuuzs5exawXmVxvM94fKjtJR6nRQQqbdStnXV8V4ihGExQ&quot;, &quot;nonce&quot;: &quot;14845433245050049736&quot;, &quot;message&quot;: &quot;199b07f4622468588c88c88d9a4349b8842c2efbe535d99b74eba99e70e225f5&quot; &#125;, &quot;extensions&quot;: [] &#125; ], &quot;result&quot;: [ 0, &#123;&#125; ], &quot;block_num&quot;: 35239, &quot;trx_in_block&quot;: 0, &quot;op_in_trx&quot;: 0, &quot;virtual_op&quot;: 0 &#125; &#125;, &#123; &quot;memo&quot;: &quot;1231456&quot;, &quot;description&quot;: &quot;Transfer 1 BTS from nathan to alpha -- Memo: 1231456 (Fee: 20.89843 BTS)&quot;, &quot;op&quot;: &#123; &quot;id&quot;: &quot;1.11.52&quot;, &quot;op&quot;: [ 0, &#123; &quot;fee&quot;: &#123; &quot;amount&quot;: 2089843, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;from&quot;: &quot;1.2.17&quot;, &quot;to&quot;: &quot;1.2.18&quot;, &quot;amount&quot;: &#123; &quot;amount&quot;: 100000, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;memo&quot;: &#123; &quot;from&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;to&quot;: &quot;BTS5VS9fuuzs5exawXmVxvM94fKjtJR6nRQQqbdStnXV8V4ihGExQ&quot;, &quot;nonce&quot;: &quot;505970742877495025&quot;, &quot;message&quot;: &quot;ac61bc16cfb0e9c0db19758388a51214&quot; &#125;, &quot;extensions&quot;: [] &#125; ], &quot;result&quot;: [ 0, &#123;&#125; ], &quot;block_num&quot;: 19868, &quot;trx_in_block&quot;: 0, &quot;op_in_trx&quot;: 0, &quot;virtual_op&quot;: 0 &#125; &#125;, &#123; &quot;memo&quot;: &quot;22222&quot;, &quot;description&quot;: &quot;Transfer 1.11111 BTS from nathan to alpha -- Memo: 22222 (Fee: 20.89843 BTS)&quot;, &quot;op&quot;: &#123; &quot;id&quot;: &quot;1.11.51&quot;, &quot;op&quot;: [ 0, &#123; &quot;fee&quot;: &#123; &quot;amount&quot;: 2089843, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;from&quot;: &quot;1.2.17&quot;, &quot;to&quot;: &quot;1.2.18&quot;, &quot;amount&quot;: &#123; &quot;amount&quot;: 111111, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;memo&quot;: &#123; &quot;from&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;to&quot;: &quot;BTS5VS9fuuzs5exawXmVxvM94fKjtJR6nRQQqbdStnXV8V4ihGExQ&quot;, &quot;nonce&quot;: &quot;11674897818616179291&quot;, &quot;message&quot;: &quot;69cc001a11d3007923dc4d00d28cac1f&quot; &#125;, &quot;extensions&quot;: [] &#125; ], &quot;result&quot;: [ 0, &#123;&#125; ], &quot;block_num&quot;: 19840, &quot;trx_in_block&quot;: 0, &quot;op_in_trx&quot;: 0, &quot;virtual_op&quot;: 0 &#125; &#125;, &#123; &quot;memo&quot;: &quot;1111&quot;, &quot;description&quot;: &quot;Transfer 1.11111 BTS from nathan to alpha -- Memo: 1111 (Fee: 20.89843 BTS)&quot;, &quot;op&quot;: &#123; &quot;id&quot;: &quot;1.11.50&quot;, &quot;op&quot;: [ 0, &#123; &quot;fee&quot;: &#123; &quot;amount&quot;: 2089843, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;from&quot;: &quot;1.2.17&quot;, &quot;to&quot;: &quot;1.2.18&quot;, &quot;amount&quot;: &#123; &quot;amount&quot;: 111111, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;memo&quot;: &#123; &quot;from&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;to&quot;: &quot;BTS5VS9fuuzs5exawXmVxvM94fKjtJR6nRQQqbdStnXV8V4ihGExQ&quot;, &quot;nonce&quot;: &quot;9873457945687579511&quot;, &quot;message&quot;: &quot;73a3be1a5879273ef17ef1704a09309a&quot; &#125;, &quot;extensions&quot;: [] &#125; ], &quot;result&quot;: [ 0, &#123;&#125; ], &quot;block_num&quot;: 15444, &quot;trx_in_block&quot;: 0, &quot;op_in_trx&quot;: 0, &quot;virtual_op&quot;: 0 &#125; &#125;, &#123; &quot;memo&quot;: &quot;1111&quot;, &quot;description&quot;: &quot;Transfer 1.10000 BTS from nathan to alpha -- Memo: 1111 (Fee: 20.89843 BTS)&quot;, &quot;op&quot;: &#123; &quot;id&quot;: &quot;1.11.49&quot;, &quot;op&quot;: [ 0, &#123; &quot;fee&quot;: &#123; &quot;amount&quot;: 2089843, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;from&quot;: &quot;1.2.17&quot;, &quot;to&quot;: &quot;1.2.18&quot;, &quot;amount&quot;: &#123; &quot;amount&quot;: 110000, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;memo&quot;: &#123; &quot;from&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;to&quot;: &quot;BTS5VS9fuuzs5exawXmVxvM94fKjtJR6nRQQqbdStnXV8V4ihGExQ&quot;, &quot;nonce&quot;: &quot;578028314678850645&quot;, &quot;message&quot;: &quot;c8813ee24bc9f75054379b6597ebd32f&quot; &#125;, &quot;extensions&quot;: [] &#125; ], &quot;result&quot;: [ 0, &#123;&#125; ], &quot;block_num&quot;: 15421, &quot;trx_in_block&quot;: 0, &quot;op_in_trx&quot;: 0, &quot;virtual_op&quot;: 0 &#125; &#125;, &#123; &quot;memo&quot;: &quot;1111&quot;, &quot;description&quot;: &quot;Transfer 1 BTS from nathan to alpha -- Memo: 1111 (Fee: 20.89843 BTS)&quot;, &quot;op&quot;: &#123; &quot;id&quot;: &quot;1.11.48&quot;, &quot;op&quot;: [ 0, &#123; &quot;fee&quot;: &#123; &quot;amount&quot;: 2089843, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;from&quot;: &quot;1.2.17&quot;, &quot;to&quot;: &quot;1.2.18&quot;, &quot;amount&quot;: &#123; &quot;amount&quot;: 100000, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;memo&quot;: &#123; &quot;from&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;to&quot;: &quot;BTS5VS9fuuzs5exawXmVxvM94fKjtJR6nRQQqbdStnXV8V4ihGExQ&quot;, &quot;nonce&quot;: &quot;1226546660888413102&quot;, &quot;message&quot;: &quot;f5ca6ac11b5a35c4b38cba6a29e8dbb6&quot; &#125;, &quot;extensions&quot;: [] &#125; ], &quot;result&quot;: [ 0, &#123;&#125; ], &quot;block_num&quot;: 15394, &quot;trx_in_block&quot;: 0, &quot;op_in_trx&quot;: 0, &quot;virtual_op&quot;: 0 &#125; &#125;, &#123; &quot;memo&quot;: &quot;here is the cash&quot;, &quot;description&quot;: &quot;Transfer 10.11111 BTS from nathan to alpha -- Memo: here is the cash (Fee: 21.05468 BTS)&quot;, &quot;op&quot;: &#123; &quot;id&quot;: &quot;1.11.47&quot;, &quot;op&quot;: [ 0, &#123; &quot;fee&quot;: &#123; &quot;amount&quot;: 2105468, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;from&quot;: &quot;1.2.17&quot;, &quot;to&quot;: &quot;1.2.18&quot;, &quot;amount&quot;: &#123; &quot;amount&quot;: 1011111, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;memo&quot;: &#123; &quot;from&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;to&quot;: &quot;BTS5VS9fuuzs5exawXmVxvM94fKjtJR6nRQQqbdStnXV8V4ihGExQ&quot;, &quot;nonce&quot;: &quot;18160081259166631953&quot;, &quot;message&quot;: &quot;81cc43710b389adbd4d56c40c1428b1729e08edff97ad4786e20e2caa4f0fb19&quot; &#125;, &quot;extensions&quot;: [] &#125; ], &quot;result&quot;: [ 0, &#123;&#125; ], &quot;block_num&quot;: 15267, &quot;trx_in_block&quot;: 0, &quot;op_in_trx&quot;: 0, &quot;virtual_op&quot;: 0 &#125; &#125;, &#123; &quot;memo&quot;: &quot;here is the cash&quot;, &quot;description&quot;: &quot;Transfer 10.11100 BTS from nathan to alpha -- Memo: here is the cash (Fee: 21.05468 BTS)&quot;, &quot;op&quot;: &#123; &quot;id&quot;: &quot;1.11.46&quot;, &quot;op&quot;: [ 0, &#123; &quot;fee&quot;: &#123; &quot;amount&quot;: 2105468, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;from&quot;: &quot;1.2.17&quot;, &quot;to&quot;: &quot;1.2.18&quot;, &quot;amount&quot;: &#123; &quot;amount&quot;: 1011100, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;memo&quot;: &#123; &quot;from&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;to&quot;: &quot;BTS5VS9fuuzs5exawXmVxvM94fKjtJR6nRQQqbdStnXV8V4ihGExQ&quot;, &quot;nonce&quot;: &quot;7855845311644090944&quot;, &quot;message&quot;: &quot;cbd9b0f5aa51d4a9fc1dc8f5338d16d3148fa68d9e917580cbe9d06e0df97f21&quot; &#125;, &quot;extensions&quot;: [] &#125; ], &quot;result&quot;: [ 0, &#123;&#125; ], &quot;block_num&quot;: 15247, &quot;trx_in_block&quot;: 0, &quot;op_in_trx&quot;: 0, &quot;virtual_op&quot;: 0 &#125; &#125;, &#123; &quot;memo&quot;: &quot;test transfer2&quot;, &quot;description&quot;: &quot;Transfer 1 BTS from nathan to alpha -- Memo: test transfer2 (Fee: 21.05468 BTS)&quot;, &quot;op&quot;: &#123; &quot;id&quot;: &quot;1.11.45&quot;, &quot;op&quot;: [ 0, &#123; &quot;fee&quot;: &#123; &quot;amount&quot;: 2105468, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;from&quot;: &quot;1.2.17&quot;, &quot;to&quot;: &quot;1.2.18&quot;, &quot;amount&quot;: &#123; &quot;amount&quot;: 100000, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;memo&quot;: &#123; &quot;from&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;to&quot;: &quot;BTS5VS9fuuzs5exawXmVxvM94fKjtJR6nRQQqbdStnXV8V4ihGExQ&quot;, &quot;nonce&quot;: &quot;7279384504810601963&quot;, &quot;message&quot;: &quot;18df1913c8b10bb1e16722c6d170cbb5c865454db16e49a4eb9c9241840e77b9&quot; &#125;, &quot;extensions&quot;: [] &#125; ], &quot;result&quot;: [ 0, &#123;&#125; ], &quot;block_num&quot;: 4344, &quot;trx_in_block&quot;: 0, &quot;op_in_trx&quot;: 0, &quot;virtual_op&quot;: 0 &#125; &#125; ]&#125; 查看指定类型的活动参数：账户名，活动ID数组，开始下标，获取数量 1&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;get_account_history_by_operations&quot;, &quot;params&quot;: [&quot;nathan&quot;,[0,5],1,1], &quot;id&quot;: 2&#125; 返回： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&#123; &quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: &#123; &quot;total_count&quot;: 3, &quot;result_count&quot;: 1, &quot;details&quot;: [ &#123; &quot;memo&quot;: &quot;&quot;, &quot;description&quot;: &quot;Create Account &apos;alpha&apos; (Fee: 2000.14062 BTS)&quot;, &quot;op&quot;: &#123; &quot;id&quot;: &quot;1.11.2&quot;, &quot;op&quot;: [ 5, &#123; &quot;fee&quot;: &#123; &quot;amount&quot;: 200014062, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;registrar&quot;: &quot;1.2.17&quot;, &quot;referrer&quot;: &quot;1.2.17&quot;, &quot;referrer_percent&quot;: 0, &quot;name&quot;: &quot;alpha&quot;, &quot;owner&quot;: &#123; &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [ [ &quot;BTS5VS9fuuzs5exawXmVxvM94fKjtJR6nRQQqbdStnXV8V4ihGExQ&quot;, 1 ] ], &quot;address_auths&quot;: [] &#125;, &quot;active&quot;: &#123; &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [ [ &quot;BTS5VS9fuuzs5exawXmVxvM94fKjtJR6nRQQqbdStnXV8V4ihGExQ&quot;, 1 ] ], &quot;address_auths&quot;: [] &#125;, &quot;options&quot;: &#123; &quot;memo_key&quot;: &quot;BTS5VS9fuuzs5exawXmVxvM94fKjtJR6nRQQqbdStnXV8V4ihGExQ&quot;, &quot;voting_account&quot;: &quot;1.2.5&quot;, &quot;num_witness&quot;: 0, &quot;num_committee&quot;: 0, &quot;votes&quot;: [], &quot;extensions&quot;: [] &#125;, &quot;extensions&quot;: &#123;&#125; &#125; ], &quot;result&quot;: [ 1, &quot;1.2.18&quot; ], &quot;block_num&quot;: 336, &quot;trx_in_block&quot;: 0, &quot;op_in_trx&quot;: 0, &quot;virtual_op&quot;: 0 &#125;, &quot;transaction_id&quot;: &quot;0ab9dd21324f024194811d707dc33d2c82e061bf&quot; &#125; ] &#125;&#125; 投票投票给超级节点需要支付费用，所有必须要有余额 参数：投票账号，超级节点账号，投票（true）或取消投票（false），是否广播交易 1&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;vote_for_witness&quot;, &quot;params&quot;: [&quot;nathan&quot;,&quot;init0&quot;,true,true], &quot;id&quot;: 1&#125; 返回： 12345678910111213141516171819202122232425262728293031323334353637383940414243&#123; &quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: &#123; &quot;ref_block_num&quot;: 38663, &quot;ref_block_prefix&quot;: 336266918, &quot;expiration&quot;: &quot;2019-10-08T10:04:55&quot;, &quot;operations&quot;: [ [ 6, &#123; &quot;fee&quot;: &#123; &quot;amount&quot;: 2008398, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;account&quot;: &quot;1.2.17&quot;, &quot;new_options&quot;: &#123; &quot;memo_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;voting_account&quot;: &quot;1.2.5&quot;, &quot;num_witness&quot;: 0, &quot;num_committee&quot;: 0, &quot;votes&quot;: [ &quot;1:0&quot;, &quot;0:23&quot;, &quot;0:24&quot;, &quot;0:25&quot;, &quot;0:26&quot;, &quot;0:27&quot;, &quot;0:28&quot;, &quot;0:29&quot; ], &quot;extensions&quot;: [] &#125;, &quot;extensions&quot;: &#123;&#125; &#125; ] ], &quot;extensions&quot;: [], &quot;signatures&quot;: [ &quot;1f64b5c1e6c61a56068fb32e280669f5c6d6a14f6b04cf6116a804c06dd86cfc0f335cb1ab8242daeadd0f88caa05f25a193ec7fa94ef3074d1afad2d6c368347c&quot; ] &#125;&#125; 投票给理事会成员需要支付费用，所有必须要有余额 参数：投票账号，理事会成员账号，投票（true）或取消投票（false），是否广播交易 1&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;vote_for_committee_member&quot;, &quot;params&quot;: [&quot;nathan&quot;,&quot;init0&quot;,true,true], &quot;id&quot;: 1&#125; 返回： 1234567891011121314151617181920212223242526272829303132333435363738394041424344&#123; &quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: &#123; &quot;ref_block_num&quot;: 38687, &quot;ref_block_prefix&quot;: 1350493683, &quot;expiration&quot;: &quot;2019-10-08T10:06:55&quot;, &quot;operations&quot;: [ [ 6, &#123; &quot;fee&quot;: &#123; &quot;amount&quot;: 2008789, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;account&quot;: &quot;1.2.17&quot;, &quot;new_options&quot;: &#123; &quot;memo_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;voting_account&quot;: &quot;1.2.5&quot;, &quot;num_witness&quot;: 0, &quot;num_committee&quot;: 0, &quot;votes&quot;: [ &quot;1:0&quot;, &quot;0:11&quot;, &quot;0:23&quot;, &quot;0:24&quot;, &quot;0:25&quot;, &quot;0:26&quot;, &quot;0:27&quot;, &quot;0:28&quot;, &quot;0:29&quot; ], &quot;extensions&quot;: [] &#125;, &quot;extensions&quot;: &#123;&#125; &#125; ] ], &quot;extensions&quot;: [], &quot;signatures&quot;: [ &quot;1f108b1f4155b2f50f994cb4f9665435f198037969e5e8242bdfb8b688715b69a728fecdf6edc575e56aee7e2b1b745d3e2160ffb026dad3dbf7c498ef77b551b3&quot; ] &#125;&#125; 资产资产列表参数：列表中第一个资产的符号（可以是空），获取数量（最大100） 1&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;list_assets&quot;, &quot;params&quot;: [&quot;&quot;,10], &quot;id&quot;: 1&#125; 返回： 123456789101112131415161718192021222324252627282930313233343536&#123; &quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: [ &#123; &quot;id&quot;: &quot;1.3.0&quot;, &quot;symbol&quot;: &quot;BTS&quot;, &quot;precision&quot;: 5, &quot;issuer&quot;: &quot;1.2.3&quot;, &quot;options&quot;: &#123; &quot;max_supply&quot;: &quot;1000000000000000&quot;, &quot;market_fee_percent&quot;: 0, &quot;max_market_fee&quot;: &quot;1000000000000000&quot;, &quot;issuer_permissions&quot;: 0, &quot;flags&quot;: 0, &quot;core_exchange_rate&quot;: &#123; &quot;base&quot;: &#123; &quot;amount&quot;: 1, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125;, &quot;quote&quot;: &#123; &quot;amount&quot;: 1, &quot;asset_id&quot;: &quot;1.3.0&quot; &#125; &#125;, &quot;whitelist_authorities&quot;: [], &quot;blacklist_authorities&quot;: [], &quot;whitelist_markets&quot;: [], &quot;blacklist_markets&quot;: [], &quot;description&quot;: &quot;&quot;, &quot;extensions&quot;: &#123;&#125; &#125;, &quot;dynamic_asset_data_id&quot;: &quot;2.3.0&quot; &#125; ]&#125; 创建资产暂无 查询见证人详情参数：见证人账号 1&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;get_witness&quot;, &quot;params&quot;: [&quot;init0&quot;], &quot;id&quot;: 1&#125; 返回： 12345678910111213141516&#123; &quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: &#123; &quot;id&quot;: &quot;1.6.1&quot;, &quot;witness_account&quot;: &quot;1.2.6&quot;, &quot;last_aslot&quot;: 3741892, &quot;signing_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;pay_vb&quot;: &quot;1.13.11&quot;, &quot;vote_id&quot;: &quot;1:0&quot;, &quot;total_votes&quot;: 0, &quot;url&quot;: &quot;&quot;, &quot;total_missed&quot;: 0, &quot;last_confirmed_block_num&quot;: 37773 &#125;&#125; 活动id对照表 ID 活动命令 备注 0 transfer_operation 转账 1 limit_order_create_operation 创建限价单 2 limit_order_cancel_operation 取消限价单 3 call_order_update_operation 更新债仓 4 fill_order_operation 5 account_create_operation 创建账户 6 account_update_operation 更新账户 7 account_whitelist_operation 账户白名单 8 account_upgrade_operation 升级账户 9 account_transfer_operation 账户转移 10 asset_create_operation 创建资产 11 asset_update_operation 更新资产 12 asset_update_bitasset_operation 更新智能货币 13 asset_update_feed_producers_operation 更新资产喂价提供者 14 asset_issue_operation 资产发行 15 asset_reserve_operation 销毁资产 16 asset_fund_fee_pool_operation 注资资产手续费池 17 asset_settle_operation 资产强清 18 asset_global_settle_operation 全局资产强清 19 asset_publish_feed_operation 发布资产喂价 20 witness_create_operation 创建见证人 21 witness_update_operation 更新见证人 22 proposal_create_operation 创建提议 23 proposal_update_operation 更新提议 24 proposal_delete_operation 删除提议 25 withdraw_permission_create_operation 授权提款 26 withdraw_permission_update_operation 更新提款授权 27 withdraw_permission_claim_operation 行使提款授权 28 withdraw_permission_delete_operation 删除提款授权 29 committee_member_create_operation 创建理事会成员 30 committee_member_update_operation 更新理事会成员 31 committee_member_update_global_paramet 全局参数更新 32 vesting_balance_create_operation 创建冻结账目余额 33 vesting_balance_withdraw_operation 提取解冻账户余额 34 worker_create_operation 35 custom_operation 自定义 36 assert_operation 断言操作 37 balance_claim_operation 申领余额 38 override_transfer_operation 强制转账 39 transfer_to_blind_operation 40 blind_transfer_operation 向隐私账户转账 41 transfer_from_blind_operation 从隐私账户转出 42 asset_settle_cancel_operation 43 asset_claim_fees_operation 申领资产手续费 44 fba_distribute_operation 45 bid_collateral_operation 抵押物竞价 46 execute_bid_operation 47 asset_claim_pool_operation 申领资产手续费池 48 asset_update_issuer_operation 更新资产发行者 49 custom_authority_create_operation 50 custom_authority_update_operation 51 custom_authority_delete_operation 获取所有费用参数参数：无 1&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;get_object&quot;, &quot;params&quot;: [&quot;2.0.0&quot;], &quot;id&quot;: 1&#125; 返回： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372&#123; &quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: [ &#123; &quot;id&quot;: &quot;2.0.0&quot;, &quot;parameters&quot;: &#123; &quot;current_fees&quot;: &#123; &quot;parameters&quot;: [ [ 0, &#123; &quot;fee&quot;: 2000000, &quot;price_per_kbyte&quot;: 1000000 &#125; ], [ 1, &#123; &quot;fee&quot;: 500000 &#125; ], [ 2, &#123; &quot;fee&quot;: 0 &#125; ], [ 3, &#123; &quot;fee&quot;: 2000000 &#125; ], [ 4, &#123;&#125; ], [ 5, &#123; &quot;basic_fee&quot;: 500000, &quot;premium_fee&quot;: 200000000, &quot;price_per_kbyte&quot;: 100000 &#125; ], [ 6, &#123; &quot;fee&quot;: 2000000, &quot;price_per_kbyte&quot;: 100000 &#125; ], [ 7, &#123; &quot;fee&quot;: 300000 &#125; ], [ 8, &#123; &quot;membership_annual_fee&quot;: 200000000, &quot;membership_lifetime_fee&quot;: 1000000000 &#125; ], [ 9, &#123; &quot;fee&quot;: 50000000 &#125; ], [ 10, &#123; &quot;symbol3&quot;: &quot;50000000000&quot;, &quot;symbol4&quot;: &quot;30000000000&quot;, &quot;long_symbol&quot;: 500000000, &quot;price_per_kbyte&quot;: 10 &#125; ], [ 11, &#123; &quot;fee&quot;: 50000000, &quot;price_per_kbyte&quot;: 10 &#125; ], [ 12, &#123; &quot;fee&quot;: 50000000 &#125; ], [ 13, &#123; &quot;fee&quot;: 50000000 &#125; ], [ 14, &#123; &quot;fee&quot;: 2000000, &quot;price_per_kbyte&quot;: 100000 &#125; ], [ 15, &#123; &quot;fee&quot;: 2000000 &#125; ], [ 16, &#123; &quot;fee&quot;: 100000 &#125; ], [ 17, &#123; &quot;fee&quot;: 10000000 &#125; ], [ 18, &#123; &quot;fee&quot;: 50000000 &#125; ], [ 19, &#123; &quot;fee&quot;: 100000 &#125; ], [ 20, &#123; &quot;fee&quot;: 500000000 &#125; ], [ 21, &#123; &quot;fee&quot;: 2000000 &#125; ], [ 22, &#123; &quot;fee&quot;: 2000000, &quot;price_per_kbyte&quot;: 10 &#125; ], [ 23, &#123; &quot;fee&quot;: 2000000, &quot;price_per_kbyte&quot;: 10 &#125; ], [ 24, &#123; &quot;fee&quot;: 100000 &#125; ], [ 25, &#123; &quot;fee&quot;: 100000 &#125; ], [ 26, &#123; &quot;fee&quot;: 100000 &#125; ], [ 27, &#123; &quot;fee&quot;: 2000000, &quot;price_per_kbyte&quot;: 10 &#125; ], [ 28, &#123; &quot;fee&quot;: 0 &#125; ], [ 29, &#123; &quot;fee&quot;: 500000000 &#125; ], [ 30, &#123; &quot;fee&quot;: 2000000 &#125; ], [ 31, &#123; &quot;fee&quot;: 100000 &#125; ], [ 32, &#123; &quot;fee&quot;: 100000 &#125; ], [ 33, &#123; &quot;fee&quot;: 2000000 &#125; ], [ 34, &#123; &quot;fee&quot;: 500000000 &#125; ], [ 35, &#123; &quot;fee&quot;: 100000, &quot;price_per_kbyte&quot;: 10 &#125; ], [ 36, &#123; &quot;fee&quot;: 100000 &#125; ], [ 37, &#123;&#125; ], [ 38, &#123; &quot;fee&quot;: 2000000, &quot;price_per_kbyte&quot;: 10 &#125; ], [ 39, &#123; &quot;fee&quot;: 500000, &quot;price_per_output&quot;: 500000 &#125; ], [ 40, &#123; &quot;fee&quot;: 500000, &quot;price_per_output&quot;: 500000 &#125; ], [ 41, &#123; &quot;fee&quot;: 500000 &#125; ], [ 42, &#123;&#125; ], [ 43, &#123; &quot;fee&quot;: 2000000 &#125; ], [ 44, &#123;&#125; ], [ 45, &#123; &quot;fee&quot;: 2000000 &#125; ], [ 46, &#123;&#125; ], [ 47, &#123; &quot;fee&quot;: 2000000 &#125; ], [ 48, &#123; &quot;fee&quot;: 2000000 &#125; ] ], &quot;scale&quot;: 10000 &#125;, &quot;block_interval&quot;: 5, &quot;maintenance_interval&quot;: 86400, &quot;maintenance_skip_slots&quot;: 3, &quot;committee_proposal_review_period&quot;: 1209600, &quot;maximum_transaction_size&quot;: 2048, &quot;maximum_block_size&quot;: 2000000, &quot;maximum_time_until_expiration&quot;: 86400, &quot;maximum_proposal_lifetime&quot;: 2419200, &quot;maximum_asset_whitelist_authorities&quot;: 10, &quot;maximum_asset_feed_publishers&quot;: 10, &quot;maximum_witness_count&quot;: 1001, &quot;maximum_committee_count&quot;: 1001, &quot;maximum_authority_membership&quot;: 10, &quot;reserve_percent_of_fee&quot;: 2000, &quot;network_percent_of_fee&quot;: 2000, &quot;lifetime_referrer_percent_of_fee&quot;: 3000, &quot;cashback_vesting_period_seconds&quot;: 31536000, &quot;cashback_vesting_threshold&quot;: 10000000, &quot;count_non_member_votes&quot;: true, &quot;allow_non_member_whitelists&quot;: false, &quot;witness_pay_per_block&quot;: 1000000, &quot;worker_budget_per_day&quot;: &quot;50000000000&quot;, &quot;max_predicate_opcode&quot;: 1, &quot;fee_liquidation_threshold&quot;: 10000000, &quot;accounts_per_fee_scale&quot;: 1000, &quot;account_fee_scale_bitshifts&quot;: 4, &quot;max_authority_depth&quot;: 2, &quot;extensions&quot;: &#123;&#125; &#125;, &quot;next_available_vote_id&quot;: 30, &quot;active_committee_members&quot;: [ &quot;1.5.0&quot;, &quot;1.5.1&quot;, &quot;1.5.2&quot;, &quot;1.5.3&quot;, &quot;1.5.4&quot;, &quot;1.5.5&quot;, &quot;1.5.6&quot;, &quot;1.5.7&quot;, &quot;1.5.8&quot;, &quot;1.5.10&quot;, &quot;1.5.11&quot; ], &quot;active_witnesses&quot;: [ &quot;1.6.1&quot;, &quot;1.6.2&quot;, &quot;1.6.3&quot;, &quot;1.6.4&quot;, &quot;1.6.5&quot;, &quot;1.6.6&quot;, &quot;1.6.7&quot;, &quot;1.6.8&quot;, &quot;1.6.9&quot;, &quot;1.6.10&quot;, &quot;1.6.11&quot; ] &#125; ]&#125;]]></content>
      <categories>
        <category>BTS</category>
      </categories>
      <tags>
        <tag>BAR</tag>
        <tag>比特股BTS</tag>
        <tag>RPC接口</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[比特股BTS和BAR类节点搭建]]></title>
    <url>%2F2020%2F12%2F14%2F24.%E6%AF%94%E7%89%B9%E8%82%A1BTS%E5%92%8CBAR%E7%B1%BB%E8%8A%82%E7%82%B9%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚个人博客：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 简述本文教程使用于任何比特股（bitshares）类链的搭建，例如BAR、公信宝以及其他通过比特股源码修改搭建的山寨链的搭建。本文搭建的环境为私有环境，方便测试和开发。系统最好选用Ubuntu，用CentOS可能需要安装其他依赖。 下载程序到github上下载编译好的程序，也可以自己下载源码，根据文档编译，但是需要的配置很高（8G内存）不然会编译失败，而且编译要好几个小时。 BTS：https://github.com/bitshares/bitshares-core/releases BAR：https://github.com/bar-chain/bar-core 我这里直接下载编译好的二进制程序 1wget https://github.com/bitshares/bitshares-core/releases/download/3.3.2/bitshares-core-3.3.2-linux-amd64-bin.tar.bz2 解压 1tar -xjf bitshares-core-3.3.2-linux-amd64-bin.tar.bz2 得到两个应用程序文件 witness_node：节点程序 cli_wallet：钱包命令行程序 创建创世数据文件如果是同步公链的数据，直接跳过这一步即可 123mkdir genesiscd genesisvi genesis.json 将下面的配置信息复制保存 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379&#123; &quot;initial_timestamp&quot;: &quot;2019-02-14T20:32:55&quot;, &quot;max_core_supply&quot;: &quot;1000000000000000&quot;, &quot;initial_parameters&quot;: &#123; &quot;current_fees&quot;: &#123; &quot;parameters&quot;: [[ 0,&#123; &quot;fee&quot;: 2000000, &quot;price_per_kbyte&quot;: 1000000 &#125; ],[ 1,&#123; &quot;fee&quot;: 500000 &#125; ],[ 2,&#123; &quot;fee&quot;: 0 &#125; ],[ 3,&#123; &quot;fee&quot;: 2000000 &#125; ],[ 4,&#123;&#125; ],[ 5,&#123; &quot;basic_fee&quot;: 500000, &quot;premium_fee&quot;: 200000000, &quot;price_per_kbyte&quot;: 100000 &#125; ],[ 6,&#123; &quot;fee&quot;: 2000000, &quot;price_per_kbyte&quot;: 100000 &#125; ],[ 7,&#123; &quot;fee&quot;: 300000 &#125; ],[ 8,&#123; &quot;membership_annual_fee&quot;: 200000000, &quot;membership_lifetime_fee&quot;: 1000000000 &#125; ],[ 9,&#123; &quot;fee&quot;: 50000000 &#125; ],[ 10,&#123; &quot;symbol3&quot;: &quot;50000000000&quot;, &quot;symbol4&quot;: &quot;30000000000&quot;, &quot;long_symbol&quot;: 500000000, &quot;price_per_kbyte&quot;: 10 &#125; ],[ 11,&#123; &quot;fee&quot;: 50000000, &quot;price_per_kbyte&quot;: 10 &#125; ],[ 12,&#123; &quot;fee&quot;: 50000000 &#125; ],[ 13,&#123; &quot;fee&quot;: 50000000 &#125; ],[ 14,&#123; &quot;fee&quot;: 2000000, &quot;price_per_kbyte&quot;: 100000 &#125; ],[ 15,&#123; &quot;fee&quot;: 2000000 &#125; ],[ 16,&#123; &quot;fee&quot;: 100000 &#125; ],[ 17,&#123; &quot;fee&quot;: 10000000 &#125; ],[ 18,&#123; &quot;fee&quot;: 50000000 &#125; ],[ 19,&#123; &quot;fee&quot;: 100000 &#125; ],[ 20,&#123; &quot;fee&quot;: 500000000 &#125; ],[ 21,&#123; &quot;fee&quot;: 2000000 &#125; ],[ 22,&#123; &quot;fee&quot;: 2000000, &quot;price_per_kbyte&quot;: 10 &#125; ],[ 23,&#123; &quot;fee&quot;: 2000000, &quot;price_per_kbyte&quot;: 10 &#125; ],[ 24,&#123; &quot;fee&quot;: 100000 &#125; ],[ 25,&#123; &quot;fee&quot;: 100000 &#125; ],[ 26,&#123; &quot;fee&quot;: 100000 &#125; ],[ 27,&#123; &quot;fee&quot;: 2000000, &quot;price_per_kbyte&quot;: 10 &#125; ],[ 28,&#123; &quot;fee&quot;: 0 &#125; ],[ 29,&#123; &quot;fee&quot;: 500000000 &#125; ],[ 30,&#123; &quot;fee&quot;: 2000000 &#125; ],[ 31,&#123; &quot;fee&quot;: 100000 &#125; ],[ 32,&#123; &quot;fee&quot;: 100000 &#125; ],[ 33,&#123; &quot;fee&quot;: 2000000 &#125; ],[ 34,&#123; &quot;fee&quot;: 500000000 &#125; ],[ 35,&#123; &quot;fee&quot;: 100000, &quot;price_per_kbyte&quot;: 10 &#125; ],[ 36,&#123; &quot;fee&quot;: 100000 &#125; ],[ 37,&#123;&#125; ],[ 38,&#123; &quot;fee&quot;: 2000000, &quot;price_per_kbyte&quot;: 10 &#125; ],[ 39,&#123; &quot;fee&quot;: 500000, &quot;price_per_output&quot;: 500000 &#125; ],[ 40,&#123; &quot;fee&quot;: 500000, &quot;price_per_output&quot;: 500000 &#125; ],[ 41,&#123; &quot;fee&quot;: 500000 &#125; ],[ 42,&#123;&#125; ],[ 43,&#123; &quot;fee&quot;: 2000000 &#125; ],[ 44,&#123;&#125; ],[ 45,&#123; &quot;fee&quot;: 2000000 &#125; ],[ 46,&#123;&#125; ],[ 47,&#123; &quot;fee&quot;: 2000000 &#125; ],[ 48,&#123; &quot;fee&quot;: 2000000 &#125; ] ], &quot;scale&quot;: 10000 &#125;, &quot;block_interval&quot;: 5, &quot;maintenance_interval&quot;: 86400, &quot;maintenance_skip_slots&quot;: 3, &quot;committee_proposal_review_period&quot;: 1209600, &quot;maximum_transaction_size&quot;: 2048, &quot;maximum_block_size&quot;: 2000000, &quot;maximum_time_until_expiration&quot;: 86400, &quot;maximum_proposal_lifetime&quot;: 2419200, &quot;maximum_asset_whitelist_authorities&quot;: 10, &quot;maximum_asset_feed_publishers&quot;: 10, &quot;maximum_witness_count&quot;: 1001, &quot;maximum_committee_count&quot;: 1001, &quot;maximum_authority_membership&quot;: 10, &quot;reserve_percent_of_fee&quot;: 2000, &quot;network_percent_of_fee&quot;: 2000, &quot;lifetime_referrer_percent_of_fee&quot;: 3000, &quot;cashback_vesting_period_seconds&quot;: 31536000, &quot;cashback_vesting_threshold&quot;: 10000000, &quot;count_non_member_votes&quot;: true, &quot;allow_non_member_whitelists&quot;: false, &quot;witness_pay_per_block&quot;: 1000000, &quot;worker_budget_per_day&quot;: &quot;50000000000&quot;, &quot;max_predicate_opcode&quot;: 1, &quot;fee_liquidation_threshold&quot;: 10000000, &quot;accounts_per_fee_scale&quot;: 1000, &quot;account_fee_scale_bitshifts&quot;: 4, &quot;max_authority_depth&quot;: 2, &quot;extensions&quot;: [] &#125;, &quot;initial_accounts&quot;: [&#123; &quot;name&quot;: &quot;init0&quot;, &quot;owner_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;active_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;is_lifetime_member&quot;: true &#125;,&#123; &quot;name&quot;: &quot;init1&quot;, &quot;owner_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;active_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;is_lifetime_member&quot;: true &#125;,&#123; &quot;name&quot;: &quot;init2&quot;, &quot;owner_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;active_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;is_lifetime_member&quot;: true &#125;,&#123; &quot;name&quot;: &quot;init3&quot;, &quot;owner_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;active_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;is_lifetime_member&quot;: true &#125;,&#123; &quot;name&quot;: &quot;init4&quot;, &quot;owner_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;active_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;is_lifetime_member&quot;: true &#125;,&#123; &quot;name&quot;: &quot;init5&quot;, &quot;owner_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;active_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;is_lifetime_member&quot;: true &#125;,&#123; &quot;name&quot;: &quot;init6&quot;, &quot;owner_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;active_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;is_lifetime_member&quot;: true &#125;,&#123; &quot;name&quot;: &quot;init7&quot;, &quot;owner_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;active_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;is_lifetime_member&quot;: true &#125;,&#123; &quot;name&quot;: &quot;init8&quot;, &quot;owner_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;active_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;is_lifetime_member&quot;: true &#125;,&#123; &quot;name&quot;: &quot;init9&quot;, &quot;owner_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;active_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;is_lifetime_member&quot;: true &#125;,&#123; &quot;name&quot;: &quot;init10&quot;, &quot;owner_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;active_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;is_lifetime_member&quot;: true &#125;,&#123; &quot;name&quot;: &quot;nathan&quot;, &quot;owner_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;active_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;is_lifetime_member&quot;: false &#125; ], &quot;initial_assets&quot;: [], &quot;initial_balances&quot;: [&#123; &quot;owner&quot;: &quot;BTSFAbAx7yuxt725qSZvfwWqkdCwp9ZnUama&quot;, &quot;asset_symbol&quot;: &quot;BTS&quot;, &quot;amount&quot;: &quot;1000000000000000&quot; &#125; ], &quot;initial_vesting_balances&quot;: [], &quot;initial_active_witnesses&quot;: 11, &quot;initial_witness_candidates&quot;: [&#123; &quot;owner_name&quot;: &quot;init0&quot;, &quot;block_signing_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot; &#125;,&#123; &quot;owner_name&quot;: &quot;init1&quot;, &quot;block_signing_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot; &#125;,&#123; &quot;owner_name&quot;: &quot;init2&quot;, &quot;block_signing_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot; &#125;,&#123; &quot;owner_name&quot;: &quot;init3&quot;, &quot;block_signing_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot; &#125;,&#123; &quot;owner_name&quot;: &quot;init4&quot;, &quot;block_signing_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot; &#125;,&#123; &quot;owner_name&quot;: &quot;init5&quot;, &quot;block_signing_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot; &#125;,&#123; &quot;owner_name&quot;: &quot;init6&quot;, &quot;block_signing_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot; &#125;,&#123; &quot;owner_name&quot;: &quot;init7&quot;, &quot;block_signing_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot; &#125;,&#123; &quot;owner_name&quot;: &quot;init8&quot;, &quot;block_signing_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot; &#125;,&#123; &quot;owner_name&quot;: &quot;init9&quot;, &quot;block_signing_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot; &#125;,&#123; &quot;owner_name&quot;: &quot;init10&quot;, &quot;block_signing_key&quot;: &quot;BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot; &#125; ], &quot;initial_committee_candidates&quot;: [&#123; &quot;owner_name&quot;: &quot;init0&quot; &#125;,&#123; &quot;owner_name&quot;: &quot;init1&quot; &#125;,&#123; &quot;owner_name&quot;: &quot;init2&quot; &#125;,&#123; &quot;owner_name&quot;: &quot;init3&quot; &#125;,&#123; &quot;owner_name&quot;: &quot;init4&quot; &#125;,&#123; &quot;owner_name&quot;: &quot;init5&quot; &#125;,&#123; &quot;owner_name&quot;: &quot;init6&quot; &#125;,&#123; &quot;owner_name&quot;: &quot;init7&quot; &#125;,&#123; &quot;owner_name&quot;: &quot;init8&quot; &#125;,&#123; &quot;owner_name&quot;: &quot;init9&quot; &#125;,&#123; &quot;owner_name&quot;: &quot;init10&quot; &#125; ], &quot;initial_worker_candidates&quot;: [], &quot;immutable_parameters&quot;: &#123; &quot;min_committee_member_count&quot;: 11, &quot;min_witness_count&quot;: 11, &quot;num_special_accounts&quot;: 0, &quot;num_special_assets&quot;: 0 &#125;&#125; 初始化节点进入程序所在目录 12[root@gamesrv bts]# lscli_wallet genesis witness_node 执行下面的命令创建创世区块数据 123456789101112./witness_node --data-dir data --genesis-json genesis/genesis.json --seed-nodes &quot;[]&quot;430942ms th_a config_util.cpp:247 create_new_config_fi ] Writing new config file at /home/jian/bts/data/config.ini430942ms th_a config_util.cpp:309 create_logging_confi ] Writing new config file at /home/jian/bts/data/logging.ini430944ms th_a witness.cpp:121 plugin_initialize ] witness plugin: plugin_initialize() begin430945ms th_a witness.cpp:114 add_private_key ] Public Key: BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV430945ms th_a witness.cpp:167 plugin_initialize ] witness plugin: plugin_initialize() end.........plugin_startup() end431033ms th_a application.cpp:1179 startup_plugins ] Plugin witness started431033ms th_a main.cpp:183 main ] Started BitShares node on a chain with 0 blocks.431034ms th_a main.cpp:184 main ] Chain ID is ced68e68d7e41258f6a2e71643e41c690edae19dbed8c5f525a0f5c74d322fa9 看到Chain ID就可以按Ctrl+C退出了 配置文件进行上一步操作之后会在当前目录生成data目录，在该目录下回生成区块和配置文件，我们需要修改一些配置 12cd datavi config.ini 需要修改的配置如下 123456789101112131415161718# 找到这一个配置，将值修改为true，这个配置是开启挖矿生成区块，主链的话不需要打开enable-stale-production = true# 在文件最后加入下面的配置p2p-endpoint = 0.0.0.0:11010checkpoint = []rpc-endpoint = 127.0.0.1:11011witness-id = &quot;1.6.1&quot;witness-id = &quot;1.6.2&quot;witness-id = &quot;1.6.3&quot;witness-id = &quot;1.6.4&quot;witness-id = &quot;1.6.5&quot;witness-id = &quot;1.6.6&quot;witness-id = &quot;1.6.7&quot;witness-id = &quot;1.6.8&quot;witness-id = &quot;1.6.9&quot;witness-id = &quot;1.6.10&quot;witness-id = &quot;1.6.11&quot; 改完保存 启动和停止节点启动命令有点长，为了方便启动和停止我们制作好启动和停止脚本 123456vi start_witness.sh# 将下面的脚本保存#!/bin/bashnohup ./witness_node --data-dir data --seed-nodes &quot;[]&quot; &gt;&gt; witness.log 2&gt;&amp;1 &amp; 1234567891011vi stop_witness.sh# 将下面的脚本保存#!/bin/bashPIDS=`ps -ef |grep witness_node |grep -v grep | awk &apos;&#123;print $2&#125;&apos;`if [ &quot;$PIDS&quot; != &quot;&quot; ]; then kill -9 $PIDSelse echo `date +%F&quot; &quot;%H:%M:%S` &quot;witness_node is NOT runing!&quot;fi 添加执行权限 1chmod u+x *.sh 启动节点 1./start_witness.sh 查看日志，可以看到已经在生成区块了 123456789101112131415tail -f witness.log1770002ms th_a db_maint.cpp:952 process_hf_1465 ] Processing hard fork core-1465 at block 11770002ms th_a db_maint.cpp:854 update_call_orders_h ] Updating all call orders for hardfork core-343 at block 11770002ms th_a db_maint.cpp:872 update_call_orders_h ] Done updating all call orders for hardfork core-343 at block 11770002ms th_a db_maint.cpp:895 match_call_orders ] Matching call orders at block 11770002ms th_a db_maint.cpp:905 match_call_orders ] Done matching call orders at block 11770002ms th_a db_maint.cpp:880 update_call_orders_h ] Updating all call orders for hardfork core-1270 at block 11770002ms th_a db_maint.cpp:888 update_call_orders_h ] Done updating all call orders for hardfork core-1270 at block 11770003ms th_a db_maint.cpp:895 match_call_orders ] Matching call orders at block 11770003ms th_a db_maint.cpp:905 match_call_orders ] Done matching call orders at block 11770003ms th_a witness.cpp:277 block_production_loo ] Generated block #1 with 0 transaction(s) and timestamp 2019-10-18T07:29:30 at time 2019-10-18T07:29:301790000ms th_a witness.cpp:277 block_production_loo ] Generated block #2 with 0 transaction(s) and timestamp 2019-10-18T07:29:50 at time 2019-10-18T07:29:501795000ms th_a witness.cpp:277 block_production_loo ] Generated block #3 with 0 transaction(s) and timestamp 2019-10-18T07:29:55 at time 2019-10-18T07:29:551800001ms th_a witness.cpp:277 block_production_loo ] Generated block #4 with 0 transaction(s) and timestamp 2019-10-18T07:30:00 at time 2019-10-18T07:30:00 执行停止脚本即可停止节点 1./stop_witness.sh 停止和启动钱包启动钱包，需要指定RPC的http端口和websocket端口、链ID、钱包文件，需要注意的是必须先启动节点才能启动，不然会报错 1./cli_wallet --wallet-file my-wallet.json --chain-id ced68e68d7e41258f6a2e71643e41c690edae19dbed8c5f525a0f5c74d322fa9 --server-rpc-endpoint ws://127.0.0.1:11011 -H 127.0.0.1:11012 执行结果 1234567892094762ms th_a main.cpp:229 main ] wdata.ws_server: ws://127.0.0.1:11011 2094819ms th_a main.cpp:234 main ] wdata.ws_user: wdata.ws_password: 2094867ms th_a main.cpp:281 main ] Listening for incoming HTTP and WS RPC requests on 127.0.0.1:11012Type &quot;help&quot; for a list of available commands.Type &quot;gethelp &lt;command&gt;&quot; for info about individual commands.Please use the &quot;set_password&quot; method to initialize a new wallet before continuingnew &gt;&gt;&gt; 可以看到会进入钱包的命令行，这命令行可以进行创建钱包、转账等操作，按Ctrl+C可以退出 为了方便启动和停止，我们也可以制作启动和停止钱包的脚本 1234567vi start_wallet.sh# 将下面的脚本保存#!/bin/bashnohup ./cli_wallet --wallet-file my-wallet.json --chain-id ced68e68d7e41258f6a2e71643e41c690edae19dbed8c5f525a0f5c74d322fa9 --server-rpc-endpoint ws://127.0.0.1:11011 -H 127.0.0.1:11012 -d &gt;&gt; wallet.log 2&gt;&amp;1 &amp; 1234567891011vi stop_wallet.sh# 将下面的脚本保存#!/bin/bashPIDS=`ps -ef |grep cli_wallet |grep -v grep | awk &apos;&#123;print $2&#125;&apos;`if [ &quot;$PIDS&quot; != &quot;&quot; ]; then kill -9 $PIDSelse echo `date +%F&quot; &quot;%H:%M:%S` &quot;cli_wallet is NOT runing!&quot;fi 添加执行权限 1chmod u+x *.sh 启动钱包 1./start_wallet.sh 查看日志 1tail -f wallet.log 停止钱包 1./stop_wallet.sh 钱包相关命令创建钱包第一次使用钱包会让你设置默认钱包的密码，这里设置为123456 123please use the set_password method to initialize a new wallet before continuingnew &gt;&gt;&gt; set_password 123456null 解锁钱包下面很多命令都需要先解锁钱包，解锁命令如下 12locked &gt;&gt;&gt; unlock 123456null 导入nathan账号12345678910unlocked &gt;&gt;&gt; import_key nathan &quot;5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3&quot;2768812ms th_a wallet.cpp:565 copy_wallet_file ] backing up wallet my-wallet.json to before-import-key-9407629b.wallet2768826ms th_a wallet.cpp:983 save_wallet_file ] saving wallet to file my-wallet.json2768828ms th_a wallet.cpp:1002 save_wallet_file ] saved successfully wallet to tmp file my-wallet.json.tmp2768828ms th_a wallet.cpp:1008 save_wallet_file ] validated successfully tmp wallet file my-wallet.json.tmp2768829ms th_a wallet.cpp:1012 save_wallet_file ] renamed successfully tmp wallet file my-wallet.json.tmp2768829ms th_a wallet.cpp:1019 save_wallet_file ] successfully saved wallet to file my-wallet.json2768829ms th_a wallet.cpp:565 copy_wallet_file ] backing up wallet my-wallet.json to after-import-key-9407629b.wallettrue 导入初始余额给这个帐号 12unlocked &gt;&gt;&gt; import_balance nathan [&quot;5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3&quot;] truenull 余额查询12unlocked &gt;&gt;&gt; list_account_balances nathan10000000000 BTS 创建账号首先升级账号，要不然没有权限 1unlocked &gt;&gt;&gt; upgrade_account nathan true 获取助记词 123456unlocked &gt;&gt;&gt; suggest_brain_key&#123; &quot;brain_priv_key&quot;: &quot;CHOW CAWQUAW SADE JILT VELUM WAYLAY SMITE FARAD CHASE YAWN BALL DECODE PHORIA PIKI JUNGLY MINGLER&quot;, &quot;wif_priv_key&quot;: &quot;5J61N7xP7Y7zYgk1msafaYsRW1gAZ77SZdN3oxEX1Dxja4ZGFej&quot;, &quot;pub_key&quot;: &quot;BTS6pbt37VPfBZcYtXpNk8iTwgDZhuw9ikteBudiX5BWXbGdxJcNf&quot;&#125; 用助记词创建账号account1 1unlocked &gt;&gt;&gt; create_account_with_brain_key &quot;ETCH ZAYAT LARKY TRANSOM EOSIN ETHANE BRAVE RELATED COPIST SHRIVEN LIMPKIN STARE FOHAT SUCCENT MOUSY REEVE&quot; account1 nathan nathan true 转账1unlocked &gt;&gt;&gt; transfer nathan account1 1000 BTS &quot;first transfer&quot; true 再查看余额 12unlocked &gt;&gt;&gt; list_account_balances account11000 BTS 更多的RPC命令会在下一篇文章中详细列举。 参考文章https://bitsharescn.github.io/bts-cn-docs/bts-exchange-single/]]></content>
      <categories>
        <category>BTS</category>
      </categories>
      <tags>
        <tag>比特股bitshares</tag>
        <tag>BTS</tag>
        <tag>BAR</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu下USDT私有链搭建]]></title>
    <url>%2F2020%2F12%2F14%2F23.Ubuntu%E4%B8%8BUSDT%E7%A7%81%E6%9C%89%E9%93%BE%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚个人博客：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 安装omnicore程序请前往https://github.com/OmniLayer/omnicore/tags查看最新版本并替换下面的下载链接 123jian@ubuntu:/root# wget https://github.com/OmniLayer/omnicore/releases/download/v0.3.1/omnicore-0.3.1-x86_64-linux-gnu.tar.gzjian@ubuntu:/root# tar -zvxf omnicore-0.3.1-x86_64-linux-gnu.tar.gz jian@ubuntu:/root# sudo install -m 0755 -o root -g root -t /usr/local/bin ./omnicore-0.3.1/bin/* 配置bitcoin参数1234jian@ubuntu:~$ mkdir .bitcoin #创建主目录,如果目录已经存在请跳过jian@ubuntu:~$ mkdir omnidata #创建区块数据目录jian@ubuntu:~$ cd .bitcoin/jian@ubuntu:~/.bitcoin$ vi bitcoin.conf 将下面信息全部复制，并修改rpcuser（RPC用户名），rpcpassword（RPC用户密码），rpcallowip（允许访问的ip地址）然后保存 123456789101112131415161718192021222324252627282930# Generated by https://jlopp.github.io/bitcoin-core-config-generator/# This config should be placed in following path:# ~/.bitcoin/bitcoin.conf# [rpc]# Accept command line and JSON-RPC commands.server=1txindex=1# Username for JSON-RPC connectionsrpcuser=omnicorerpc# Password for JSON-RPC connectionsrpcpassword=omnicorerpc# Listen for JSON-RPC connections on this portrpcport=17443# 为了不与比特币端口冲突，使用的不是默认端口所以要加上下面的设置listen=0# Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), # a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option # can be specified multiple times.rpcallowip=192.168.1.178# 设定默认为私有链regtest=1# 区块数据目录datadir=/root/omnidata 启动omnicore程序请将-conf和-datadir 路径修改为你的路径 1jian@ubuntu:~/.omni$ omnicored -conf=/root/.bitcoin/bitcoin.conf -daemon 1234567892018-11-22 10:46:09 Loading trades database: OK2018-11-22 10:46:09 Loading send-to-owners database: OK2018-11-22 10:46:09 Loading tx meta-info database: OK2018-11-22 10:46:09 Loading smart property database: OK2018-11-22 10:46:09 Loading master transactions database: OK2018-11-22 10:46:09 Loading fee cache database: OK2018-11-22 10:46:09 Loading fee history database: OK2018-11-22 10:46:09 Loading persistent state: NONE (no usable previous state found)2018-11-22 10:46:09 Omni Core initialization completed 出现上面的信息然后按Ctrl + C退出即可，初始化1分钟后再查看是否启动成功，要不然不会输出任何信息，需要输入上一步配置的密码，用户名omnirpc改为你bitcoin.conf中配置的用户名： 1jian@ubuntu:~$ curl --user omnicorerpc --data-binary &apos;&#123;&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getnetworkinfo&quot;, &quot;params&quot;: [] &#125;&apos; -H &apos;content-type: text/plain;&apos; http://127.0.0.1:18332 能返回下面的信息表示启动成功 1&#123;&quot;result&quot;:&#123;&quot;version&quot;:130200,&quot;subversion&quot;:&quot;/Satoshi:0.13.2/&quot;,&quot;protocolversion&quot;:70015,&quot;localservices&quot;:&quot;000000000000000d&quot;,&quot;localrelay&quot;:true,&quot;timeoffset&quot;:0,&quot;connections&quot;:2,&quot;networks&quot;:[&#123;&quot;name&quot;:&quot;ipv4&quot;,&quot;limited&quot;:false,&quot;reachable&quot;:true,&quot;proxy&quot;:&quot;&quot;,&quot;proxy_randomize_credentials&quot;:false&#125;,&#123;&quot;name&quot;:&quot;ipv6&quot;,&quot;limited&quot;:false,&quot;reachable&quot;:true,&quot;proxy&quot;:&quot;&quot;,&quot;proxy_randomize_credentials&quot;:false&#125;,&#123;&quot;name&quot;:&quot;onion&quot;,&quot;limited&quot;:true,&quot;reachable&quot;:false,&quot;proxy&quot;:&quot;&quot;,&quot;proxy_randomize_credentials&quot;:false&#125;],&quot;relayfee&quot;:0.00001000,&quot;localaddresses&quot;:[],&quot;warnings&quot;:&quot;&quot;&#125;,&quot;error&quot;:null,&quot;id&quot;:&quot;curltest&quot;&#125; 停止omnicore程序1jian@ubuntu:~/.omni$ omnicore-cli -conf=/root/.omnicore/bitcoin.conf stop 创建钱包地址123jian@ubuntu:~$ curl --user omnirpc --data-binary &apos;&#123;&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getnewaddress&quot;, &quot;params&quot;: [&quot;test&quot;] &#125;&apos; -H &apos;content-type: text/plain;&apos; http://127.0.0.1:18332/&#123;&quot;result&quot;:&quot;n1Axxy3WGwFci1GJffwdY55dRem92GKXAm&quot;,&quot;error&quot;:null,&quot;id&quot;:&quot;curltest&quot;&#125; 返回结果中的 “n1Axxy3WGwFci1GJffwdY55dRem92GKXAm” 即为新创建的USDT钱包，以m开头表示是测试链的钱包地址，公链上的钱包地址一般是1开头 查询余额查询比特币余额 1jian@ubuntu:~$ curl --user omnicorerpc --data-binary &apos;&#123;&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getbalance&quot;, &quot;params&quot;: [] &#125;&apos; -H &apos;content-type: text/plain;&apos; http://127.0.0.1:18332/ 查询USDT余额，请将钱包地址换成你的 1jian@ubuntu:~$ omnicore-cli -conf=/root/.omnicore/bitcoin.conf omni_getbalance &quot;n1Axxy3WGwFci1GJffwdY55dRem92GKXAm&quot; 1 或者 1jian@ubuntu:~$ curl --user omnicorerpc --data-binary &apos;&#123;&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;omni_getbalance&quot;, &quot;params&quot;: [&quot;n1Axxy3WGwFci1GJffwdY55dRem92GKXAm&quot;, 1] &#125;&apos; -H &apos;content-type: text/plain;&apos; http://127.0.0.1:18332/ 获取测试币在测试网络testnet和私有网络regtest下获取测试币的方式是一样的，私有链使用生成区块命令获得比特币后用下面的命令往moneyqMan7uh8FqdCA2BV5yZ8qVrc9ikLP发送比特币可以得到一点测试的USDT，每1BTC可以获得100个USDT。为了方便让测试币进入我们指定的钱包地址，我们另外生成一个指定账号的钱包地址 12jian@ubuntu:~$ omnicore-cli -conf=/root/.omnicore/bitcoin.conf getnewaddress &quot;omni&quot;n2zPfoSavpGGxZwJf3pya3mXX5HVEG6wmd 执行得到钱包地址n2zPfoSavpGGxZwJf3pya3mXX5HVEG6wmd,然后往这个钱包地址转入比特币 1jian@ubuntu:~$ omnicore-cli -conf=/root/.omnicore/bitcoin.conf sendtoaddress &quot;n2zPfoSavpGGxZwJf3pya3mXX5HVEG6wmd&quot; 10 生成一个区块让币到账 1jian@ubuntu:~$ omnicore-cli -conf=/root/.omnicore/bitcoin.conf generate 1 用下面的命令查看omni账户的余额可以看到余额已经在该账户所属的n2zPfoSavpGGxZwJf3pya3mXX5HVEG6wmd地址中 1234567891011121314jian@ubuntu:~$ omnicore-cli -conf=/root/.omnicore/bitcoin.conf listreceivedbyaddress 1 true[ &#123; &quot;address&quot;: &quot;n2zPfoSavpGGxZwJf3pya3mXX5HVEG6wmd&quot;, &quot;account&quot;: &quot;omni&quot;, &quot;amount&quot;: 10.00000000, &quot;confirmations&quot;: 1, &quot;label&quot;: &quot;omni&quot;, &quot;txids&quot;: [ &quot;c9da93e8a0daad57b7b4702b3ceac3d4dd51cbb563c7e982712c573eaab95715&quot; ] &#125;] 然后用omni账户往moneyqMan7uh8FqdCA2BV5yZ8qVrc9ikLP地址转一个比特币 1jian@ubuntu:~$ omnicore-cli -conf=/root/.omnicore/bitcoin.conf sendfrom &quot;omni&quot; &quot;moneyqMan7uh8FqdCA2BV5yZ8qVrc9ikLP&quot; 1 再次生成一个区块让币到账 1jian@ubuntu:~$ omnicore-cli -conf=/root/.omnicore/bitcoin.conf generate 1 查看余额，可以看到100个USDT已经到账 123456jian@ubuntu:~$ omnicore-cli -conf=/root/.omnicore/bitcoin.conf &quot;omni_getbalance&quot; &quot;n2zPfoSavpGGxZwJf3pya3mXX5HVEG6wmd&quot; 1&#123; &quot;balance&quot;: &quot;100.00000000&quot;, &quot;reserved&quot;: &quot;0.00000000&quot;, &quot;frozen&quot;: &quot;0.00000000&quot;&#125; 注意：如果你的区块高度没有到达100个以上，你将得不到任何比特币和USDT 使用下面的命令可以查看所有余额大于0的币种和余额 1234567891011121314151617181920212223jian@ubuntu:~$ omnicore-cli -conf=/root/.omnicore/bitcoin.conf omni_getwalletaddressbalances[ &#123; &quot;address&quot;: &quot;n2zPfoSavpGGxZwJf3pya3mXX5HVEG6wmd&quot;, &quot;balances&quot;: [ &#123; &quot;propertyid&quot;: 1, &quot;name&quot;: &quot;Omni&quot;, &quot;balance&quot;: &quot;100.00000000&quot;, &quot;reserved&quot;: &quot;0.00000000&quot;, &quot;frozen&quot;: &quot;0.00000000&quot; &#125;, &#123; &quot;propertyid&quot;: 2, &quot;name&quot;: &quot;Test Omni&quot;, &quot;balance&quot;: &quot;99.00000000&quot;, &quot;reserved&quot;: &quot;0.00000000&quot;, &quot;frozen&quot;: &quot;0.00000000&quot; &#125; ] &#125;] 可以看到在私有网络下发送比特币会给你返回两种测试币，propertyid分别是1和2，但是在主链，USDT的propertyid分别是31 发送交易参数分别是from，to，代币id，交易数量，支付btc手续费的地址 1jian@ubuntu:~$ omnicore-cli &quot;omni_funded_send&quot; &quot;n1Axxy3WGwFci1GJffwdY55dRem92GKXAm&quot; &quot;n4VTWrjPV1QaLmM1x8ZtyLiJoFk3KaCAsi&quot; 1 &quot;1&quot; &quot;n1Axxy3WGwFci1GJffwdY55dRem92GKXAm&quot; 如果出现报错Error with selected inputs for the send transaction，说明比特币或者USDT余额不足，往钱包转入足够的币即可。 访问JSON-RPC可以查看：https://github.com/OmniLayer/omnicore/blob/master/src/omnicore/doc/rpc-api.md，需要用编程语言对接的话可以使用api中的函数和参数拼装成json数据，例如本文中的查询余额的 json 为{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getbalance&quot;, &quot;params&quot;: [] }，然后将这串json作为参数post提交到节点的ip和端口即可返回相应的json结果。]]></content>
      <categories>
        <category>USDT</category>
      </categories>
      <tags>
        <tag>测试环境</tag>
        <tag>USDT</tag>
        <tag>Omni</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu莱特币私有链搭建]]></title>
    <url>%2F2020%2F12%2F14%2F22.Ubuntu%E8%8E%B1%E7%89%B9%E5%B8%81%E7%A7%81%E6%9C%89%E9%93%BE%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚个人博客：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 安装litecoind在官网https://litecoin.org/中找到合适的版本，复制链接后下载，版本必须是0.16以上，否则有些新的命令无法使用 12root@ubuntu:~# wget https://download.litecoin.org/litecoin-0.17.1/linux/litecoin-0.17.1-x86_64-linux-gnu.tar.gzroot@ubuntu:~# tar zxf litecoin-0.17.1-x86_64-linux-gnu.tar.gz 创建软连接 123root@ubuntu:~# ln -fs /root/litecoin-0.17.1/bin/litecoind /usr/local/bin/litecoindroot@ubuntu:~# ln -fs /root/litecoin-0.17.1/bin/litecoin-cli /usr/local/bin/litecoin-cliroot@ubuntu:~# install -m 0755 -o root -g root -t /usr/local/bin ./litecoin-0.17.1/bin/* 检查版本号 1root@ubuntu:~# litecoind --version 配置litecoin参数123root@ubuntu:~$ mkdir .litecoin #创建目录root@ubuntu:~$ cd .litecoin/root@ubuntu:~$ vi litecoin.conf 将下面信息全部复制，并修改rpcuser（RPC用户名），rpcpassword（RPC用户密码），rpcallowip（允许访问的ip地址）然后保存 123456789101112131415161718192021222324252627# Generated by https://jlopp.github.io/bitcoin-core-config-generator/# This config should be placed in following path:# ~/.litecoin/bitcoin.conf# [rpc]# Accept command line and JSON-RPC commands.server=1txindex=1# Username for JSON-RPC connectionsrpcuser=bitcoinrpc# Password for JSON-RPC connectionsrpcpassword=bitcoinrpc# Listen for JSON-RPC connections on this portrpcport=19332# Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), # a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option # can be specified multiple times.rpcallowip=192.168.1.178rpcallowip=192.168.1.179# 设定默认为私有链regtest=1 启动litecoin程序12root@ubuntu:~/.litecoin$ litecoind -daemonlitecoin server starting -deamon表示后台运行 停止litecoin程序12root@ubuntu:~/.litecoin/testnet3$ litecoin-cli stopBitcoin server stopping 访问Json-RPC接口在主网（mainnet）和测试网络（testnet）模式下json-rpc端口是使用.litecoin/litecoin.conf中配置的19332端口进行访问，但是在私有链（regtest）模式下似乎配置了并没有作用，还是要访问默认的19443端口。 我们可以使用postman或者curl等工具进行访问：litecoinrpc:litecoinrpc分别是rpc用户名和密码 1curl -s -X POST --user litecoinrpc:litecoinrpc -H &apos;content-type: text/plain;&apos; http://127.0.0.1:19443/ --data-binary &apos;&#123;&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getnetworkinfo&quot;, &quot;params&quot;: [] &#125;&apos; 更多RPC方法可以参考https://www.blockchain.com/es/api/json_rpc_api和https://litecoin-rpc.github.io/en/doc/0.17.99/rpc/ litecoin-cli常用命令查看钱包信息该命令可以获取到钱包版本、余额、交易数量等信息 1litecoin-cli getwalletinfo 获取所有钱包地址及其账号名1litecoin-cli listreceivedbyaddress 1 true 查询余额1litecoin-cli getbalance 注意：查询得到的余额是所有钱包地址的可用余额总和，并且不包含私钥不在节点的钱包地址余额。 生成钱包地址1litecoin-cli getnewaddress &quot;test&quot; #&quot;test&quot;是输入的账号 查询地址收到币的数量1litecoin-cli getreceivedbyaddress 2MtmeZ7W17zJzigtRhzKMP6MSc2DSyL5LYU 命令列表1litecoin-cli help]]></content>
      <categories>
        <category>莱特币</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>莱特币</tag>
        <tag>私有链</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[比特币常用命令]]></title>
    <url>%2F2020%2F12%2F14%2F21.%E6%AF%94%E7%89%B9%E5%B8%81%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚博客地址：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian联系方式：jian1098@qq.com 关于比特币节点的搭建请看我之前发布的文章，包括测试网络和私有网络的搭建，这里列出在命令行下的常用操作命令。 指定配置文件1bitcoin-cli -conf=/root/.bitcoin/bitcoin.conf rpc命令 钱包相关命令查看钱包信息该命令可以获取到钱包版本、余额、交易数量等信息 1bitcoin-cli getwalletinfo 获取所有钱包地址及其账号名1bitcoin-cli listreceivedbyaddress 1 true 查询余额1bitcoin-cli getbalance 注意：查询得到的余额是所有钱包地址的可用余额总和，并且不包含私钥不在节点的钱包地址余额。 生成钱包地址1bitcoin-cli getnewaddress &quot;test&quot; #&quot;test&quot;是输入的账号 查询地址收到币的数量1bitcoin-cli getreceivedbyaddress 2MtmeZ7W17zJzigtRhzKMP6MSc2DSyL5LYU 查询默认钱包地址该命令在0.18版本被废弃，并且需要在启动节点时带上 -deprecatedrpc=accounts 1bitcoin-cli getaccountaddress &quot;&quot; 加密钱包1bitcoin-cli encryptwallet mypassword 解锁钱包1bitcoin-cli walletpassphrase mypassword 30 30表示解锁时间，单位秒 锁定钱包1bitcoin-cli walletlock 备份钱包文件需要先解锁，可以将钱包文件wallet.data安全地拷贝到指定文件或目录 1bitcoin-cli backupwallet wallet.back wallet.back是备份文件名 导入备份文件需要先解锁 1bitcoin-cli importwallet wallet.back 修改钱包密码1bitcoin-cli walletpassphrasechange mypassword 123456 mypassword 和 123456分别是旧和新密码 导出所有钱包地址和私钥需要先解锁，将钱包里的所有密钥导出到指定的文件 1bitcoin-cli dumpwallet wallet.txt 导入钱包和私钥需要先解锁，将上一步的文件导入 1bitcoin-cli importwallet wallet.txt 导出指定钱包地址的私钥需要先解锁，结果为字符串 1bitcoin-cli dumpprivkey mzqrRSB8LXa8EAwzFE5mLyoGWP66H7X26H 导入指定钱包私钥将上一步的私钥导入,但是导入的参数是该钱包的账号名 1bitcoin-cli importprivkey 92dC2MM4dN4ei6qGarVkL48aiUcPjg2uvPdzpFY6QVjBAPQPGWy &quot;test&quot; true 获取指定钱包地址的账号名1bitcoin-cli getaccount 2N5UhqzPfTz1rTG3ALkEMsEN6qNvqXcoZJ2 更多命令请参考https://bitcoin-rpc.github.io/en/doc/0.17.99/rpc/wallet/importwallet/ 或中文版http://cw.hubwiz.com/card/c/bitcoin-json-rpc-api/1/7/8/ 导入钱包地址及账号名参数为地址或公钥、账号名、是否扫描整个区块链（需要时间长），因为不包含私钥，所以该地址只能用于监听而不能用于消费交易 1bitcoin-cli importaddress muhtvdmsnbQEPFuEmxcChX58fGvXaaUoVt &quot;watch-only test&quot; false 导入公钥参数分别是公钥、钱包账号名、是否重新扫描区块（需要时间）,导入公钥后节点会同时导入对应的钱包地址，但没有对应的私钥 1bitcoin-cli importpubkey &quot;04aefb3a2b6e0eef583216283b72279cdc1f79a0b99499a0ac9769598278a581ed7734f6b203fcd75fc4836296a4f662dea768671feea454d19b5abdc7a113b081&quot; &quot;transfer test&quot; false 列出所有钱包地址对应的账号名及余额只含本节点生成的钱包地址或导入公钥或私钥的钱包地址 1bitcoin-cli listaddressgroupings 老版本的bitcoind请使用命令，0.18版本已废弃 1bitcoin-cli listaccounts 交易相关命令从默认账户给目标地址转账1bitcoin-cli sendtoaddress &quot;mxHFNt2RXkshzT3CuXb5Dx215BdeNDQRCu&quot; 10 从指定账户转账1bitcoin-cli sendfrom &quot;test&quot; &quot;n3BMgZMA26TcHnVa5iNJeB3PMqkF3cEWBE&quot; 0.01 注意：需要生成区块才能确认交易并到账 生成区块1bitcoin-cli generate 1 注意：实践证明只有区块数量超过100的时候才会产生余额 获取交易列表参数依次为钱包账户名（*表示所有）、要提取的交易数量，默认值：10、要跳过的交易数量，默认值：0、是否包含watch-only地址，默认值：false 1bitcoin-cli listtransactions &quot;*&quot; 1 0 true 注意：这个命令只会列出本节点并且私钥在节点的钱包地址交易列表，并且bitcoin.conf文件必须加上txindex=1 根据交易id查询交易详情1bitcoin-cli gettransaction 47b30a7c5b1cd10183e60676fc0f4a059b96c2f10f16a2828aeb6270f4467500 注意：这个命令只能查到本地节点的钱包地址交易，查询节点外的交易会报Invalid or non-wallet transaction id,而且如果钱包地址的私钥不在节点的话查询出来的数据中details字段是空的，也就是无法查询到该交易的输入输出数据。 查询未花费的交易1bitcoin-cli listunspent 或者指定钱包地址和确认的区块数量范围,命令：listunspent [minconf=1] [maxconf=9999999] [&quot;address&quot;,...] minconf/maxconf表示该笔收入交易的确认数范围，如果需要列出还未确认的交易，需将minconf设置为0。 1bitcoin-cli listunspent 0 99999999 &apos;[&quot;mi7efAUg86n8LZAFD4hdMTfoKYkj8YYbdA&quot;]&apos; 注意：使用此命令只能得到已经导入公钥或钱包地址到节点的列表，并且bitcoin.conf文件必须加上txindex=1，如果导入钱包地址前已经有交易，可以在导入公钥或地址时设置重新扫描区块为true 生成未签名交易1bitcoin-cli createrawtransaction &apos;[&#123;&quot;txid&quot;:&quot;7fff82f7b28bc12b349e6e4c7482d563e7af6119ca49126bfc04435ce909abbc&quot;,&quot;vout&quot;:0&#125;]&apos; &apos;&#123;&quot;2MuJfZRJi7S7nqaxHrbTRMSTb6GygDD4SFz&quot;:1&#125;&apos; 指定找零地址及增加交易输入找零地址changeAddress可以是发起交易的钱包地址本身，交易成功后未花费交易的txid会更新 1bitcoin-cli fundrawtransaction 020000000161dc79011198f3e042f68b6e8a1ae16d9cdab96ada6c8b5a9905adb54c6e92430000000000ffffffff0100e1f5050000000017a9141696d866051fb5ff771acc87f47fb1d4c6bb26778700000000 &apos;&#123;&quot;changeAddress&quot;: &quot;2MuJfZRJi7S7nqaxHrbTRMSTb6GygDD4SFz&quot;,&quot;changePosition&quot; : 1,&quot;includeWatching&quot; : true,&quot;lockUnspents&quot; : true&#125;&apos; 注意：使用此命令时，转出钱包地址必须将公钥或私钥导入节点服务器，否则会失败。 交易签名最后的参数是私钥数组 1bitcoin-cli signrawtransactionwithkey 020000000161dc79011198f3e042f68b6e8a1ae16d9cdab96ada6c8b5a9905adb54c6e92430000000000ffffffff0200e1f5050000000017a9141696d866051fb5ff771acc87f47fb1d4c6bb26778728d5a4350000000017a9141696d866051fb5ff771acc87f47fb1d4c6bb26778700000000 &apos;[&quot;92oH6gkrUHwmts4jNgv71x87RsYe8hnFKJmGDAzg3FQBisKfTo1&quot;]&apos; 旧版本： 1bitcoin-cli signrawtransaction 0200000001c7ca59373068bba271bcaeabc8648e400188706178082007f263b310afc712f90000000000ffffffff0100fcac060000000017a91439119c8025990e01c0cd9fdfaf4d5aab603ffcd78700000000 发送交易1bitcoin-cli sendrawtransaction 020000000161dc79011198f3e042f68b6e8a1ae16d9cdab96ada6c8b5a9905adb54c6e9243000000008a47304402201f60fa7cfc8a03cd2be9da0a4c78b00d9e3663748db173c3b778f7946b871e0c022021836426e0800125fe98d9fc8a44fe79a1b775d7e9ea723ee35f21881fb5d385014104ee9fa9f58e21a6d82565cb11391c4673831ae19319b01637ddd7f14fafbcf776608e63e6f0ba39663fd3060ad73d655e31da919e71c7574293b7b2bad1173885ffffffff02c062002d0000000017a9141696d866051fb5ff771acc87f47fb1d4c6bb26778740539a0e000000001976a914b7e29340f24ac2d7b8ac576fab843248298a65dd88ac00000000 其他命令命令列表1bitcoin-cli help 参考文章： http://cw.hubwiz.com/card/c/bitcoin-json-rpc-api/1/7/23/ https://bitcoin-rpc.github.io/en/doc/0.17.99/rpc/blockchain/getblock/]]></content>
      <categories>
        <category>比特币</category>
      </categories>
      <tags>
        <tag>比特币</tag>
        <tag>常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu比特币私有链搭建]]></title>
    <url>%2F2020%2F12%2F14%2F20.Ubuntu%E6%AF%94%E7%89%B9%E5%B8%81%E7%A7%81%E6%9C%89%E9%93%BE%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚博客地址：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian联系方式：jian1098@qq.com 安装bitcoind在官网https://bitcoincore.org/bin中找到合适的版本，必须是0.18.0以下的版本，要不然会连接不上节点，新版本的配置有待研究 12root@ubuntu:~# wget https://bitcoincore.org/bin/bitcoin-core-0.17.1/bitcoin-0.17.1-x86_64-linux-gnu.tar.gzroot@ubuntu:~# tar zxf bitcoin-0.17.1-x86_64-linux-gnu.tar.gz 创建软连接 123root@ubuntu:~# cd bitcoin-0.17.1root@ubuntu:~# ln -fs /root/bitcoin-0.17.1/bin/bitcoind /usr/local/bin/bitcoindroot@ubuntu:~# ln -fs /root/bitcoin-0.17.1/bin/bitcoin-cli /usr/local/bin/bitcoin-cli 检查版本号 1root@ubuntu:~# bitcoind --version 配置bitcoin参数123root@ubuntu:~$ mkdir .bitcoin #创建目录root@ubuntu:~$ cd .bitcoin/root@ubuntu:~$ vi bitcoin.conf 将下面信息全部复制，并修改rpcuser（RPC用户名），rpcpassword（RPC用户密码），rpcallowip（允许访问的ip地址）然后保存 123456789101112131415161718192021222324252627# Generated by https://jlopp.github.io/bitcoin-core-config-generator/# This config should be placed in following path:# ~/.bitcoin/bitcoin.conf# [rpc]# Accept command line and JSON-RPC commands.server=1txindex=1# Username for JSON-RPC connectionsrpcuser=bitcoinrpc# Password for JSON-RPC connectionsrpcpassword=bitcoinrpc# Listen for JSON-RPC connections on this portrpcport=18332# Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), # a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option # can be specified multiple times.rpcallowip=192.168.1.178rpcallowip=192.168.1.179# 设定默认为私有链regtest=1 启动bitcoin程序12root@ubuntu:~/.bitcoin$ bitcoind -daemonBitcoin server starting -deamon表示后台运行 停止bitcoin程序12root@ubuntu:~/.bitcoin/testnet3$ bitcoin-cli stopBitcoin server stopping 访问Json-RPC接口在主网（mainnet）和测试网络（testnet）模式下json-rpc端口是使用.bitcoin/bitcoin.conf中配置的18332端口进行访问，但是在私有链（regtest）模式下似乎配置了并没有作用，还是要访问默认的18443端口。 我们可以使用postman或者curl等工具进行访问：bitcoinrpc:bitcoinrpc分别是rpc用户名和密码 1curl -s -X POST --user bitcoinrpc:bitcoinrpc -H &apos;content-type: text/plain;&apos; http://127.0.0.1:18443/ --data-binary &apos;&#123;&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getnetworkinfo&quot;, &quot;params&quot;: [] &#125;&apos; 更多RPC方法可以参考https://www.blockchain.com/es/api/json_rpc_api和https://bitcoin-rpc.github.io/en/doc/0.17.99/rpc/ bitcoin-cli常用命令查看钱包信息该命令可以获取到钱包版本、余额、交易数量等信息 1bitcoin-cli getwalletinfo 获取所有钱包地址及其账号名1bitcoin-cli listreceivedbyaddress 1 true 查询余额1bitcoin-cli getbalance 注意：查询得到的余额是所有钱包地址的可用余额总和，并且不包含私钥不在节点的钱包地址余额。 生成钱包地址1bitcoin-cli getnewaddress &quot;test&quot; #&quot;test&quot;是输入的账号 查询地址收到币的数量1bitcoin-cli getreceivedbyaddress 2MtmeZ7W17zJzigtRhzKMP6MSc2DSyL5LYU 命令列表1bitcoin-cli help]]></content>
      <categories>
        <category>比特币</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>比特币</tag>
        <tag>私有链</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Google reCAPTCHA防止机器注册]]></title>
    <url>%2F2020%2F12%2F14%2F2.%E4%BD%BF%E7%94%A8Google%20reCAPTCHA%E9%98%B2%E6%AD%A2%E6%9C%BA%E5%99%A8%E6%B3%A8%E5%86%8C%E7%99%BB%E5%BD%95%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚博客地址：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 环境要求 能翻墙的电脑 域名 验证原理在谷歌recaptcha申请验证密钥，配置好服务器的域名，在需要验证的表单中嵌入google reCAPTCHA ,提交表单的时候将验证成功生成的响应码传给后台，后台将响应码post到谷歌的服务器验证地址，谷歌服务器将返回验证结果。生成响应码的页面域名必须是在谷歌页面配置的域名才能生成，只有ip也不行。google reCAPTCHA在web端有3种形式的验证 1.reCAPTCHA v3 在网页加载的时候生成响应码，不需要用户进行任何操作。生成响应码的时候会稍有延迟，比网页加载完成会慢一点，确保了他人利用程序获取html代码的方式不会获取响应码。加入reCAPTCHA v3 的页面会有类似下面的图标 2.reCAPTCHA v2 Checkbox 点击复选框 用户点击复选框进行验证成功后生成响应码，图标如下 3.reCAPTCHA v2 Invisible 自定义按钮 开发人员自定义验证的动作，验证成功后调用生成响应码的js代码生成响应码即可。图标与第1种相同。 申请密钥打开网页 https://www.google.com/recaptcha/admin 登录谷歌账号，在Label下面的输入项目名，然后选择reCAPTCHA的类型，点击Register即可注册完成，完成后可以得到Site key和Secret key。 配置域名在上一步注册好之后的页面底下Domains的框中输入需要验证的域名，只有输入的域名网站才有资格生成你的响应码。 插入前端代码在申请密钥完成的页面中按照给出的步骤Step1加入前端代码,比如如果是v3类型的验证码： 在html头部引入js 1&lt;script src=&apos;https://www.google.com/recaptcha/api.js?render=你的Site key&apos;&gt;&lt;/script&gt; 由于国家防火墙的原因，大陆的网站需要将js替换为国内的js地址（js是在客户端浏览器执行的，服务器能翻墙也不行） 1https://www.recaptcha.net/recaptcha/api.js 生成响应码 12345678910111213&lt;script&gt;grecaptcha.ready(function() &#123; grecaptcha.execute(&apos;你的Site key&apos;, &#123;action: &apos;action_name&apos;&#125;).then(function(token) &#123;// 将这个生成的token传给后台 &#125;);&#125;);&lt;/script&gt; 后台验证将前端传过来的响应码和你的Secret key发送到谷歌验证地址进行验证，判断返回数据即可 大陆的需要将验证链接 https://www.google.com/recaptcha/api/siteverify 改为 https://www.recaptcha.net/recaptcha/api/siteverify php示例： 123456789101112131415161718192021222324252627&lt;?phpfunction send_post($url, $post_data)&#123; $postdata = http_build_query($post_data); $options = array( &apos;http&apos; =&gt; array( &apos;method&apos; =&gt; &apos;POST&apos;, &apos;header&apos; =&gt; &apos;Content-type:application/x-www-form-urlencoded&apos;, &apos;content&apos; =&gt; $postdata, &apos;timeout&apos; =&gt; 15 * 60 // 超时时间（单位:s） ) ); $context = stream_context_create($options); $result = file_get_contents($url, false, $context); return $result;&#125; $post_data = array( &apos;secret&apos; =&gt; &apos;你的Secret key&apos;, &apos;response&apos; =&gt; $_POST[&quot;g-recaptcha-response&quot;] //前端传过来的响应码);$recaptcha_json_result = send_post(&apos;https://www.google.com/recaptcha/api/siteverify&apos;, $post_data); $recaptcha_result = json_decode($recaptcha_json_result); //在这里处理返回的值 var_dump($recaptcha_result); ?&gt; 隐藏reCAPTCHA图标根据reCAPTCHA的服务条款（即你必须同意），您必须告知游客有关网站上的验证码实现 但是有时候在手机页面这么大的一个图标确实会影响到页面效果，不得不隐藏的时候可以在前端做一下处理 设置data-badge属性inline 1&lt;button type=&quot;submit&quot; data-sitekey=&quot;your_site_key&quot; data-callback=&quot;onSubmit&quot; data-badge=&quot;inline&quot; /&gt; 添加CSS 123.grecaptcha-badge &#123; display: none; &#125;]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>Google reCAPTCHA</tag>
        <tag>防注册机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php+redis实现二叉树的存储和遍历]]></title>
    <url>%2F2020%2F12%2F14%2F18.php%2Bredis%E5%AE%9E%E7%8E%B0%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E5%92%8C%E9%81%8D%E5%8E%86%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚博客地址：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian联系方式：jian1098@qq.com github地址：https://github.com/jian1098/php-redis-binary-tree 二叉树是软件开发过程中很常见的数据结构，本文通过php进行二叉树的生成和遍历，通过redis将二叉树存储，也可以将redis换成其他的关系型数据库，但是读写速度嘛是差挺远的。代码中有足够的注释，应该不难懂，仅供参考和学习。 首先封装二叉树的生成和遍历算法 tree.php 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108&lt;?php// 节点类Class BTNode&#123; public $data; public $lChild; public $rChild; public function __construct($data = null) &#123; $this-&gt;data = $data; &#125;&#125;// 二叉树类Class BinaryTree&#123; public $btData; public function __construct($data = null) &#123; $this-&gt;btData = $data; &#125; //创建二叉树 public function CreateBT(&amp;$root = null) &#123; $elem = array_shift($this-&gt;btData); if ($elem == null) &#123; return 0; &#125; else if ($elem == &apos;#&apos;) &#123; $root = null; &#125; else &#123; $root = new BTNode(); $root-&gt;data = $elem; $this-&gt;CreateBT($root-&gt;lChild); $this-&gt;CreateBT($root-&gt;rChild); &#125; return $root; &#125; //先序遍历二叉树 public function PreOrder($root) &#123; if ($root != null) &#123; echo $root-&gt;data . &quot; &quot;; $this-&gt;PreOrder($root-&gt;lChild); $this-&gt;PreOrder($root-&gt;rChild); &#125; else &#123; return; &#125; &#125; //中序遍历二叉树 public function InOrder($root) &#123; if ($root != null) &#123; $this-&gt;InOrder($root-&gt;lChild); echo $root-&gt;data . &quot; &quot;; $this-&gt;InOrder($root-&gt;rChild); &#125; else &#123; return; &#125; &#125; //后序遍历二叉树 public function PosOrder($root) &#123; if ($root != null) &#123; $this-&gt;PosOrder($root-&gt;lChild); $this-&gt;PosOrder($root-&gt;rChild); echo $root-&gt;data . &quot; &quot;; &#125; else &#123; return; &#125; &#125; //层序(广度优先)遍历二叉树 function LeverOrder($root) &#123; $queue = new SplQueue();//双向链表 if ($root == null)&#123; return; &#125;else&#123; $queue-&gt;enqueue($root); &#125; while (!$queue-&gt;isEmpty()) &#123; $node = $queue-&gt;bottom(); $queue-&gt;dequeue(); echo $node-&gt;data . &quot; &quot;; if ($node-&gt;lChild)&#123; $queue-&gt;enqueue($node-&gt;lChild); &#125;else&#123;// echo $node-&gt;data.&apos;的左子树为空&apos;; &#125; if ($node-&gt;rChild)&#123; $queue-&gt;enqueue($node-&gt;rChild); &#125;else&#123;// echo $node-&gt;data.&apos;的右子树为空&apos;; &#125; &#125; &#125;&#125; 接着封装操作redis的类 redis.php 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&lt;?phpclass MyRedis &#123; private $redis; private $host; //redis ip private $port; //redis 端口 private $tree; public function __construct($host,$port)&#123; $this-&gt;host=$host; $this-&gt;port=$port; //连接redis if(class_exists(&apos;Redis&apos;))&#123; $this-&gt;redis = new \Redis(); if($this-&gt;redis-&gt;connect($this-&gt;host, $this-&gt;port))&#123; $this-&gt;connect=true; &#125; &#125;else&#123; exit(&apos;redis扩展不存在&apos;); &#125; &#125; //添加节点 public function addNode($id,$data)&#123; if(!is_array($data))&#123; return []; &#125; $resOrder=$this-&gt;redis-&gt;hMSet($id,$data); return $resOrder; &#125; //查找节点 public function getNode($id)&#123; return $this-&gt;redis-&gt;hGetAll($id); &#125; //修改指定节点的属性 public function setNode($id,$field,$value)&#123; return $this-&gt;redis-&gt;hSet($id,$field,$value); &#125; //获取redis所有键 public function getKeys()&#123; return $this-&gt;redis-&gt;keys(&apos;*&apos;); &#125; //获取key的个数 public function dbSize()&#123; return $this-&gt;redis-&gt;dbSize(); &#125; //清空数据库 public function flushDB()&#123; return $this-&gt;redis-&gt;flushDB(); &#125; //前序遍历的顺序取出二叉树 public function tree($root_id)&#123; $rootNode=$this-&gt;getNode($root_id); $this-&gt;tree[]=$root_id; if (isset($rootNode[&apos;left&apos;]))&#123; $this-&gt;tree($rootNode[&apos;left&apos;]); &#125; if (isset($rootNode[&apos;right&apos;]))&#123; $this-&gt;tree($rootNode[&apos;right&apos;]); &#125; return $this-&gt;tree; &#125;&#125; 最后调用两个类进行二叉树的存取和遍历 index.php 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&lt;?phprequire_once &apos;redis.php&apos;;require_once &apos;tree.php&apos;;$myredis=new MyRedis(&apos;127.0.0.1&apos;,&apos;6379&apos;);/* 假设我构造一颗如下的二叉树 1 2 3 # 4 # # # #*///添加节点//$data=[// &apos;left&apos; =&gt; &apos;2&apos;,// &apos;right&apos; =&gt; &apos;3&apos;,//];//$res=$myredis-&gt;addNode(1,$data);////$data=[// &apos;left&apos; =&gt; &apos;#&apos;,// &apos;right&apos; =&gt; &apos;4&apos;,//];//$res=$myredis-&gt;addNode(2,$data);////$data=[// &apos;left&apos; =&gt; &apos;#&apos;,// &apos;right&apos; =&gt; &apos;#&apos;,//];//$res=$myredis-&gt;addNode(3,$data);////$data=[// &apos;left&apos; =&gt; &apos;#&apos;,// &apos;right&apos; =&gt; &apos;#&apos;,//];//$res=$myredis-&gt;addNode(4,$data);//print_r($res);//修改节点信息//$res=$myredis-&gt;setNode(1,&apos;left&apos;,2);//print_r($res);//查询指定节点//$res=$myredis-&gt;getNode(1);//print_r($res);//清空数据//$res=$myredis-&gt;flushDB();//获取redis所有键//$res=$myredis-&gt;getKeys();//print_r($res);//前序遍历的顺序从redis读取节点$data=$myredis-&gt;tree(1);//$data = array(1,2,&apos;#&apos;,4,&apos;#&apos;,&apos;#&apos;,3,&apos;#&apos;,&apos;#&apos;);//生成二叉树$tree = new BinaryTree($data);$root = $tree-&gt;CreateBT();//遍历二叉树echo &apos;前序：&apos;;$tree-&gt;PreOrder($root);echo &apos;&lt;br&gt;中序：&apos;;$tree-&gt;InOrder($root);echo &apos;&lt;br&gt;后序：&apos;;$tree-&gt;PosOrder($root);echo &apos;&lt;br&gt;层序：&apos;;$tree-&gt;LeverOrder($root); 执行结果 1234前序：1 2 4 3 中序：2 4 1 3 后序：4 2 3 1 层序：1 2 3 4]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
        <tag>php</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Thinkphp5添加谷歌双重验证]]></title>
    <url>%2F2020%2F12%2F14%2F19.Thinkphp5%E6%B7%BB%E5%8A%A0%E8%B0%B7%E6%AD%8C%E5%8F%8C%E9%87%8D%E9%AA%8C%E8%AF%81%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚博客地址：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian联系方式：jian1098@qq.com 说明谷歌双重验证，也叫谷歌身份验证器、GA验证码，是网站用来防止暴力破解的一种手段，与短信验证码功能类似。 本文使用Thinkphp5框架，其他版本框架的使用方法类似。一般情况下应该给每个用户生成各自的身份验证码。 下载类文件将github上的项目下载，然后将PHPGangsta目录复制到Thinkphp5框架的extend目录下 1https://github.com/PHPGangsta/GoogleAuthenticator 引入类文件由于下载的文件代码里没有使用命名空间，所以可以使用Thinkphp5自带的Loader引入文件 12345678910111213&lt;?phpnamespace app\admin\controller;use think\Controller;use think\Loader;class Google extends Controller&#123; public function index()&#123; Loader::import(&apos;PHPGangsta.GoogleAuthenticator&apos;,EXTEND_PATH); $ga = new \PHPGangsta_GoogleAuthenticator(); &#125;&#125; 生成密钥123456public function index()&#123; Loader::import(&apos;PHPGangsta.GoogleAuthenticator&apos;,EXTEND_PATH); $ga = new \PHPGangsta_GoogleAuthenticator(); $secret = $ga-&gt;createSecret(); echo &quot;Secret is: &quot;.$secret.&quot;\n\n&quot;;&#125; 执行结果： 1Secret is: O3DAUGDNGAGZINSQ 生成二维码链接getQRCodeGoogleUrl方法中的第一个参数是显示在手机上的备注，可以填写你的站点域名或者其他任意字符串，二维码图片尺寸可以在生成的链接中修改。 1234567public function index()&#123; Loader::import(&apos;PHPGangsta.GoogleAuthenticator&apos;,EXTEND_PATH); $ga = new \PHPGangsta_GoogleAuthenticator(); $secret = $ga-&gt;createSecret(); $qrCodeUrl = $ga-&gt;getQRCodeGoogleUrl(&apos;Blog&apos;, $secret); echo &quot;Google Charts URL for the QR-Code: &quot;.$qrCodeUrl.&quot;\n\n&quot;;&#125; 执行结果： 1Google Charts URL for the QR-Code: https://api.qrserver.com/v1/create-qr-code/?data=otpauth%3A%2F%2Ftotp%2FBlog%3Fsecret%3D7PUVFV7EZKH3DSWX&amp;size=200x200&amp;ecc=M 生成验证码1234567public function index()&#123; Loader::import(&apos;PHPGangsta.GoogleAuthenticator&apos;,EXTEND_PATH); $ga = new \PHPGangsta_GoogleAuthenticator(); $secret = $ga-&gt;createSecret(); $oneCode = $ga-&gt;getCode($secret); echo &quot;Checking Code &apos;$oneCode&apos; and Secret &apos;$secret&apos;:\n&quot;;&#125; 执行结果： 1Checking Code &apos;598278&apos; and Secret &apos;5SNJWY6656S5PMVV&apos;: 验证验证码123456789101112public function index()&#123; Loader::import(&apos;PHPGangsta.GoogleAuthenticator&apos;,EXTEND_PATH); $ga = new \PHPGangsta_GoogleAuthenticator(); $secret = $ga-&gt;createSecret(); $oneCode = $ga-&gt;getCode($secret); $checkResult = $ga-&gt;verifyCode($secret, $oneCode, 2); // 2 = 2*30sec clock tolerance if ($checkResult) &#123; echo &apos;OK&apos;; &#125; else &#123; echo &apos;FAILED&apos;; &#125;&#125; 执行结果： 1OK 手机客户端安卓客户端可以在Google Play搜索Google 身份验证器或者其他安卓市场下载，比如 豌豆荚： https://www.wandoujia.com/apps/com.google.android.apps.authenticator2 百度：https://mobile.baidu.com/item?docid=1385915&amp;source=mobres&amp;from=1010680m ios客户端在App Store 搜索 Authenticator即可]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>Thinkphp5</tag>
        <tag>谷歌身份验证</tag>
        <tag>双重验证</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Supervisor实现Linux守护进程]]></title>
    <url>%2F2020%2F12%2F14%2F17.%E4%BD%BF%E7%94%A8Supervisor%20%E5%AE%9E%E7%8E%B0Linux%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚博客地址：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian联系方式：jian1098@qq.com 前言做过系统软件开发的人都会遇到，如果写好的程序需要在Linux后台运行时不太好处理，用nohup和&amp;放到后台的话，很难对线程进行停止和重启操作。Supervisor (http://supervisord.org) 是一个用 Python 写的进程管理工具，可以很方便的实现启动、重启、关闭进程、意外停止自动重启、日志分割等功能。除了对单个进程的控制，还可以同时启动、关闭多个进程，比如很不幸的服务器出问题导致所有应用程序都被杀死，此时可以用 supervisor 同时启动所有应用程序而不是一个一个地敲命令启动，同时Supervisor 提供web管理页面可以进行远程管理，非常方便。 安装supervisorCentos 123[root@ztg ~]# yum install epel-release #如果已经有python环境可以跳过前两步[root@ztg ~]# yum install -y python-pip[root@ztg ~]# pip install supervisor Ubuntu 1[root@ztg ~]# apt-get install supervisor 配置supervisor生成配置文件 1[root@ztg ~]# echo_supervisord_conf &gt; /etc/supervisord.conf 如果出现下面的错误 12345678910Traceback (most recent call last): File &quot;/usr/bin/supervisord&quot;, line 5, in &lt;module&gt; from pkg_resources import load_entry_point File &quot;/usr/lib/python2.6/site-packages/pkg_resources.py&quot;, line 2655, in &lt;module&gt; working_set.require(__requires__) File &quot;/usr/lib/python2.6/site-packages/pkg_resources.py&quot;, line 648, in require needed = self.resolve(parse_requirements(requirements)) File &quot;/usr/lib/python2.6/site-packages/pkg_resources.py&quot;, line 546, in resolve raise DistributionNotFound(req)pkg_resources.DistributionNotFound: meld3&gt;=0.6.5 请以此执行下面4行命令再生成配置文件 1234[root@ztg ~]# wget https://pypi.python.org/packages/source/m/meld3/meld3-1.0.2.tar.gz[root@ztg ~]# tar -zxf meld3-1.0.2.tar.gz[root@ztg ~]# cd meld3-1.0.2[root@ztg ~]# python setup.py install 编辑/etc/supervisord.conf，在最后增加要自定义运行程序的配置信息：（举例的httpserver是用golang实现的简单的http服务程序） 1[root@ztg ~]# vi /etc/supervisord.conf 12345678910111213[program:httpserver]command=/bin/bash -c &quot;/home/ztg/httpserver&quot;autostart=trueautorestart=truestartsecs=10stdout_logfile=/var/log/go_http_server_info.logstdout_logfile_maxbytes=2MBstdout_logfile_backups=30stdout_capture_maxbytes=2MBstderr_logfile=/var/log/go_http_server_error.logstderr_logfile_maxbytes=2MBstderr_logfile_backups=30stderr_capture_maxbytes=2MB 配置说明 12345678910111213[program:程序名]command=/bin/bash -c &quot;需要执行的命令，多句命令用分号隔开&quot;autostart=true 是否跟随supervisor一起启动autorestart=true 如果该程序挂了，是否重新启动startsecs=10stdout_logfile=/var/log/go_http_server_info.log 终端标准输出重定向文件stdout_logfile_maxbytes=2MB 文件最大大小stdout_logfile_backups=30 文件备份最大数量stdout_capture_maxbytes=2MB stderr_logfile=/var/log/go_http_server_error.log 终端错误输出重定向文件stderr_logfile_maxbytes=2MBstderr_logfile_backups=30stderr_capture_maxbytes=2MB 操作supervisor启动supervisor，使用默认配置文件： 1$ supervisord 或者指定配置文件： 1$ /usr/bin/supervisord -c /etc/supervisord.conf 启动supervisor之后可以执行supervisorctl相关命令 supervisorctl 常用命令： 命令 说明 supervisorctl stop program_name 停止某个进程 supervisorctl start program_name 启动某个进程 supervisorctl restart program_name 重启某个进程 supervisorctl stop all 停止全部进程 supervisorctl reload 载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程 supervisorctl update 根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启 查看运行状态并进入控制台，在控制台中执行命令可以省去supervisorctl命令 1234$ supervisorctlhttpserver RUNNING pid 34236, uptime 0:00:28supervisor&gt; stop httpserverhttpserver: stopped Web管理页面supervisor提供了可视化的Web管理页面，允许远程操作，但是需要在配置文件手动打开。 打开配置文件 1$ vi /etc/supervisord.conf 将下面几行前面的分号去掉，修改一下数据保存退出 1234[inet_http_server] ; HTTP 服务器，提供 web 管理界面port=192.168.1.194:9001 ; Web 管理后台运行的 IP 和端口，如果开放到公网，需要注意安全性username=user ; 登录管理后台的用户名password=123 ; 登录管理后台的密码 重新载入配置 1$ supervisorctl reload 在浏览器打开刚刚配置的ip和端口（192.168.1.194:9001）即可弹出登录框进入管理页面。 查看日志访问配置文件中定义的日志文件即可 12$ tail -f /var/log/go_http_server_info.log$ tail -f /var/log/go_http_server_error.log]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Supervisor</tag>
        <tag>守护进程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EOS调用Json-RPC接口]]></title>
    <url>%2F2020%2F12%2F14%2F16.EOS%E8%B0%83%E7%94%A8Json-RPC%E6%8E%A5%E5%8F%A3%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚博客地址：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian联系方式：jian1098@qq.com 接口说明本文基于EOS私有链环境，理论上测试环境也可以，比如jungle测试链，但是测试链提供的节点服务器一般无法使用wallet相关的接口，比如创建钱包、交易签名等，因为没有开启–filter-on。私有链的搭建步骤可以参见我的另一篇文章《Ubuntu下EOS测试环境(私链)搭建》。 本文的所有参数都是json格式，以表单字段格式post是不行的。 旧版本的eos的chain和wallet功能都是有nodeos程序执行的，新版本更新后与wallet相关的RPC接口改为keosd程序控制，所以要使用与wallet相关的RPC接口必须先启动keosd程序，并且两个程序的端口不能相同。本文的nodeos程序端口为默认的8888，keosd程序端口设置为8889。 nodeos程序是可以不运行在本地的，运行在本地的是私有链，也可以本地不运行，直接连接主网或者测试网络的ip和端口。但是keosd是要运行在本地的，主网和测试网络上没有提供对钱包操作相关的接口，只能在本地操作钱包。所以如果要创建一个EOS节点，要操作钱包的话，不管是私链，主网还是测试网，都要一台服务器编译源码，然后启动keosd来管理钱包账号。 启动nodeos12jian@ubuntu:~$ cd ~/eos/build/programs/nodeosjian@ubuntu:~$ sudo ./nodeos -e -p eosio -d /data/eos --plugin eosio::chain_api_plugin --plugin eosio::history_api_plugin --plugin eosio::bnet_plugin --contracts-console --filter-on &quot;*&quot; --access-control-allow-origin &quot;*&quot; --max-transaction-time=1000 --verbose-http-errors 启动成功后大约每0.5秒就产生一个区块 启动keosd打开另一个终端执行，ip地址192.168.1.131:8889改为你的本地ip 12jian@ubuntu:~$ cd ~/eos/build/programs/keosdjian@ubuntu:~/eos/build/programs/keosd$ ./keosd --http-server-address 192.168.1.115:8889 --access-control-allow-origin &quot;*&quot; --plugin eosio::wallet_api_plugin --verbose-http-errors --plugin eosio::wallet_plugin 这里会出现一个错误警告，但是不影响后面的操作 12345678910error 2018-12-08T02:48:31.877 thread-0 wallet_api_plugin.cpp:123 plugin_initialize ] ********!!!SECURITY ERROR!!!********* ** -- Wallet API -- ** - EXPOSED to the LOCAL NETWORK - ** - HTTP RPC is NOT encrypted - ** - Password and/or Private Keys - ** - are at HIGH risk of exposure - ** ************************************* 访问RPC接口在浏览器打开：http://127.0.0.1:8888/v1/chain/get_info ，推荐使用postman等http调试工具进行调试，云服务器请在安全组策略开放8888和8889两个端口。 如果需要开放给外部浏览器访问RPC端口，需要修改配置文件： 12jian@ubuntu:~/eos$ cd ~/.local/share/eosio/nodeos/configjian@ubuntu:~/.local/share/eosio/nodeos/config$ sudo vi config.ini 将 http-server-address = 127.0.0.1:8888改为你的公网ip和端口即可，或者在启动命令添加参数 –http-server-address = 192.168.1.123:8888，然后在浏览器打开：http://192.168.1.123:8888/v1/chain/get_info 。修改后在命令行对使用cleos程序都必须带上 –url http://192.168.1.131:8888，例如： 1sudo ./cleos --url http://192.168.1.131:8888 get account ubuntueos111 chain相关接口获取节点信息接口链接：http://192.168.1.131:8888/v1/chain/get_info post参数：无 返回数据： 123456789101112131415&#123; &quot;server_version&quot;: &quot;549c96cd&quot;, &quot;chain_id&quot;: &quot;e70aaab8997e1dfce58fbfac80cbbb8fecec7b99cf982a9444273cbc64c41473&quot;, &quot;head_block_num&quot;: 2334727, &quot;last_irreversible_block_num&quot;: 2334397, &quot;last_irreversible_block_id&quot;: &quot;00239ebdb4ef886adebd4eb456326acb833325ac05f0c2b94aca523272ac5ca0&quot;, &quot;head_block_id&quot;: &quot;0023a0070c2267d1bff305c62d0285d0ccf6ab021b3a624f1daab70866dae6e5&quot;, &quot;head_block_time&quot;: &quot;2018-12-07T09:09:50.500&quot;, &quot;head_block_producer&quot;: &quot;batinthedark&quot;, &quot;virtual_block_cpu_limit&quot;: 200000000, &quot;virtual_block_net_limit&quot;: 1048576000, &quot;block_cpu_limit&quot;: 199920, &quot;block_net_limit&quot;: 1048576, &quot;server_version_string&quot;: &quot;v1.5.0-rc2&quot;&#125; 获取区块信息接口链接：http://192.168.1.131:8888/v1/chain/get_block post参数：{“block_num_or_id”:”13598552”} 返回数据： 1234567891011121314151617&#123; &quot;code&quot;: 500, &quot;message&quot;: &quot;Internal Service Error&quot;, &quot;error&quot;: &#123; &quot;code&quot;: 3010008, &quot;name&quot;: &quot;block_id_type_exception&quot;, &quot;what&quot;: &quot;Invalid block ID&quot;, &quot;details&quot;: [ &#123; &quot;message&quot;: &quot;Invalid Block number or ID, must be greater than 0 and less than 64 characters&quot;, &quot;file&quot;: &quot;chain_plugin.cpp&quot;, &quot;line_number&quot;: 1484, &quot;method&quot;: &quot;get_block&quot; &#125; ] &#125;&#125; 获取账户信息接口链接：http://192.168.1.131:8888/v1/chain/get_account post参数：{“account_name”:”account1”} 返回数据： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980&#123; &quot;account_name&quot;: &quot;exchange1234&quot;, &quot;head_block_num&quot;: 2337585, &quot;head_block_time&quot;: &quot;2018-12-07T09:33:49.500&quot;, &quot;privileged&quot;: false, &quot;last_code_update&quot;: &quot;1970-01-01T00:00:00.000&quot;, &quot;created&quot;: &quot;2018-11-29T06:01:52.000&quot;, &quot;core_liquid_balance&quot;: &quot;200.0000 EOS&quot;, &quot;ram_quota&quot;: 5467, &quot;net_weight&quot;: 10000, &quot;cpu_weight&quot;: 10000, &quot;net_limit&quot;: &#123; &quot;used&quot;: 0, &quot;available&quot;: 273176, &quot;max&quot;: 273176 &#125;, &quot;cpu_limit&quot;: &#123; &quot;used&quot;: 0, &quot;available&quot;: 51893, &quot;max&quot;: 51893 &#125;, &quot;ram_usage&quot;: 3446, &quot;permissions&quot;: [ &#123; &quot;perm_name&quot;: &quot;active&quot;, &quot;parent&quot;: &quot;owner&quot;, &quot;required_auth&quot;: &#123; &quot;threshold&quot;: 1, &quot;keys&quot;: [ &#123; &quot;key&quot;: &quot;EOS6PDC4Cn87RPPKgyrT3faf3pMrAuppLHqpJaxHRuZgkCTqzUduS&quot;, &quot;weight&quot;: 1 &#125; ], &quot;accounts&quot;: [], &quot;waits&quot;: [] &#125; &#125;, &#123; &quot;perm_name&quot;: &quot;owner&quot;, &quot;parent&quot;: &quot;&quot;, &quot;required_auth&quot;: &#123; &quot;threshold&quot;: 1, &quot;keys&quot;: [ &#123; &quot;key&quot;: &quot;EOS6PDC4Cn87RPPKgyrT3faf3pMrAuppLHqpJaxHRuZgkCTqzUduS&quot;, &quot;weight&quot;: 1 &#125; ], &quot;accounts&quot;: [], &quot;waits&quot;: [] &#125; &#125; ], &quot;total_resources&quot;: &#123; &quot;owner&quot;: &quot;exchange1234&quot;, &quot;net_weight&quot;: &quot;1.0000 EOS&quot;, &quot;cpu_weight&quot;: &quot;1.0000 EOS&quot;, &quot;ram_bytes&quot;: 4067 &#125;, &quot;self_delegated_bandwidth&quot;: &#123; &quot;from&quot;: &quot;exchange1234&quot;, &quot;to&quot;: &quot;exchange1234&quot;, &quot;net_weight&quot;: &quot;1.0000 EOS&quot;, &quot;cpu_weight&quot;: &quot;1.0000 EOS&quot; &#125;, &quot;refund_request&quot;: null, &quot;voter_info&quot;: &#123; &quot;owner&quot;: &quot;exchange1234&quot;, &quot;proxy&quot;: &quot;&quot;, &quot;producers&quot;: [], &quot;staked&quot;: 20000, &quot;last_vote_weight&quot;: &quot;0.00000000000000000&quot;, &quot;proxied_vote_weight&quot;: &quot;0.00000000000000000&quot;, &quot;is_proxy&quot;: 0, &quot;reserved1&quot;: 0, &quot;reserved2&quot;: 0, &quot;reserved3&quot;: &quot;0 &quot; &#125;&#125; 获取指定币种信息接口链接：http://192.168.1.131:8888/v1/chain/get_currency_stats post参数：{“code”:”eosio.token”, “symbol”:”EOS”} 返回数据： 1234567&#123; &quot;EOS&quot;: &#123; &quot;supply&quot;: &quot;8014684620.4023 EOS&quot;, &quot;max_supply&quot;: &quot;100000000000.0000 EOS&quot;, &quot;issuer&quot;: &quot;eosio&quot; &#125;&#125; json 转 bin接口链接：http://192.168.1.131:8888/v1/chain/abi_json_to_bin post参数： 12345678910&#123; &quot;code&quot;: &quot;eosio.token&quot;, &quot;action&quot;: &quot;transfer&quot;, &quot;args&quot;: &#123; &quot;from&quot;: &quot;eosio&quot;, &quot;to&quot;: &quot;exchange1111&quot;, &quot;quantity&quot;: &quot;100.0000 EOS&quot;, &quot;memo&quot;: &quot;send&quot; &#125;&#125; 返回数据： 123&#123; &quot;binargs&quot;: &quot;0086088a4dd350571042088a4dd3505740420f000000000004454f53000000000473656e64&quot;&#125; 查询余额接口链接：http://192.168.1.131:8888/v1/chain/get_currency_balance post参数： {“code”:”eosio.token”, “account”: “account1”, “symbol”:”EOS”} 参数说明：account为账号名，symbol为指定代币名 返回数据： 123[ &quot;200.0000 EOS&quot;] wallet相关接口 注意与wallet相关的接口需要启动keosd程序，并且端口为8889 创建钱包接口链接：http://192.168.1.131:8889/v1/wallet/create post参数：”account1” 参数说明：传入需要创建的账号名即可,返回结果是钱包的私钥 返回数据： 1&quot;PW5HrziwLJZYntiyNQnS7F9FSFFJAGjeZSDT2U5tbR5WVxWVgapRv&quot; 钱包列表接口链接：http://192.168.1.131:8889/v1/wallet/list_wallets post参数：无 返回数据： 12345[ &quot;account1&quot;, &quot;account2&quot;, &quot;account3 *&quot;] 锁定指定钱包接口链接：http://192.168.1.131:8889/v1/wallet/lock post参数：”accountname” 参数说明：传入需要解锁的账号名即可 返回数据： 1&#123;&#125; 锁定所有钱包接口链接：http://192.168.1.131:8889/v1/wallet/lock_all post参数：无 返回数据： 1&#123;&#125; 解锁钱包接口链接：http://192.168.1.131:8889/v1/wallet/unlock post参数：[“account3”, “PW5Kxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx”] 参数说明：传入需要解锁的账号名和私钥 返回数据： 1&#123;&#125; 设置自动锁定时间接口链接：http://192.168.1.131:8889/v1/wallet/set_timeout post参数：3600 参数说明：单位是秒 返回数据： 1&#123;&#125; 获取所有钱包中的公钥接口链接：http://192.168.1.131:8889/v1/wallet/get_public_keys post参数：无 返回数据： 123[ &quot;EOS5Fwtc4vnQE8AigimXvHrERrK7XFpycQ8Dijq2611timbVTReDt&quot;] 导入私钥接口链接：http://192.168.1.131:8889/v1/wallet/import_key post参数：[“account3”,”5JxhYZZnFJJMRrf7KkSHNLFq2LM4eZigJfeKXXYSa1TvPMdWtLc”] 参数说明：账号名和密钥对的私钥 返回数据： 1&#123;&#125; 获取指定钱包的公私钥对接口链接：http://192.168.1.131:8889/v1/wallet/list_keys post参数：[“account3”,”PW5HrziwLJZYntiyNQnS7F9FSFFJAGjeZSDT2U5tbR5WVxWVgapRv”] 参数说明：账号名和私钥，返回私钥对的public key和private key 返回数据： 123456[ [ &quot;EOS5Fwtc4vnQE8AigimXvHrERrK7XFpycQ8Dijq2611timbVTReDt&quot;, &quot;5JxhYZZnFJJMRrf7KkSHNLFq2LM4eZigJfeKXXYSa1TvPMdWtLc&quot; ]] history相关接口要使用history相关的接口，节点启动必须--filter-on &quot;*&quot;参数，一般网上公开的节点是不开启的，所以查到的数据为空 获取指定账号的交易记录接口链接：http://192.168.1.115:8888/v1/history/get_actions post参数：{“pos”:0,”offset”:5,”account_name”:”exchange2222”} 参数说明：偏移量、查找数量和要查询的账号名，前两个参数好像不起作用。 如果是在jungle测试网络，可以逐个节点测试，一般都会有几个节点打开--filter-on的，例如 http://jungle2-eos.blckchnd.com:8888 这个节点 返回数据： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293&#123; &quot;actions&quot;: [ &#123; &quot;global_action_seq&quot;: 19298, &quot;account_action_seq&quot;: 0, &quot;block_num&quot;: 19240, &quot;block_time&quot;: &quot;2018-07-22T02:55:42.000&quot;, &quot;action_trace&quot;: &#123; &quot;receipt&quot;: &#123; &quot;receiver&quot;: &quot;exchange2222&quot;, &quot;act_digest&quot;: &quot;f8ce7062290be813e6484e50c7c0e3c22a9898e3240bab76f7e11b99c07abe52&quot;, &quot;global_sequence&quot;: 19298, &quot;recv_sequence&quot;: 5, &quot;auth_sequence&quot;: [ [ &quot;eosio&quot;, ] ], &quot;code_sequence&quot;: 1, &quot;abi_sequence&quot;: 1 &#125;, &quot;act&quot;: &#123; &quot;account&quot;: &quot;eosio.token&quot;, &quot;name&quot;: &quot;transfer&quot;, &quot;authorization&quot;: [ &#123; &quot;actor&quot;: &quot;eosio&quot;, &quot;permission&quot;: &quot;active&quot; &#125; ], &quot;data&quot;: &#123; &quot;from&quot;: &quot;eosio&quot;, &quot;to&quot;: &quot;exchange2222&quot;, &quot;quantity&quot;: &quot;10.0000 SYS&quot;, &quot;memo&quot;: &quot;&quot; &#125;, &quot;hex_data&quot;: &quot;0000000000ea305500dca79ab1e98e49a086010000000000045359530000000000&quot; &#125;, &quot;elapsed&quot;: 6, &quot;cpu_usage&quot;: 0, &quot;console&quot;: &quot;&quot;, &quot;total_cpu_usage&quot;: 0, &quot;trx_id&quot;: &quot;b09395d938e594b838277453cea832ddc5d57ab5e92d8763ea011df9e35d7b34&quot;, &quot;inline_traces&quot;: [] &#125; &#125;, &#123; &quot;global_action_seq&quot;: 21095, &quot;account_action_seq&quot;: 1, &quot;block_num&quot;: 21034, &quot;block_time&quot;: &quot;2018-07-22T03:10:39.000&quot;, &quot;action_trace&quot;: &#123; &quot;receipt&quot;: &#123; &quot;receiver&quot;: &quot;exchange2222&quot;, &quot;act_digest&quot;: &quot;72ae6a2af84b85d4b4e20190a56904f53afa2a79ab4c47ca2f15874c4c309205&quot;, &quot;global_sequence&quot;: 21095, &quot;recv_sequence&quot;: 6, &quot;auth_sequence&quot;: [ [ &quot;eosio&quot;, ] ], &quot;code_sequence&quot;: 1, &quot;abi_sequence&quot;: 1 &#125;, &quot;act&quot;: &#123; &quot;account&quot;: &quot;eosio.token&quot;, &quot;name&quot;: &quot;transfer&quot;, &quot;authorization&quot;: [ &#123; &quot;actor&quot;: &quot;eosio&quot;, &quot;permission&quot;: &quot;active&quot; &#125; ], &quot;data&quot;: &#123; &quot;from&quot;: &quot;eosio&quot;, &quot;to&quot;: &quot;exchange2222&quot;, &quot;quantity&quot;: &quot;2.0000 SYS&quot;, &quot;memo&quot;: &quot;&quot; &#125;, &quot;hex_data&quot;: &quot;0000000000ea305500dca79ab1e98e49204e000000000000045359530000000000&quot; &#125;, &quot;elapsed&quot;: 6, &quot;cpu_usage&quot;: 0, &quot;console&quot;: &quot;&quot;, &quot;total_cpu_usage&quot;: 0, &quot;trx_id&quot;: &quot;e1cafa2561470a0b489a4e2032375a5c88665f75e5172bac7b574cd051079d42&quot;, &quot;inline_traces&quot;: [] &#125; &#125; ], &quot;last_irreversible_block&quot;: 64270&#125; 根据交易id查询交易信息接口链接：http://192.168.1.115:8888/v1/history/get_transaction post参数：{“id”:”50c9bedc542a5d17a66bace81486d2fc2e3b047ed67d34c2ad0c1c6d75040948”} 返回数据： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&#123; &quot;id&quot;: &quot;50c9bedc542a5d17a66bace81486d2fc2e3b047ed67d34c2ad0c1c6d75040948&quot;, &quot;trx&quot;: &#123; &quot;receipt&quot;: &#123; &quot;status&quot;: &quot;executed&quot;, &quot;cpu_usage_us&quot;: 4933, &quot;net_usage_words&quot;: 17, &quot;trx&quot;: [ 1, &#123; &quot;signatures&quot;: [ &quot;SIG_K1_KiSVEWDyt5DcxB4wyKGBg1DQGMbxNqPBr7ac3ia7qgU3wopTmnvePWisi8ZvaxVerciCVrZaRaQxcYmjqzvXCZVbx4f66T&quot; ], &quot;compression&quot;: &quot;none&quot;, &quot;packed_context_free_data&quot;: &quot;&quot;, &quot;packed_trx&quot;: &quot;08600b5c7c634a617031000000000100a6823403ea3055000000572d3ccdcd010000000000ea305500000000a8ed3232250000000000ea3055000000214f4d113240420f000000000004454f5300000000046d656d6f00&quot; &#125; ] &#125;, &quot;trx&quot;: &#123; &quot;expiration&quot;: &quot;2018-12-08T06:09:12&quot;, &quot;ref_block_num&quot;: 25468, &quot;ref_block_prefix&quot;: 829448522, &quot;max_net_usage_words&quot;: 0, &quot;max_cpu_usage_ms&quot;: 0, &quot;delay_sec&quot;: 0, &quot;context_free_actions&quot;: [], &quot;actions&quot;: [ &#123; &quot;account&quot;: &quot;eosio.token&quot;, &quot;name&quot;: &quot;transfer&quot;, &quot;authorization&quot;: [ &#123; &quot;actor&quot;: &quot;eosio&quot;, &quot;permission&quot;: &quot;active&quot; &#125; ], &quot;data&quot;: &#123; &quot;from&quot;: &quot;eosio&quot;, &quot;to&quot;: &quot;account1&quot;, &quot;quantity&quot;: &quot;100.0000 EOS&quot;, &quot;memo&quot;: &quot;memo&quot; &#125;, &quot;hex_data&quot;: &quot;0000000000ea3055000000214f4d113240420f000000000004454f5300000000046d656d6f&quot; &#125; ], &quot;transaction_extensions&quot;: [], &quot;signatures&quot;: [ &quot;SIG_K1_KiSVEWDyt5DcxB4wyKGBg1DQGMbxNqPBr7ac3ia7qgU3wopTmnvePWisi8ZvaxVerciCVrZaRaQxcYmjqzvXCZVbx4f66T&quot; ], &quot;context_free_data&quot;: [] &#125; &#125;, ............. &#125; ]&#125; 查询相同公钥的账号接口链接：http://192.168.1.131:8888/v1/history/get_key_accounts post参数：{“public_key”:”EOS5Fwtc4vnQE8AigimXvHrERrK7XFpycQ8Dijq2611timbVTReDt”} 参数说明：公钥 返回数据： 12345&#123; &quot;account_names&quot;: [ &quot;account1&quot; ]&#125; 交易相关接口通过RPC发送交易需要下面几个步骤 1.序列化交易信息接口链接：http://192.168.1.131:8888/v1/chain/abi_json_to_bin post参数： 12345678910&#123; &quot;code&quot;: &quot;eosio.token&quot;, &quot;action&quot;: &quot;transfer&quot;, &quot;args&quot;: &#123; &quot;from&quot;: &quot;account1&quot;, &quot;to&quot;: &quot;account2&quot;, &quot;quantity&quot;: &quot;2.0000 EOS&quot;, &quot;memo&quot;: &quot;send to account2&quot; &#125;&#125; 参数说明：设置好from,to账号和数量，memo是备注 返回数据： 123&#123; &quot;binargs&quot;: &quot;000000214f4d1132000000224f4d1132204e00000000000004454f53000000001073656e6420746f206163636f756e7432&quot;&#125; 2.获取最新区块接口链接：http://192.168.1.131:8888/v1/chain/get_info post参数：无 返回数据： 123456789101112131415&#123; &quot;server_version&quot;: &quot;ea08cfd3&quot;, &quot;chain_id&quot;: &quot;cf057bbfb72640471fd910bcb67639c22df9f92470936cddc1ade0e2f2e7dc4f&quot;, &quot;head_block_num&quot;: 43593, &quot;last_irreversible_block_num&quot;: 43592, &quot;last_irreversible_block_id&quot;: &quot;0000aa48c52fe5f17caf8adaca191a48c567bdb746feac4a92f65d3e7ced13ae&quot;, &quot;head_block_id&quot;: &quot;0000aa49cc362b1a6eba086a329b14e1c1933c0629a3e72b06b16b7862b8c18a&quot;, &quot;head_block_time&quot;: &quot;2018-12-08T08:42:33.500&quot;, &quot;head_block_producer&quot;: &quot;eosio&quot;, &quot;virtual_block_cpu_limit&quot;: 200000000, &quot;virtual_block_net_limit&quot;: 1048576000, &quot;block_cpu_limit&quot;: 199900, &quot;block_net_limit&quot;: 1048576, &quot;server_version_string&quot;: &quot;v1.5.0-dirty&quot;&#125; 得到最新区块为43593 3. 获取区块id接口链接：http://192.168.1.131:8888/v1/chain/get_block post参数：{“block_num_or_id”:”43593”} 返回数据： 1234567891011121314151617&#123; &quot;timestamp&quot;: &quot;2018-12-08T08:42:33.500&quot;, &quot;producer&quot;: &quot;eosio&quot;, &quot;confirmed&quot;: 0, &quot;previous&quot;: &quot;0000aa48c52fe5f17caf8adaca191a48c567bdb746feac4a92f65d3e7ced13ae&quot;, &quot;transaction_mroot&quot;: &quot;0000000000000000000000000000000000000000000000000000000000000000&quot;, &quot;action_mroot&quot;: &quot;7d8b4c41547eedad2be4418c53160051976acd272bce9d8688064bd846319772&quot;, &quot;schedule_version&quot;: 0, &quot;new_producers&quot;: null, &quot;header_extensions&quot;: [], &quot;producer_signature&quot;: &quot;SIG_K1_KctYCoHaaRHnVhyWj3AohoLwHzq8GbLShtT3H5yJ7uMG7GQujzfBmZ9JgNgv9JAxP6C6sgWXp89Fkvkdmbsx7zRLMJbfGF&quot;, &quot;transactions&quot;: [], &quot;block_extensions&quot;: [], &quot;id&quot;: &quot;0000aa49cc362b1a6eba086a329b14e1c1933c0629a3e72b06b16b7862b8c18a&quot;, &quot;block_num&quot;: 43593, &quot;ref_block_prefix&quot;: 1778956910&#125; 得到id和ref_block_prefix 4.获取from账号信息接口链接：http://192.168.1.131:8888/v1/chain/get_account post参数：{“account_name”:”account1”} 返回数据： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&#123; &quot;account_name&quot;: &quot;account1&quot;, &quot;head_block_num&quot;: 44703, &quot;head_block_time&quot;: &quot;2018-12-08T08:51:48.500&quot;, &quot;privileged&quot;: false, &quot;last_code_update&quot;: &quot;1970-01-01T00:00:00.000&quot;, &quot;created&quot;: &quot;2018-12-08T06:01:14.000&quot;, &quot;ram_quota&quot;: -1, &quot;net_weight&quot;: -1, &quot;cpu_weight&quot;: -1, &quot;net_limit&quot;: &#123; &quot;used&quot;: -1, &quot;available&quot;: -1, &quot;max&quot;: -1 &#125;, &quot;cpu_limit&quot;: &#123; &quot;used&quot;: -1, &quot;available&quot;: -1, &quot;max&quot;: -1 &#125;, &quot;ram_usage&quot;: 2724, &quot;permissions&quot;: [ &#123; &quot;perm_name&quot;: &quot;active&quot;, &quot;parent&quot;: &quot;owner&quot;, &quot;required_auth&quot;: &#123; &quot;threshold&quot;: 1, &quot;keys&quot;: [ &#123; &quot;key&quot;: &quot;EOS75hPAeMGgAw9FYLTAHqjHyicjW82bB1q9grXqDtCdMDMpe1eoa&quot;, &quot;weight&quot;: 1 &#125; ], &quot;accounts&quot;: [], &quot;waits&quot;: [] &#125; &#125;, &#123; &quot;perm_name&quot;: &quot;owner&quot;, &quot;parent&quot;: &quot;&quot;, &quot;required_auth&quot;: &#123; &quot;threshold&quot;: 1, &quot;keys&quot;: [ &#123; &quot;key&quot;: &quot;EOS5Fwtc4vnQE8AigimXvHrERrK7XFpycQ8Dijq2611timbVTReDt&quot;, &quot;weight&quot;: 1 &#125; ], &quot;accounts&quot;: [], &quot;waits&quot;: [] &#125; &#125; ], &quot;total_resources&quot;: null, &quot;self_delegated_bandwidth&quot;: null, &quot;refund_request&quot;: null, &quot;voter_info&quot;: null&#125; 可以得到active权限的公钥是EOS75hPAeMGgAw9FYLTAHqjHyicjW82bB1q9grXqDtCdMDMpe1eoa 5.解锁from钱包接口链接：http://192.168.1.131:8889/v1/wallet/unlock post参数：[“account3”, “PW5Kxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx”] 参数说明：传入需要解锁的账号名和私钥 返回数据： 1&#123;&#125; 6.交易签名1234567891011121314151617[&#123; &quot;ref_block_num&quot;: 43593, &quot;ref_block_prefix&quot;: 1778956910, &quot;expiration&quot;: &quot;2018-12-8T06:30:10.000&quot;, &quot;actions&quot;: [&#123; &quot;account&quot;: &quot;eosio.token&quot;, &quot;name&quot;: &quot;transfer&quot;, &quot;authorization&quot;: [&#123; &quot;actor&quot;: &quot;account1&quot;, &quot;permission&quot;: &quot;active&quot; &#125;], &quot;data&quot;: &quot;000000214f4d1132000000224f4d1132204e00000000000004454f53000000001073656e6420746f206163636f756e7432&quot; &#125;], &quot;signatures&quot;: [] &#125;, [&quot;EOS75hPAeMGgAw9FYLTAHqjHyicjW82bB1q9grXqDtCdMDMpe1eoa&quot;], &quot;0000aa49cc362b1a6eba086a329b14e1c1933c0629a3e72b06b16b7862b8c18a&quot;] 参考文章https://www.jianshu.com/p/3c9cb9bc6fd6 https://eos.readthedocs.io/zh_CN/latest/API/EOSIO-RPC/]]></content>
      <categories>
        <category>EOS</category>
      </categories>
      <tags>
        <tag>EOS</tag>
        <tag>Json-RPC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu下EOS测试环境(私有链)搭建]]></title>
    <url>%2F2020%2F12%2F14%2F15.Ubuntu%E4%B8%8BEOS%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83(%E7%A7%81%E6%9C%89%E9%93%BE)%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚个人博客：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 环境要求 Ubuntu 16.04及以上 内存4G以上（官方要求8G，可以通过修改文件降低要求） 编译安装clone源码 1root@iZj6c4i3ovav4gk164bft3Z:~# git clone https://github.com/eosio/eos.git --recursive 如果要编译指定版本，可以加上参数，例如： 1git clone -b release/1.7.x https://github.com/eosio/eos.git --recursive 需要注意的是，MongoDB是EOS的依赖项之一，而在墙内下载该依赖项会失败，请先科学上网，再开始编译，否则会无法下载MongoDB导致编译失败。 编译 12root@iZj6c4i3ovav4gk164bft3Z:~# cd eos/scriptsroot@iZj6c4i3ovav4gk164bft3Z:~/eos/scripts$ sudo ./eosio_build.sh #需要3个小时左右，遇到错误请往下看 如果提示下面的信息，说明内存达不到要求，至少需要7G以上内存空间 123......Your system must have 7 or more Gigabytes of physical memory installed.Exiting now. 将VMware的内存增加到4G多一点，记住要多一点，然后修改./scripts/eosio_build_ubuntu.sh文件,查找报错的那行代码 1[[ $MEM_GIG -lt 7 ]] &amp;&amp; echo &quot;Your system must have 7 or more Gigabytes of physical memory installed.&quot; &amp;&amp; exit 1 将7修改为4即可，意思是将配置要求降低到4G内存 如果看到下面的5个红色大字表示已经编译完成了，除开填坑的时间花了整整4个小时 1234567891011121314151617181920212223242526[100%] Built target print_floats _______ _______ _______ _________ _______ ( ____ \( ___ )( ____ \\__ __/( ___ ) | ( \/| ( ) || ( \/ ) ( | ( ) | | (__ | | | || (_____ | | | | | | | __) | | | |(_____ ) | | | | | | | ( | | | | ) | | | | | | | | (____/\| (___) |/\____) |___) (___| (___) | (_______/(_______)\_______)\_______/(_______) EOSIO has been successfully built. 00:38:51 To verify your installation run the following commands: export PATH=$&#123;HOME&#125;/opt/mongodb/bin:$PATH /home/jian/opt/mongodb/bin/mongod -f /home/jian/opt/mongodb/mongod.conf &amp; cd /home/jian/eos/build; make test For more information: EOSIO website: https://eos.io EOSIO Telegram channel @ https://t.me/EOSProject EOSIO resources: https://eos.io/resources/ EOSIO Stack Exchange: https://eosio.stackexchange.com EOSIO wiki: https://github.com/EOSIO/eos/wiki 编译完成后安装、设置软连接 12345root@iZj6c4i3ovav4gk164bft3Z:~/eos# cd buildroot@iZj6c4i3ovav4gk164bft3Z:~/eos/build$ sudo make installroot@iZj6c4i3ovav4gk164bft3Z:~/eos/build$ ln -fs /root/eos/build/bin/nodeos /usr/local/bin/nodeosroot@iZj6c4i3ovav4gk164bft3Z:~/eos/build$ ln -fs /root/eos/build/bin/keosd /usr/local/bin/keosdroot@iZj6c4i3ovav4gk164bft3Z:~/eos/build$ ln -fs /root/eos/build/bin/cleos /usr/local/bin/cleos 在./programs这个文件夹中可以找到eos的几个核心程序 nodeos： 区块链服务器节点生成组件。nedeos的配置文件位于~/Library/Application Support/eosio/nodeos/config文件夹中，区块数据存储在文件~/Library/Application Support/eosio/nodeos/data中 cleos： 和区块链交互的接口命令，要指定服务器地址和端口请使用参数-u http://127.0.0.1:8888 keosd： EOS 钱包，作用是存储私钥，以便cleos用以签署交易并发送到区块链中。keosd在本机运行，并且将私钥存储在本地。keosd会随着cleos自动启动。 eosio-launcher：节点网络组成和部署的应用 配置文件修改配置文件 12root@iZj6c4i3ovav4gk164bft3Z:~# cd ~/.local/share/eosio/nodeos/configroot@iZj6c4i3ovav4gk164bft3Z:~/eos# vi config.ini 将下面的内容添加到配置文件的最后保存 123456789101112131415161718192021# The local IP and port to listen for incoming http connections;http-server-address = 127.0.0.1:8888enable-stale-production = truefilter-on = *producer-name = eosioaccess-control-allow-origin = &quot;*&quot;max-transaction-time=1000# Load the block producer plugin, so you can produce blocksplugin = eosio::producer_plugin# As well as API and HTTP pluginsplugin = eosio::chain_api_pluginplugin = eosio::http_pluginhttp-validate-host = false# This will be used by the validation step below, to view historyplugin = eosio::history_api_pluginplugin = eosio::bnet_pluginplugin = eosio::state_history_plugin 启动节点1root@iZj6c4i3ovav4gk164bft3Z:~/eos# nodeos -e -p eosio -d /root/eos/data --contracts-console --trace-history --verbose-http-errors --disable-replay-opts 参数说明： -p：表示使用了 本地测试系统提供的原始账户 eosio 账户的权限 -d：区块数据存放目录 –plugin：插件 -e：开启Stale Production，即即便当前时间已经超过规定的区块生产时限，也继续产生 –plugin eosio::chain_api_plugin：开启区块链JSON API插件。 –plugin eosio::history_api_plugin：开启历史数据插件，有了这个插件，便能查询许多不在State中的数据，譬如一个公钥所对应的所有账户等等。 –contracts-console：开启合约控制台。如果不开启的话，合约中调用print函数输出的信息将会不可见。 –filter-on “*”：开启所有账户的历史纪录。默认状态下，节点不会记录账户的历史数据，从而使得命令cleos get actions返回空。 –access-control-allow-origin “*”：允许任意域名跨域访问API，如果不开启，在dApp开发中，网站会报错。 如果启动节点报错database dirty flag set (likely due to unclean shutdown): replay required,说明节点非正常退出导致数据异常，需要在启动命令加上参数--hard-replay 停止节点按下Ctrl+C即可停止节点 创建脚本由于启动命令太长不方便记忆，我们需要写一个启动脚本方便启动和停止，并且在后台运行程序 1vi start_nodeos.sh 将下面的内容复制进去保存，启动命令根据自己的需求修改 123#!/bin/bashnohup nodeos -e -p eosio -d /root/eos/data --contracts-console --trace-history --verbose-http-errors --disable-replay-opt &gt;&gt; nodeos.log 2&gt;&amp;1 &amp; 然后制作停止脚本 1vi stop_nodeos.sh 将下面的内容复制进去保存 12345678#!/bin/bashPIDS=`ps -ef |grep nodeos |grep -v grep | awk &apos;&#123;print $2&#125;&apos;`if [ &quot;$PIDS&quot; != &quot;&quot; ]; then kill -9 $PIDSelse echo `date +%F&quot; &quot;%H:%M:%S` &quot;nodeos is NOT runing!&quot;fi 配置脚本执行权限 1chmod u+x st*.sh 查看权限 1ls -la *.sh 后台要启动nodeos程序只要执行./start_nodeos.sh即可，查看日志文件 1tail -f nodeos.log 导入私钥首先我们需要创建一个默认的钱包，请记住的到的私钥 1234567root@iZj6c4i3ovav4gk164bft3Z:~/eos# cleos wallet create --to-console&quot;/root/eos/build/bin/keosd&quot; launchedCreating wallet: defaultSave password to use in the future to unlock this wallet.Without password imported keys will not be retrievable.&quot;PW5JpwC9Xbakce63ZEFRpqh2LEFSRwdXhrCDo67L86gKnxYPJihZA&quot; 这里创建了钱包名为default，密码为PW5JpwC9Xbakce63ZEFRpqh2LEFSRwdXhrCDo67L86gKnxYPJihZA的钱包。 进入配置文件 12root@iZj6c4i3ovav4gk164bft3Z:~/eos/build/programs/cleos$ cd ~/.local/share/eosio/nodeos/configroot@iZj6c4i3ovav4gk164bft3Z:~/.local/share/eosio/nodeos/config# vi config.ini 找到这一行 1# signature-provider = EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV=KEY:5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3 这是指定了默认区块产生者eosio的公私钥对，其中公钥为：EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV 相对应的私钥为：5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3 为什么钱包中已经有密钥对了还要再添加？ 每个EOS帐户都拥有owner(所有者)和active(活动权限)两个权限，因此，在大多数情况下，需要创建两个密钥，以便可以将一个密钥与每个权限相关联。 首先创建两个密钥对 12345678root@iZj6c4i3ovav4gk164bft3Z:~/eos# cd ~/eos/build/programs/cleosroot@iZj6c4i3ovav4gk164bft3Z:~/eos/build/programs/cleos$ sudo ./cleos create key --to-consolePrivate key: 5JxhYZZnFJJMRrf7KkSHNLFq2LM4eZigJfeKXXYSa1TvPMdWtLcPublic key: EOS5Fwtc4vnQE8AigimXvHrERrK7XFpycQ8Dijq2611timbVTReDtroot@iZj6c4i3ovav4gk164bft3Z:~/eos/build/programs/cleos$ sudo ./cleos create key --to-consolePrivate key: 5JXNT5zRfFDwzc7mKmd3AiYjT9dvfDosiFAo1drkneY6TrhTRUpPublic key: EOS75hPAeMGgAw9FYLTAHqjHyicjW82bB1q9grXqDtCdMDMpe1eoa 然后依次将eosio的私钥和两个Private key导入到创建的默认钱包中 12345678root@iZj6c4i3ovav4gk164bft3Z:~/.local/share/eosio/nodeos/config# cleos wallet import --private-key 5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3imported private key for: EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CVroot@iZj6c4i3ovav4gk164bft3Z:~/.local/share/eosio/nodeos/config# cleos wallet import --private-key 5JxhYZZnFJJMRrf7KkSHNLFq2LM4eZigJfeKXXYSa1TvPMdWtLcimported private key for: EOS5Fwtc4vnQE8AigimXvHrERrK7XFpycQ8Dijq2611timbVTReDtroot@iZj6c4i3ovav4gk164bft3Z:~/.local/share/eosio/nodeos/config# cleos wallet import --private-key 5JXNT5zRfFDwzc7mKmd3AiYjT9dvfDosiFAo1drkneY6TrhTRUpimported private key for: EOS75hPAeMGgAw9FYLTAHqjHyicjW82bB1q9grXqDtCdMDMpe1eoa 可以看到导入私钥后会自动给出对应的公钥。 在次打开默认钱包可以看到默认钱包中已经有3个密钥对了 123456root@iZj6c4i3ovav4gk164bft3Z:~/.local/share/eosio/nodeos/config# cleos wallet keys[ &quot;EOS5Fwtc4vnQE8AigimXvHrERrK7XFpycQ8Dijq2611timbVTReDt&quot;, &quot;EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;EOS75hPAeMGgAw9FYLTAHqjHyicjW82bB1q9grXqDtCdMDMpe1eoa&quot;] 发行代币在部署eosio.EOStem合约之前，必须先创建如下账户，创建账号使用eosio的公私钥对： 1234567891011EOStemAccounts = [ &apos;eosio.bpay&apos;, &apos;eosio.msig&apos;, &apos;eosio.names&apos;, &apos;eosio.ram&apos;, &apos;eosio.ramfee&apos;, &apos;eosio.saving&apos;, &apos;eosio.stake&apos;, &apos;eosio.token&apos;, &apos;eosio.upay&apos;,] 创建命令如下： 123456789cleos create account eosio eosio.bpay EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV;cleos create account eosio eosio.msig EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV;cleos create account eosio eosio.names EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV;cleos create account eosio eosio.ram EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV;cleos create account eosio eosio.ramfee EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV;cleos create account eosio eosio.saving EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV;cleos create account eosio eosio.stake EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV;cleos create account eosio eosio.token EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV;cleos create account eosio eosio.upay EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV; 执行的结果如下： 1234executed transaction: 9da6a67895e9efc1a794e4beae1f8134e6a3a0e866a5092cdfb55f77b7642c5d 200 bytes 192 us# eosio &lt;= eosio::newaccount &#123;&quot;creator&quot;:&quot;eosio&quot;,&quot;name&quot;:&quot;eosio.upay&quot;,&quot;owner&quot;:&#123;&quot;threshold&quot;:1,&quot;keys&quot;:[&#123;&quot;key&quot;:&quot;EOS6MRyAjQq8ud7hVNYcfn...warn 2018-11-28T03:33:33.304 thread-0 main.cpp:482 print_resuwarning: transaction executed locally, but may not be confirmed by the network yet...... 接下来将代币合约部署到eosio.token账户中： 123456789101112root@iZj6c4i3ovav4gk164bft3Z:~/eos/build/programs/cleos$ cd /root/eos/build/unittests/contracts # 进入编译后的合约目录root@iZj6c4i3ovav4gk164bft3Z:~/eos/build/unittests/contracts# cleos set contract eosio.token ./eosio.token#执行结果：Reading WASM from ./eosio.token/eosio.token.wasm...Publishing contract...executed transaction: 69b358aab5d199797aa8165b5969646881aed401ea03b2b6def43affdd183f3e 8104 bytes 27919 us# eosio &lt;= eosio::setcode &#123;&quot;account&quot;:&quot;eosio.token&quot;,&quot;vmtype&quot;:0,&quot;vmversion&quot;:0,&quot;code&quot;:&quot;0061736d01000000017e1560037f7e7f0060057f7e...# eosio &lt;= eosio::setabi &#123;&quot;account&quot;:&quot;eosio.token&quot;,&quot;abi&quot;:&quot;0e656f73696f3a3a6162692f312e30010c6163636f756e745f6e616d65046e616d65...warn 2018-11-28T03:41:50.674 thread-0 main.cpp:482 print_resuwarning: transaction executed locally, but may not be confirmed by the network yet 创建1亿个EOS代币（这里的EOS币相当于主网中的EOS）： 123456root@iZj6c4i3ovav4gk164bft3Z:~/eos/build/unittests/contracts# cleos push action eosio.token create &apos;[&quot;eosio&quot;,&quot;10000000000.0000 EOS&quot;,0,0,0]&apos; -p eosio.token#执行结果：executed transaction: cb0973dfa4a52dd0c99ef56834c84d391dda565a4aeeafaaafaef5642190f4e4 120 bytes 1436 us# eosio.token &lt;= eosio.token::create &#123;&quot;issuer&quot;:&quot;eosio&quot;,&quot;maximum_supply&quot;:&quot;100000000.0000 EOS&quot;&#125;warn 2018-11-28T03:44:50.857 thread-0 main.cpp:482 print_resuwarning: transaction executed locally, but may not be confirmed by the network yet 发行代币，数量：10000000000，代币符号：EOS。 123456root@iZj6c4i3ovav4gk164bft3Z:~/eos/build/unittests/contracts# cleos push action eosio.token issue &apos;[&quot;eosio&quot;,&quot;10000000000.0000 EOS&quot;,&quot;issue&quot;]&apos; -p eosio# 执行结果executed transaction: 59f8a3fe587335f5c3ebdd12ac7a39f638cf028966a6efa2250f1244e82f178d 128 bytes 1288 us# eosio.token &lt;= eosio.token::issue &#123;&quot;to&quot;:&quot;eosio&quot;,&quot;quantity&quot;:&quot;10000000000.0000 EOS&quot;,&quot;memo&quot;:&quot;memo&quot;&#125;warn 2018-11-28T03:54:16.092 thread-0 main.cpp:482 print_resuwarning: transaction executed locally, but may not be confirmed by the network yet 查询余额123root@iZj6c4i3ovav4gk164bft3Z:~/eos/build/unittests/contracts# cleos get currency balance eosio.token eosio10000000000.0000 EOS 创建账号在EOS中，为了控制权限，创建账号是需要指定一个创建者的，例如默认钱包的创建者是eosio，所以创建default账号中含有eosio的私钥。 创建账户的格式如下： 1cleos create account AUTHORIZING_ACCOUNT NEW_ACCOUNT OWNER_KEY ACTIVE_KEY authorizing_account 是新账户的创建者。在此教程中，由于我们运行的是一个单节点测试网络，所以我们拥有一个名为eosio的系统账户，因此我们使用eosio作为新账户的创建者 new_account 是要创建的账户名称 owner_key 是账户owner权限的公钥 active_key 是账户active权限的公钥 我们使用account1作为新账户名称，使用eosio作为新账户的创建者，使用之前生成并导入default钱包的两个公钥EOS5Fwtc4vnQE8AigimXvHrERrK7XFpycQ8Dijq2611timbVTReDt和EOS75hPAeMGgAw9FYLTAHqjHyicjW82bB1q9grXqDtCdMDMpe1eoa分别作为owner权限和active权限的公钥，注意这里是使用公钥！！！ 1root@iZj6c4i3ovav4gk164bft3Z:~/eos/build/unittests/contracts# cleos create account eosio account1 EOS5Fwtc4vnQE8AigimXvHrERrK7XFpycQ8Dijq2611timbVTReDt EOS75hPAeMGgAw9FYLTAHqjHyicjW82bB1q9grXqDtCdMDMpe1eoa 我这里报错了,因为交易是需要RAM资源的。如果没有报错请忽略下面一步。 123Error 3080001: Account using more than allotted RAM usageError Details:account account1 has insufficient ram; needs 2996 bytes has 0 bytes 将创建命令改为下面的才能成功 12345678910111213root@iZj6c4i3ovav4gk164bft3Z:~/eos/build/programs/cleos$ sudo ./cleos system newaccount eosio account1 EOS5Fwtc4vnQE8AigimXvHrERrK7XFpycQ8Dijq2611timbVTReDt EOS75hPAeMGgAw9FYLTAHqjHyicjW82bB1q9grXqDtCdMDMpe1eoa --stake-net &apos;0 EOS&apos; --stake-cpu &apos;0 EOS&apos; --buy-ram-kbytes 3 -x 30executed transaction: 5171d92b16934b8a773a57e617aba5443f5394551cba376eb2d61788ea7460b4 248 bytes 1448 us# eosio &lt;= eosio::newaccount &#123;&quot;creator&quot;:&quot;eosio&quot;,&quot;name&quot;:&quot;account1&quot;,&quot;owner&quot;:&#123;&quot;threshold&quot;:1,&quot;keys&quot;:[&#123;&quot;key&quot;:&quot;EOS5Fwtc4vnQE8AigimXvHrE...# eosio &lt;= eosio::buyrambytes &#123;&quot;payer&quot;:&quot;eosio&quot;,&quot;receiver&quot;:&quot;account1&quot;,&quot;bytes&quot;:3072&#125;# eosio.token &lt;= eosio.token::transfer &#123;&quot;from&quot;:&quot;eosio&quot;,&quot;to&quot;:&quot;eosio.ram&quot;,&quot;quantity&quot;:&quot;0.4447 SYS&quot;,&quot;memo&quot;:&quot;buy ram&quot;&#125;# eosio &lt;= eosio.token::transfer &#123;&quot;from&quot;:&quot;eosio&quot;,&quot;to&quot;:&quot;eosio.ram&quot;,&quot;quantity&quot;:&quot;0.4447 SYS&quot;,&quot;memo&quot;:&quot;buy ram&quot;&#125;# eosio.ram &lt;= eosio.token::transfer &#123;&quot;from&quot;:&quot;eosio&quot;,&quot;to&quot;:&quot;eosio.ram&quot;,&quot;quantity&quot;:&quot;0.4447 SYS&quot;,&quot;memo&quot;:&quot;buy ram&quot;&#125;# eosio.token &lt;= eosio.token::transfer &#123;&quot;from&quot;:&quot;eosio&quot;,&quot;to&quot;:&quot;eosio.ramfee&quot;,&quot;quantity&quot;:&quot;0.0023 SYS&quot;,&quot;memo&quot;:&quot;ram fee&quot;&#125;# eosio &lt;= eosio.token::transfer &#123;&quot;from&quot;:&quot;eosio&quot;,&quot;to&quot;:&quot;eosio.ramfee&quot;,&quot;quantity&quot;:&quot;0.0023 SYS&quot;,&quot;memo&quot;:&quot;ram fee&quot;&#125;# eosio.ramfee &lt;= eosio.token::transfer &#123;&quot;from&quot;:&quot;eosio&quot;,&quot;to&quot;:&quot;eosio.ramfee&quot;,&quot;quantity&quot;:&quot;0.0023 SYS&quot;,&quot;memo&quot;:&quot;ram fee&quot;&#125;warn 2018-12-05T10:49:19.302 thread-0 main.cpp:482 print_resuwarning: transaction executed locally, but may not be confirmed by the network yet 查询刚刚创建的账号： 1234567891011121314151617181920root@iZj6c4i3ovav4gk164bft3Z:~/eos/build/unittests/contracts# cleos get account account1created: 2018-12-05T10:49:19.500permissions: owner 1: 1 EOS5Fwtc4vnQE8AigimXvHrERrK7XFpycQ8Dijq2611timbVTReDt active 1: 1 EOS75hPAeMGgAw9FYLTAHqjHyicjW82bB1q9grXqDtCdMDMpe1eoamemory: quota: 2.982 KiB used: 2.926 KiB net bandwidth: delegated: 0.0000 SYS (total staked delegated to account from others) used: 0 bytes available: 0 bytes limit: 0 bytescpu bandwidth: delegated: 0.0000 SYS (total staked delegated to account from others) used: 0 us available: 0 us limit: 0 us 锁定钱包锁定默认钱包 12root@iZj6c4i3ovav4gk164bft3Z:~/eos# cleos wallet lockLocked: default 锁定指定钱包 123root@iZj6c4i3ovav4gk164bft3Z:~/eos# cleos wallet lock -n accountnameLocked: accountname keosd会在没有钱包指令的15分钟后自动锁定钱包，可以在~/eosio-wallet/config.ini中进行时长修改。可以设置一个超大数来取消这项功能。如果设为0，将会导致钱包永久锁定。 解锁钱包没有-n指定钱包名会解锁默认钱包，默认钱包解锁密码是”导入私钥”中创建钱包时得到的PW开头的私钥 12root@iZj6c4i3ovav4gk164bft3Z:~/eos# cleos wallet unlock -n accountnamepassword: Unlocked: accountname 再次查看钱包，可以看到有*号表示已经解锁了 12345root@iZj6c4i3ovav4gk164bft3Z:~/eos# cleos wallet listWallets:[ &quot;default&quot;] 发送交易转100个币到account1账号中 1root@iZj6c4i3ovav4gk164bft3Z:~/eos# cleos push action eosio.token transfer &apos;[&quot;eosio&quot;, &quot;account1&quot;,&quot;100.0000 EOS&quot;,&quot;memo&quot;]&apos; -p eosio 查询account1账号的余额 12root@iZj6c4i3ovav4gk164bft3Z:~/eos# cleos get currency balance eosio.token account1100.0000 EOS 参考文章RPC中文文档：http://cw.hubwiz.com/card/c/eos-rpc-api EOS WiKi中文版：https://eoswiki.readthedocs.io/zh_CN/latest/ https://www.jianshu.com/nb/24907261 https://zhuanlan.zhihu.com/p/40009564 https://blog.csdn.net/littlefool5201314/article/details/79869114 https://www.jianshu.com/p/13c7bddacfd9 https://www.bcskill.com/index.php/archives/21.html]]></content>
      <categories>
        <category>EOS</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>EOS测试环境</tag>
        <tag>EOS私有链</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu下USDT测试环境搭建]]></title>
    <url>%2F2020%2F12%2F14%2F14.Ubuntu%E4%B8%8BUSDT%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚博客地址：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian联系方式：jian1098@qq.com 关于USDT泰达币（USDT）是Tether公司推出的基于稳定价值货币美元（USD）的代币Tether USD（下称USDT），1USDT=1美元，用户可以随时使用USDT与USD进行1:1兑换。Tether 公司严格遵守1：1的准备金保证，即每发行1个 USDT 代币，其银行账户都会有1美元的资金保障。用户可以在 Tether 平台进行资金查询，以保障透明度。 Omni Layer是一种通信协议，它使用比特币区块链实现智能合约，用户货币和分散式点对点交换等功能。 Omni Core是基于比特币核心代码库的快速，便携式Omni层实现。 这种实现不需要与Bitcoin Core无关的外部依赖关系，并且与其他比特币节点一样，它本身就是比特币网络。 它目前支持钱包模式，并可在三种平台上无缝使用：Windows，Linux和Mac OS。 Omni Layer扩展通过JSON-RPC接口公开。 Tether的钱包是以bitcoin区块网络为基础的，在这个网络上面搭建了名为Omni Layer的共识网络，其主要的思想是对bitcoin的区块进行染色，写入需要存储的数据。 安装omnicore程序123jian@ubuntu:/root# wget https://github.com/OmniLayer/omnicore/releases/download/v0.3.1/omnicore-0.3.1-x86_64-linux-gnu.tar.gzjian@ubuntu:/root# tar -zvxf omnicore-0.3.1-x86_64-linux-gnu.tar.gz jian@ubuntu:/root# sudo install -m 0755 -o root -g root -t /usr/local/bin ./omnicore-0.3.1/bin/* 配置bitcoin参数1234jian@ubuntu:~$ mkdir .bitcoin #创建主目录,如果目录已经存在请跳过jian@ubuntu:~$ mkdir omnidata #创建区块数据目录jian@ubuntu:~$ cd .bitcoin/jian@ubuntu:~/.bitcoin$ vi bitcoin.conf 将下面信息全部复制，并修改rpcuser（RPC用户名），rpcpassword（RPC用户密码），rpcallowip（允许访问的ip地址）然后保存 1234567891011121314151617181920212223242526# Generated by https://jlopp.github.io/bitcoin-core-config-generator/# This config should be placed in following path:# ~/.bitcoin/bitcoin.conf# [rpc]# Accept command line and JSON-RPC commands.server=1# Username for JSON-RPC connectionsrpcuser=omnicorerpc# Password for JSON-RPC connectionsrpcpassword=omnicorerpc# Listen for JSON-RPC connections on this portrpcport=18332# Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), # a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option # can be specified multiple times.cd /usrrpcallowip=192.168.1.174rpcallowip=192.168.1.179# Run this node on the litecoin Test Network.testnet=1 启动omnicore程序请将-conf和-datadir 路径修改为你的路径 1jian@ubuntu:~/.omni$ omnicored -conf=/home/jian/.bitcoin/bitcoin.conf -datadir=/home/jian/omnidata -txindex=1 -daemon 1234567892018-11-22 10:46:09 Loading trades database: OK2018-11-22 10:46:09 Loading send-to-owners database: OK2018-11-22 10:46:09 Loading tx meta-info database: OK2018-11-22 10:46:09 Loading smart property database: OK2018-11-22 10:46:09 Loading master transactions database: OK2018-11-22 10:46:09 Loading fee cache database: OK2018-11-22 10:46:09 Loading fee history database: OK2018-11-22 10:46:09 Loading persistent state: NONE (no usable previous state found)2018-11-22 10:46:09 Omni Core initialization completed 初始化两分钟后再查看是否启动成功，要不然不会输出任何信息，需要输入上一步配置的密码，用户名omnirpc改为你bitcoin.conf中配置的用户名： 1jian@ubuntu:~$ curl --user omnicorerpc --data-binary &apos;&#123;&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getnetworkinfo&quot;, &quot;params&quot;: [] &#125;&apos; -H &apos;content-type: text/plain;&apos; http://127.0.0.1:18332 能返回下面的信息表示启动成功 1&#123;&quot;result&quot;:&#123;&quot;version&quot;:130200,&quot;subversion&quot;:&quot;/Satoshi:0.13.2/&quot;,&quot;protocolversion&quot;:70015,&quot;localservices&quot;:&quot;000000000000000d&quot;,&quot;localrelay&quot;:true,&quot;timeoffset&quot;:0,&quot;connections&quot;:2,&quot;networks&quot;:[&#123;&quot;name&quot;:&quot;ipv4&quot;,&quot;limited&quot;:false,&quot;reachable&quot;:true,&quot;proxy&quot;:&quot;&quot;,&quot;proxy_randomize_credentials&quot;:false&#125;,&#123;&quot;name&quot;:&quot;ipv6&quot;,&quot;limited&quot;:false,&quot;reachable&quot;:true,&quot;proxy&quot;:&quot;&quot;,&quot;proxy_randomize_credentials&quot;:false&#125;,&#123;&quot;name&quot;:&quot;onion&quot;,&quot;limited&quot;:true,&quot;reachable&quot;:false,&quot;proxy&quot;:&quot;&quot;,&quot;proxy_randomize_credentials&quot;:false&#125;],&quot;relayfee&quot;:0.00001000,&quot;localaddresses&quot;:[],&quot;warnings&quot;:&quot;&quot;&#125;,&quot;error&quot;:null,&quot;id&quot;:&quot;curltest&quot;&#125; 停止omnicore程序1jian@ubuntu:~/.omni$ omnicore-cli -conf=/home/jian/.bitcoin/bitcoin.conf stop 检查区块同步信息检查同步日志（刷屏）： 12345678910111213jian@ubuntu:~$ cd ~/omnidata/testnet3/jian@ubuntu:~/omnidata/testnet3$ tail -f debug.log 2018-11-21T02:40:28Z net thread start2018-11-21T02:40:31Z New outbound peer connected: version: 70015, blocks=1444366, peer=12018-11-21T02:40:31Z New outbound peer connected: version: 70015, blocks=1444366, peer=02018-11-21T02:40:32Z 108 addresses found from DNS seeds2018-11-21T02:40:32Z dnsseed thread exit2018-11-21T02:40:36Z New outbound peer connected: version: 70015, blocks=1444366, peer=22018-11-21T02:40:37Z New outbound peer connected: version: 70015, blocks=1444366, peer=52018-11-21T02:40:37Z New outbound peer connected: version: 70015, blocks=1444366, peer=32018-11-21T02:40:41Z New outbound peer connected: version: 70015, blocks=1444366, peer=42018-11-21T02:40:48Z New outbound peer connected: version: 70015, blocks=1414448, peer=6....... 查询当前同步到的区块数： 1jian@ubuntu:~/omnidata/testnet3$ curl --user omnicorerpc --data-binary &apos;&#123;&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getblockcount&quot;, &quot;params&quot;: [] &#125;&apos; -H &apos;content-type: text/plain;&apos; http://127.0.0.1:18332/ 由于usdt是基于BTC的，所有可以在比特币测试链上查询测试网络中的总区块：https://live.blockcypher.com/btc-testnet/ 需要注意的是只有区块同步到最新才可以查到钱包余额，要同步完区块，需要70G以上的硬盘空间。 创建钱包地址123jian@ubuntu:~$ curl --user omnirpc --data-binary &apos;&#123;&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getnewaddress&quot;, &quot;params&quot;: [&quot;test&quot;] &#125;&apos; -H &apos;content-type: text/plain;&apos; http://127.0.0.1:18332/&#123;&quot;result&quot;:&quot;n1Axxy3WGwFci1GJffwdY55dRem92GKXAm&quot;,&quot;error&quot;:null,&quot;id&quot;:&quot;curltest&quot;&#125; 返回结果中的 “n1Axxy3WGwFci1GJffwdY55dRem92GKXAm” 即为新创建的USDT钱包，以m开头表示是测试链的钱包地址，公链上的钱包地址一般是1开头 查询余额查询比特币余额 1jian@ubuntu:~$ curl --user omnicorerpc --data-binary &apos;&#123;&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getbalance&quot;, &quot;params&quot;: [] &#125;&apos; -H &apos;content-type: text/plain;&apos; http://127.0.0.1:18332/ 查询USDT余额，请将钱包地址换成你的 1jian@ubuntu:~$ omnicore-cli omni_getbalance &quot;n1Axxy3WGwFci1GJffwdY55dRem92GKXAm&quot; 1 或者 1jian@ubuntu:~$ curl --user omnicorerpc --data-binary &apos;&#123;&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;omni_getbalance&quot;, &quot;params&quot;: [&quot;n1Axxy3WGwFci1GJffwdY55dRem92GKXAm&quot;, 1] &#125;&apos; -H &apos;content-type: text/plain;&apos; http://127.0.0.1:18332/ 获取测试币在下面两个网站中可以获得少量的测试比特币，用来做USDT交易手续费测试足够了，此时区块必须同步到最新，要不然获取不到余额： https://coinfaucet.eu/en/btc-testnet/ http://bitcoinfaucet.uo1.net/send.php 获取到比特币之后用下面的命令往moneyqMan7uh8FqdCA2BV5yZ8qVrc9ikLP发送比特币可以得到一点测试的USDT，每1BTC可以获得100个USDT，这里发送0.1个获得USDT10个 1jian@ubuntu:~$omnicore-cli -testnet sendtoaddress &quot;moneyqMan7uh8FqdCA2BV5yZ8qVrc9ikLP&quot; 0.1 你可以在比特币区块链浏览器查到btc余额：https://live.blockcypher.com/btc-testnet/address/2MtW8kA68TMrBLZb373WttjHbxfuRNdvHh7/ ，但是测试网络的usdt只能在你本地用命令行查，区块链浏览器查不到的。 发送交易参数分别是from，to，代币id，交易数量，支付btc手续费的地址 1jian@ubuntu:~$ omnicore-cli &quot;omni_funded_send&quot; &quot;n1Axxy3WGwFci1GJffwdY55dRem92GKXAm&quot; &quot;n4VTWrjPV1QaLmM1x8ZtyLiJoFk3KaCAsi&quot; 1 &quot;1&quot; &quot;n1Axxy3WGwFci1GJffwdY55dRem92GKXAm&quot; JSON-RPC可以查看：https://github.com/OmniLayer/omnicore/blob/master/src/omnicore/doc/rpc-api.md，需要用编程语言对接的话可以使用api中的函数和参数拼装成json数据，例如本文中的查询余额的 json 为{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getbalance&quot;, &quot;params&quot;: [] }，然后将这串json作为参数post提交到节点的ip和端口即可返回相应的json结果。]]></content>
      <categories>
        <category>USDT</category>
      </categories>
      <tags>
        <tag>测试环境</tag>
        <tag>USDT</tag>
        <tag>Omni</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu莱特币测试环境搭建]]></title>
    <url>%2F2020%2F12%2F14%2F13.Ubuntu%E8%8E%B1%E7%89%B9%E5%B8%81%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚博客地址：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 安装litecoin核心123root@ubuntu:~# wget https://download.litecoin.org/litecoin-0.16.3/linux/litecoin-0.16.3-x86_64-linux-gnu.tar.gzroot@ubuntu:~# tar -zvxf litecoin-0.16.3-x86_64-linux-gnu.tar.gz root@ubuntu:~# install -m 0755 -o root -g root -t /usr/local/bin ./litecoin-0.16.3/bin/* 配置litecoin参数123root@ubuntu:~$ mkdir .litecoin #创建目录root@ubuntu:~$ cd .litecoin/root@ubuntu:~$ vi litecoin.conf 将下面信息全部复制，并修改rpcuser（RPC用户名），rpcpassword（RPC用户密码），rpcallowip（允许访问的ip地址）然后保存 1234567891011121314151617181920212223242526# Generated by https://jlopp.github.io/litecoin-core-config-generator/# This config should be placed in following path:# ~/.litecoin/litecoin.conf# [rpc]# Accept command line and JSON-RPC commands.server=1# Username for JSON-RPC connectionsrpcuser=litecoinrpc# Password for JSON-RPC connectionsrpcpassword=litecoinrpc# Listen for JSON-RPC connections on this portrpcport=18332# Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), # a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option # can be specified multiple times.rpcallowip=192.168.1.178rpcallowip=192.168.1.179# Run this node on the litecoin Test Network.testnet=1 启动litecoin程序12root@ubuntu:~/.litecoin$ litecoind -daemonLitecoin server starting 查看是否启动成功，需要输入上一步配置的密码，用户名litecoinrpc改为你配置的用户名： 12root@ubuntu:~$ curl --user litecoinrpc --data-binary &apos;&#123;&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getnetworkinfo&quot;, &quot;params&quot;: [] &#125;&apos; -H &apos;content-type: text/plain;&apos; http://127.0.0.1:18332/Enter host password for user &apos;litecoinrpc&apos;: 能返回下面的信息表示启动成功 1&#123;&quot;result&quot;:&#123;&quot;version&quot;:170000,&quot;subversion&quot;:&quot;/Satoshi:0.17.0/&quot;,&quot;protocolversion&quot;:70015,&quot;localservices&quot;:&quot;000000000000040d&quot;,&quot;localrelay&quot;:true,&quot;timeoffset&quot;:0,&quot;networkactive&quot;:true,&quot;connections&quot;:5,&quot;networks&quot;:[&#123;&quot;name&quot;:&quot;ipv4&quot;,&quot;limited&quot;:false,&quot;reachable&quot;:true,&quot;proxy&quot;:&quot;&quot;,&quot;proxy_randomize_credentials&quot;:false&#125;,&#123;&quot;name&quot;:&quot;ipv6&quot;,&quot;limited&quot;:false,&quot;reachable&quot;:true,&quot;proxy&quot;:&quot;&quot;,&quot;proxy_randomize_credentials&quot;:false&#125;,&#123;&quot;name&quot;:&quot;onion&quot;,&quot;limited&quot;:true,&quot;reachable&quot;:false,&quot;proxy&quot;:&quot;&quot;,&quot;proxy_randomize_credentials&quot;:false&#125;],&quot;relayfee&quot;:0.00001000,&quot;incrementalfee&quot;:0.00001000,&quot;localaddresses&quot;:[],&quot;warnings&quot;:&quot;&quot;&#125;,&quot;error&quot;:null,&quot;id&quot;:&quot;curltest&quot;&#125; 停止litecoin程序12root@ubuntu:~/.litecoin/testnet3$ litecoin-cli stopLitecoin server stopping 检查区块同步信息检查同步日志（刷屏）： 12345678910111213root@ubuntu:~/.litecoin$ cd testnet4/root@ubuntu:~/.litecoin/testnet3$ tail -f debug.log 2018-11-21T02:40:28Z net thread start2018-11-21T02:40:31Z New outbound peer connected: version: 70015, blocks=1444366, peer=12018-11-21T02:40:31Z New outbound peer connected: version: 70015, blocks=1444366, peer=02018-11-21T02:40:32Z 108 addresses found from DNS seeds2018-11-21T02:40:32Z dnsseed thread exit2018-11-21T02:40:36Z New outbound peer connected: version: 70015, blocks=1444366, peer=22018-11-21T02:40:37Z New outbound peer connected: version: 70015, blocks=1444366, peer=52018-11-21T02:40:37Z New outbound peer connected: version: 70015, blocks=1444366, peer=32018-11-21T02:40:41Z New outbound peer connected: version: 70015, blocks=1444366, peer=42018-11-21T02:40:48Z New outbound peer connected: version: 70015, blocks=1414448, peer=6....... 查询当前同步到的区块数： 1234root@ubuntu:~/.litecoin/testnet4$ curl --user litecoinrpc --data-binary &apos;&#123;&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getblockcount&quot;, &quot;params&quot;: [] &#125;&apos; -H &apos;content-type: text/plain;&apos; http://127.0.0.1:18332/Enter host password for user &apos;litecoinrpc&apos;:&#123;&quot;result&quot;:128631,&quot;error&quot;:null,&quot;id&quot;:&quot;curltest&quot;&#125; 查询测试网络中的总区块：http://testnet.litecointools.com/ 需要注意的是只有区块同步到最新才可以查到钱包余额，从头开始同步大概需要一天时间。 创建钱包地址123root@ubuntu:~$ curl --user litecoinrpc --data-binary &apos;&#123;&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getnewaddress&quot;, &quot;params&quot;: [&quot;test&quot;] &#125;&apos; -H &apos;content-type: text/plain;&apos; http://127.0.0.1:18332/Enter host password for user &apos;litecoinrpc&apos;:&#123;&quot;result&quot;:&quot;QNuZnYa45hWRpsJz4SYwAEQfZS9UBc2j6L&quot;,&quot;error&quot;:null,&quot;id&quot;:&quot;curltest&quot;&#125; 返回结果中的 “QNuZnYa45hWRpsJz4SYwAEQfZS9UBc2j6L” 即为新创建的莱特币钱包地址 查询余额 1omni@ubuntu:~$ curl --user litecoinrpc --data-binary &apos;&#123;&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getbalance&quot;, &quot;params&quot;: [] &#125;&apos; -H &apos;content-type: text/plain;&apos; http://127.0.0.1:18332/ 获取测试币在下面两个网站中可以获得少量的测试币，用来测试足够了： http://testnet.litecointools.com/ https://faucet.xblau.com/ 你可以在莱特币区块链浏览器查到余额 http://explorer.litecointools.com/address/QNuZnYa45hWRpsJz4SYwAEQfZS9UBc2j6L]]></content>
      <categories>
        <category>莱特币</category>
      </categories>
      <tags>
        <tag>莱特币</tag>
        <tag>ltc</tag>
        <tag>测试环境</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu比特币测试环境搭建]]></title>
    <url>%2F2020%2F12%2F14%2F12.Ubuntu%E6%AF%94%E7%89%B9%E5%B8%81%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚博客地址：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 安装bitcoin核心1234root@ubuntu:~# sudo apt-get install software-properties-commonroot@ubuntu:~# sudo apt-add-repository ppa:bitcoin/bitcoinroot@ubuntu:~# sudo apt-get updateroot@ubuntu:~# sudo apt-get install bitcoind 配置bitcoin参数123root@ubuntu:~$ mkdir .bitcoin #创建目录root@ubuntu:~$ cd .bitcoin/root@ubuntu:~$ vi bitcoin.conf 将下面信息全部复制，并修改rpcuser（RPC用户名），rpcpassword（RPC用户密码），rpcallowip（允许访问的ip地址）然后保存 1234567891011121314151617181920212223242526# Generated by https://jlopp.github.io/bitcoin-core-config-generator/# This config should be placed in following path:# ~/.bitcoin/bitcoin.conf# [rpc]# Accept command line and JSON-RPC commands.server=1# Username for JSON-RPC connectionsrpcuser=bitcoinrpc# Password for JSON-RPC connectionsrpcpassword=bitcoinrpc# Listen for JSON-RPC connections on this portrpcport=18332# Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), # a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option # can be specified multiple times.rpcallowip=192.168.1.178rpcallowip=192.168.1.179# Run this node on the Bitcoin Test Network.testnet=1 启动bitcoin程序12root@ubuntu:~/.bitcoin$ bitcoind -daemonBitcoin server starting 查看是否启动成功，需要输入上一步配置的密码，用户名bitcoinrpc改为你配置的用户名： 12root@ubuntu:~$ curl --user bitcoinrpc --data-binary &apos;&#123;&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getnetworkinfo&quot;, &quot;params&quot;: [] &#125;&apos; -H &apos;content-type: text/plain;&apos; http://127.0.0.1:18332/Enter host password for user &apos;bitcoinrpc&apos;: 能返回下面的信息表示启动成功 1&#123;&quot;result&quot;:&#123;&quot;version&quot;:170000,&quot;subversion&quot;:&quot;/Satoshi:0.17.0/&quot;,&quot;protocolversion&quot;:70015,&quot;localservices&quot;:&quot;000000000000040d&quot;,&quot;localrelay&quot;:true,&quot;timeoffset&quot;:0,&quot;networkactive&quot;:true,&quot;connections&quot;:5,&quot;networks&quot;:[&#123;&quot;name&quot;:&quot;ipv4&quot;,&quot;limited&quot;:false,&quot;reachable&quot;:true,&quot;proxy&quot;:&quot;&quot;,&quot;proxy_randomize_credentials&quot;:false&#125;,&#123;&quot;name&quot;:&quot;ipv6&quot;,&quot;limited&quot;:false,&quot;reachable&quot;:true,&quot;proxy&quot;:&quot;&quot;,&quot;proxy_randomize_credentials&quot;:false&#125;,&#123;&quot;name&quot;:&quot;onion&quot;,&quot;limited&quot;:true,&quot;reachable&quot;:false,&quot;proxy&quot;:&quot;&quot;,&quot;proxy_randomize_credentials&quot;:false&#125;],&quot;relayfee&quot;:0.00001000,&quot;incrementalfee&quot;:0.00001000,&quot;localaddresses&quot;:[],&quot;warnings&quot;:&quot;&quot;&#125;,&quot;error&quot;:null,&quot;id&quot;:&quot;curltest&quot;&#125; 停止bitcoin程序12root@ubuntu:~/.bitcoin/testnet3$ bitcoin-cli stopBitcoin server stopping 检查区块同步信息检查同步日志（刷屏）： 12345678910111213root@ubuntu:~/.bitcoin$ cd testnet3/root@ubuntu:~/.bitcoin/testnet3$ tail -f debug.log 2018-11-21T02:40:28Z net thread start2018-11-21T02:40:31Z New outbound peer connected: version: 70015, blocks=1444366, peer=12018-11-21T02:40:31Z New outbound peer connected: version: 70015, blocks=1444366, peer=02018-11-21T02:40:32Z 108 addresses found from DNS seeds2018-11-21T02:40:32Z dnsseed thread exit2018-11-21T02:40:36Z New outbound peer connected: version: 70015, blocks=1444366, peer=22018-11-21T02:40:37Z New outbound peer connected: version: 70015, blocks=1444366, peer=52018-11-21T02:40:37Z New outbound peer connected: version: 70015, blocks=1444366, peer=32018-11-21T02:40:41Z New outbound peer connected: version: 70015, blocks=1444366, peer=42018-11-21T02:40:48Z New outbound peer connected: version: 70015, blocks=1414448, peer=6....... 查询当前同步到的区块数： 1root@ubuntu:~$ curl --user bitcoinrpc --data-binary &apos;&#123;&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getblockcount&quot;, &quot;params&quot;: [] &#125;&apos; -H &apos;content-type: text/plain;&apos; http://127.0.0.1:18332/ 查询测试网络中的总区块：https://live.blockcypher.com/btc-testnet/ 需要注意的是只有区块同步到最新才可以查到钱包余额，从头开始同步大概需要一天时间。 创建钱包地址123root@ubuntu:~$ curl --user bitcoinrpc --data-binary &apos;&#123;&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getnewaddress&quot;, &quot;params&quot;: [&quot;test&quot;] &#125;&apos; -H &apos;content-type: text/plain;&apos; http://127.0.0.1:18332/Enter host password for user &apos;bitcoinrpc&apos;:&#123;&quot;result&quot;:&quot;2MyUBCnC2FvwX6ihegTVCKn1iKc5JeyEbKr&quot;,&quot;error&quot;:null,&quot;id&quot;:&quot;curltest&quot;&#125; 返回结果中的 “2MyUBCnC2FvwX6ihegTVCKn1iKc5JeyEbKr” 即为新创建的比特币钱包，以2开头表示是测试链的钱包地址，公链上的钱包地址一般是3开头 查询余额 1omni@ubuntu:~$ curl --user bitcoinrpc --data-binary &apos;&#123;&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getbalance&quot;, &quot;params&quot;: [] &#125;&apos; -H &apos;content-type: text/plain;&apos; http://127.0.0.1:18332/ 获取测试币在下面两个网站中可以获得少量的测试币，用来测试足够了： https://coinfaucet.eu/en/btc-testnet/ http://bitcoinfaucet.uo1.net/send.php 你可以在比特币区块链浏览器查到余额：https://live.blockcypher.com/btc-testnet/address/2MtW8kA68TMrBLZb373WttjHbxfuRNdvHh7/]]></content>
      <categories>
        <category>比特币</category>
      </categories>
      <tags>
        <tag>测试环境</tag>
        <tag>比特币</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu下go语言环境搭建]]></title>
    <url>%2F2020%2F12%2F14%2F11.Ubuntu%E4%B8%8Bgo%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚博客地址：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian联系方式：jian1098@qq.com 安装程序到官网https://golang.google.cn/dl/复制最新的下载地址，然后下载压缩包 1jian@ubuntu:~$ wget https://dl.google.com/go/go1.13.1.linux-amd64.tar.gz 解压 1jian@ubuntu:~$ sudo tar zxvf go1.13.1.linux-amd64.tar.gz -C /opt/ 配置环境12jian@ubuntu:~$ mkdir go #创建项目目录jian@ubuntu:~$ vi /etc/profile 将下面的GOPATH路径修改为你的项目路径，然后将3条命令添加到文件的最后，保存；第一个是工作目录，第二个是go程序目录 123export GOROOT=/opt/goexport GOPATH=/home/jian/goexport PATH=$PATH:$GOROOT/bin:$GOPATH/bin 执行下面的命令使环境变量生效 1jian@ubuntu:~$ source /etc/profile 查看配置好的go环境变量 12345678910111213141516171819202122232425262728293031323334jian@ubuntu:~$ go envGO111MODULE=&quot;&quot;GOARCH=&quot;amd64&quot;GOBIN=&quot;/home/jian/go/bin&quot;GOCACHE=&quot;/home/jian/.cache/go-build&quot;GOENV=&quot;/home/jian/.config/go/env&quot;GOEXE=&quot;&quot;GOFLAGS=&quot;&quot;GOHOSTARCH=&quot;amd64&quot;GOHOSTOS=&quot;linux&quot;GONOPROXY=&quot;&quot;GONOSUMDB=&quot;&quot;GOOS=&quot;linux&quot;GOPATH=&quot;/root/jian/go&quot;GOPRIVATE=&quot;&quot;GOPROXY=&quot;https://proxy.golang.org,direct&quot;GOROOT=&quot;/opt/go&quot;GOSUMDB=&quot;sum.golang.org&quot;GOTMPDIR=&quot;&quot;GOTOOLDIR=&quot;/opt/go/pkg/tool/linux_amd64&quot;GCCGO=&quot;gccgo&quot;AR=&quot;ar&quot;CC=&quot;gcc&quot;CXX=&quot;g++&quot;CGO_ENABLED=&quot;1&quot;GOMOD=&quot;&quot;CGO_CFLAGS=&quot;-g -O2&quot;CGO_CPPFLAGS=&quot;&quot;CGO_CXXFLAGS=&quot;-g -O2&quot;CGO_FFLAGS=&quot;-g -O2&quot;CGO_LDFLAGS=&quot;-g -O2&quot;PKG_CONFIG=&quot;pkg-config&quot;GOGCCFLAGS=&quot;-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build756453408=/tmp/go-build -gno-record-gcc-switches&quot; 查看版本 12jian@ubuntu:~$ go versiongo version go1.13.1 linux/amd64 编写项目创建目录 1234jian@ubuntu:~$ cd go #进入项目目录jian@ubuntu:~/go$ mkdir bin #存放go install 编译安装之后生成的可执行文件会在这个目录中jian@ubuntu:~/go$ mkdir pkg #存放go build 编译生成的库文件jian@ubuntu:~/go$ mkdir src #源代码目录 编写main.go 12jian@ubuntu:~/go$ cd srcjian@ubuntu:~/go/src$ vi main.go 将下面的hello world代码保存 1234567package mainimport &quot;fmt&quot;func main() &#123; fmt.Println(&quot;Hello, World!&quot;)&#125; 执行程序 12jian@ubuntu:~/go/src$ go run main.goHello, World! 编译程序 1jian@ubuntu:~/go/src$ go build main.go 如果编译过程中出现下面的报错，则需要另外安装gcc编译器 1exec: &quot;gcc&quot;: executable file not found in $PATH 安装命令如下 12sudo yum install gcc # CentOssudo apt-get install build-essential #Ubuntu 安装完查看版本 1gcc --version 可视化编辑器推荐的编辑器有GoLand和Sublime GoLand下载压缩包：https://www.jetbrains.com/go/download/#section=linux 解压 1jian@ubuntu:~/Desktop$ tar -zxzf goland-2018.3.2.tar.gz 启动 12jian@ubuntu:~/Desktop$ cd GoLand-2018.3.2/binjian@ubuntu:~/Desktop/GoLand-2018.3.2/bin$ ./goland.sh 打开上面编写的项目即可 Sublime依次执行下面的命令进行安装 12345jian@ubuntu:~$ wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -jian@ubuntu:~$ sudo apt-get install apt-transport-httpsjian@ubuntu:~$ echo &quot;deb https://download.sublimetext.com/ apt/stable/&quot; | sudo tee /etc/apt/sources.list.d/sublime-text.listjian@ubuntu:~$ sudo apt-get updatejian@ubuntu:~$ sudo apt-get install sublime-text 安装完成后可以在应用程序列表中找到Sublime的图标，点击即可启动]]></content>
      <categories>
        <category>Go语言</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>go语言</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu以太坊节点搭建]]></title>
    <url>%2F2020%2F12%2F14%2F10.Ubuntu%E4%BB%A5%E5%A4%AA%E5%9D%8A%E8%8A%82%E7%82%B9%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚博客地址：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com 安装Geth1234root@dserv834-mtl8:~# apt-get install software-properties-commonroot@dserv834-mtl8:~# add-apt-repository -y ppa:ethereum/ethereumroot@dserv834-mtl8:~# apt-get updateroot@dserv834-mtl8:~# apt-get install ethereum 安装后查询到geth版本即为安装成功 12345678910111213root@dserv834-mtl8:~# which geth ###查看geth路径/usr/bin/gethroot@dserv834-mtl8:~# geth versionGethVersion: 1.8.12-stableGit Commit: 37685930d953bcbe023f9bc65b135a8d8b8f1488Architecture: amd64Protocol Versions: [63 62]Network Id: 1Go Version: go1.10Operating System: linuxGOPATH=GOROOT=/usr/lib/go-1.10 创建Geth启动/停止脚本查看本地IP地址，得到内网地址为173.209.49.10 12345678910root@dserv834-mtl8:~# ifconfig -aeno1 Link encap:Ethernet HWaddr ac:1f:6b:82:8c:f4 inet addr:173.209.49.10 Bcast:173.209.49.15 Mask:255.255.255.248 inet6 addr: fe80::ae1f:6bff:fe82:8cf4/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:164109642 errors:0 dropped:10 overruns:0 frame:0 TX packets:143189840 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:87852826043 (87.8 GB) TX bytes:35500135072 (35.5 GB) Memory:df200000-df27ffff 创建geth启动脚本starteth.sh，将第二行开始的脚本复制保存，需要修改rpcaddr的ip，datadir可以省略，一般将datadir改为大容量的数据盘目录 1234root@dserv834-mtl8:~# vi starteth.sh #!/bin/bashnohup geth --rpcaddr &quot;173.209.49.10&quot; --rpc --rpccorsdomain=&quot;*&quot; --datadir &quot;/data/ethereum&quot; &gt;&gt; geth.log 2&gt;&amp;1 &amp; 创建geth停止脚本stopeth.sh，将第二行开始的脚本复制保存 123456789root@dserv834-mtl8:~# vi stopeth.sh #!/bin/bashPIDS=`ps -ef |grep geth |grep -v grep | awk &apos;&#123;print $2&#125;&apos;`if [ &quot;$PIDS&quot; != &quot;&quot; ]; then kill -9 $PIDSelse echo `date +%F&quot; &quot;%H:%M:%S` &quot;Geth is NOT runing!&quot;fi 配置脚本执行权限 1234root@dserv834-mtl8:~# chmod u+x st*.shroot@dserv834-mtl8:~# ls -la *.sh-rwxr--r-- 1 root root 95 Jul 10 11:41 starteth.sh-rwxr--r-- 1 root root 171 Jul 11 21:49 stopeth.sh 启动geth程序同步区块数据 启动Geth开始同步数据，通过查看geth.log来监控Geth的同步情况 1234567root@dserv834-mtl8:~# ./starteth.shroot@dserv834-mtl8:~# tail -f geth.logINFO [07-11|21:51:06.609] Imported new chain segment blocks=1 txs=55 mgas=7.992 elapsed=368.336ms mgasps=21.697 number=5948083 hash=14c024…a9d1bb cache=267.07mBINFO [07-11|21:51:10.051] Imported new chain segment blocks=1 txs=43 mgas=7.987 elapsed=105.155ms mgasps=75.959 number=5948084 hash=ede212…56e3b8 cache=267.22mBINFO [07-11|21:51:13.530] Imported new chain segment blocks=1 txs=133 mgas=7.961 elapsed=431.951ms mgasps=18.431 number=5948085 hash=533343…c40637 cache=267.59mBINFO [07-11|21:51:17.785] Imported new chain segment blocks=1 txs=51 mgas=7.982 elapsed=304.528ms mgasps=26.211 number=5948086 hash=8918b3…263ea8 cache=268.06mB.......... 一般情况下geth从0开始同步需要3天左右的时间，由服务器的带宽和性能决定，可以购买境外的服务器，如香港的阿里云。 判断同步完成geth在同步的时候，通过geth console查看eth.blockNumber命令查询区块高度，如果得到的结果是0，说明没有同步完成，如果得到最新的区块，说明已经同步到最新区块了。]]></content>
      <categories>
        <category>以太坊</category>
      </categories>
      <tags>
        <tag>以太坊</tag>
        <tag>ethereum</tag>
        <tag>节点搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2020%2F12%2F14%2F1.Hello%20World%2F</url>
    <content type="text"><![CDATA[本文作者：陈进坚博客地址：https://jian1098.github.ioCSDN博客：https://blog.csdn.net/c_jian简书：https://www.jianshu.com/u/8ba9ac5706b6联系方式：jian1098@qq.com Hello,大家好，我是本博客的作者陈进坚。欢迎来到我的个人博客，从今天起我将不定时在博客和CSDN同步发布技术文档。主要是关于PHP,Golang和区块链方面的开发技术，欢迎大家关注收藏~ 本站是基于Hexo在github上搭建的免费博客，建站步骤和主题参考： https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/ 除了在本博客、简书和本人的CSDN博客中发布，所有未经授权的文章禁止转载哦，如果大家看到我的文章未授权被转载盗用了请联系我，当然，如果觉得我的文章不错想要转载可以邮箱联系我，可以提供Markdown源文件哦。]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>第一篇文章</tag>
        <tag>关于博客</tag>
      </tags>
  </entry>
</search>
